<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>深度优先搜索与广度优先搜索</title>
    <url>/Java/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>（1）图的表示方法：邻接矩阵（二维数组）、邻接表（链表数组【链表的链表】）。</p>
<p>（2）图的搜索方法：深度优先搜索（DFS）和广度优先搜索（BFS）。</p>
<a id="more"></a>
<h1 id="图的深度优先搜索"><a href="#图的深度优先搜索" class="headerlink" title="图的深度优先搜索"></a>图的深度优先搜索</h1><p>（1）用栈记录下一步的走向。访问一个顶点的过程中要做三件事：</p>
<pre><code>       ①访问顶点

       ②顶点入栈，以便记住它

       ③标记顶点，以便不会再访问它

（2）访问规则：

        a.如果可能，访问一个邻接的未访问顶点，标记它，并入栈。

        b.当不能执行a时（没有邻接的未访问顶点），如果栈不为空，就从栈中弹出一个顶点。

        c.如果不能执行规则a和b，就完成了整个搜索过程。

（3）实现：基于以上规则，循环执行，直到栈为空。每次循环各种，它做四件事：

       ①用peek()方法检查栈顶的顶点。

       ②试图找到这个顶点还未访问的邻接点。

       ③如果没有找到，出栈。

       ④如果找到这样的顶点，访问并入栈。</code></pre><p><img src="/images/dfs.jpg" alt="alt"></p>
<p>比如，采用dfs遍历上图，从A点出发，遍历结果（入栈顺序）为：ABCDE。</p>
<h1 id="图的广度优先搜索"><a href="#图的广度优先搜索" class="headerlink" title="图的广度优先搜索"></a>图的广度优先搜索</h1><p> （1）用队列记录下一步的走向。深度优先搜素表现的好像是尽快远离起点似的，相反，广度优先搜索中，算法好像要尽可能靠近起始点。</p>
<pre><code>（2）访问规则：

        a.访问下一个未访问的邻接点（如果存在），这个顶点必须是当前顶点的邻接点，标记它，并入队列。

        b.如果因为已经没有未访问顶点而不能执行规则a，那么从队列头取一个顶点（如果存在），并使其成为当前顶点。

        c.如果因为队列为空而不能执行规则b，则完成了整个搜索过程。

（3）实现：基于以上规则，对下图做bfs遍历，其队列的变化如下表所示：</code></pre><p><img src="/images/bfs.jpg" alt="alt"></p>
<p><img src="/images/bfs1.jpg" alt="alt"><br>   从而，遍历的结果（入队顺序）为ABCDEFGHI。如果采用bfs遍历3中的图，结果为：ABDCE。</p>
<pre><code>（4）特性：广度优先搜索首先找到与起始点相距一条边的所有顶点，然后是与起始点相距两条边的顶点，以此类推。如果要寻找起始顶点到指定顶点的最短距离，那么这个属性非常有用。首先执行BFS，当找到指定顶点时，就可以说这条路径是到这个顶点的最短路径。如果有更短的路径，BFS算法就应该已经找到它了。</code></pre><h1 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h1><p>DFS、BFS的代码实现如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public class Graph &#123;</span><br><span class="line">	private final int MAX_VERTS &#x3D; 20;</span><br><span class="line">	private Vertex vertexList[];&#x2F;&#x2F; 顶点数组</span><br><span class="line">	private int adjMat[][];&#x2F;&#x2F; 邻接矩阵</span><br><span class="line">	private int nVerts;&#x2F;&#x2F; 当前顶点总数</span><br><span class="line">	private StackX theStack;</span><br><span class="line">	private Queue theQueue;</span><br><span class="line"> </span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Graph theGraph &#x3D; new Graph();</span><br><span class="line">		theGraph.addVertex(&#39;A&#39;);</span><br><span class="line">		theGraph.addVertex(&#39;B&#39;);</span><br><span class="line">		theGraph.addVertex(&#39;C&#39;);</span><br><span class="line">		theGraph.addVertex(&#39;D&#39;);</span><br><span class="line">		theGraph.addVertex(&#39;E&#39;);</span><br><span class="line"> </span><br><span class="line">		theGraph.addEdge(0, 1);</span><br><span class="line">		theGraph.addEdge(1, 2);</span><br><span class="line">		theGraph.addEdge(0, 3);</span><br><span class="line">		theGraph.addEdge(3, 4);</span><br><span class="line"> </span><br><span class="line">		System.out.print(&quot;visits:&quot;);</span><br><span class="line">		&#x2F;&#x2F; theGraph.dfs();</span><br><span class="line">		theGraph.bfs();</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public Graph() &#123;&#x2F;&#x2F; 构造图</span><br><span class="line">		vertexList &#x3D; new Vertex[MAX_VERTS];</span><br><span class="line"> </span><br><span class="line">		adjMat &#x3D; new int[MAX_VERTS][MAX_VERTS];</span><br><span class="line">		nVerts &#x3D; 0;</span><br><span class="line">		for (int i &#x3D; 0; i &lt; MAX_VERTS; i++) &#123;</span><br><span class="line">			for (int j &#x3D; 0; j &lt; MAX_VERTS; j++) &#123;</span><br><span class="line">				adjMat[i][j] &#x3D; 0;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		theStack &#x3D; new StackX();</span><br><span class="line">		theQueue &#x3D; new Queue();</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public void addVertex(char lab) &#123;&#x2F;&#x2F; 添加顶点</span><br><span class="line">		vertexList[nVerts++] &#x3D; new Vertex(lab);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public void addEdge(int start, int end) &#123;&#x2F;&#x2F; 添加边</span><br><span class="line">		adjMat[start][end] &#x3D; 1;</span><br><span class="line">		adjMat[end][start] &#x3D; 1;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public void displayVertex(int v) &#123;&#x2F;&#x2F; 打印数组中v位置下的顶点名</span><br><span class="line">		System.out.print(vertexList[v].lable);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public int getAdjUnvisitedVertex(int v) &#123;&#x2F;&#x2F; 获取和v邻接的未访问的顶点</span><br><span class="line">		for (int i &#x3D; 0; i &lt; nVerts; i++) &#123;</span><br><span class="line">			if (adjMat[v][i] &#x3D;&#x3D; 1 &amp;&amp; vertexList[i].wasVisited &#x3D;&#x3D; false) &#123;</span><br><span class="line">				return i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public void dfs() &#123;&#x2F;&#x2F; 深度优先搜索</span><br><span class="line">		vertexList[0].wasVisited &#x3D; true;</span><br><span class="line">		displayVertex(0);</span><br><span class="line">		theStack.push(0);</span><br><span class="line"> </span><br><span class="line">		while (!theStack.isEmpty()) &#123;</span><br><span class="line">			int v &#x3D; getAdjUnvisitedVertex(theStack.peek());</span><br><span class="line">			if (v &#x3D;&#x3D; -1) &#123;</span><br><span class="line">				theStack.pop();</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				vertexList[v].wasVisited &#x3D; true;</span><br><span class="line">				displayVertex(v);</span><br><span class="line">				theStack.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"> </span><br><span class="line">		for (int i &#x3D; 0; i &lt; nVerts; i++) &#123;</span><br><span class="line">			vertexList[i].wasVisited &#x3D; false;&#x2F;&#x2F; 重置，防止后边再次使用dfs</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public void bfs() &#123;&#x2F;&#x2F; 广度优先搜索</span><br><span class="line">		vertexList[0].wasVisited &#x3D; true;</span><br><span class="line">		displayVertex(0);</span><br><span class="line">		theQueue.insert(0);</span><br><span class="line">		int v2;</span><br><span class="line"> </span><br><span class="line">		while (!theQueue.isEmpty()) &#123;</span><br><span class="line">			int v1 &#x3D; theQueue.remove();</span><br><span class="line"> </span><br><span class="line">			while ((v2 &#x3D; getAdjUnvisitedVertex(v1)) !&#x3D; -1) &#123;</span><br><span class="line">				vertexList[v2].wasVisited &#x3D; true;</span><br><span class="line">				displayVertex(v2);</span><br><span class="line">				theQueue.insert(v2);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"> </span><br><span class="line">		for (int j &#x3D; 0; j &lt; nVerts; j++) &#123;</span><br><span class="line">			vertexList[j].wasVisited &#x3D; false;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class StackX &#123;&#x2F;&#x2F; 自定义栈</span><br><span class="line">	private final int SIZE &#x3D; 20;</span><br><span class="line">	private int[] st;</span><br><span class="line">	private int top;</span><br><span class="line"> </span><br><span class="line">	public StackX() &#123;</span><br><span class="line">		st &#x3D; new int[SIZE];</span><br><span class="line">		top &#x3D; -1;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public void push(int j) &#123;</span><br><span class="line">		st[++top] &#x3D; j;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public int pop() &#123;</span><br><span class="line">		if (top &#x3D;&#x3D; 0) &#123;</span><br><span class="line">			return -1;</span><br><span class="line">		&#125;</span><br><span class="line">		return st[--top];</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public int peek() &#123;</span><br><span class="line">		return st[top];</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public boolean isEmpty() &#123;</span><br><span class="line">		return (top &#x3D;&#x3D; -1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Queue &#123;</span><br><span class="line">	private final int SIZE &#x3D; 20;</span><br><span class="line">	private int[] queArray;</span><br><span class="line">	private int front;</span><br><span class="line">	private int rear;</span><br><span class="line"> </span><br><span class="line">	public Queue() &#123;</span><br><span class="line">		queArray &#x3D; new int[SIZE];</span><br><span class="line">		front &#x3D; 0;</span><br><span class="line">		rear &#x3D; -1;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public void insert(int j) &#123;&#x2F;&#x2F; 入队</span><br><span class="line">		if (rear &#x3D;&#x3D; SIZE - 1) &#123;</span><br><span class="line">			rear &#x3D; -1;</span><br><span class="line">		&#125;</span><br><span class="line">		queArray[++rear] &#x3D; j;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public int remove() &#123;&#x2F;&#x2F; 出队</span><br><span class="line">		if (!isEmpty()) &#123;</span><br><span class="line">			return queArray[front++];</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			return -1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public boolean isEmpty() &#123;</span><br><span class="line">		return (rear + 1 &#x3D;&#x3D; front);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Vertex &#123;</span><br><span class="line">	public char lable;&#x2F;&#x2F; 名字</span><br><span class="line">	public boolean wasVisited;</span><br><span class="line"> </span><br><span class="line">	public Vertex(char lab) &#123;</span><br><span class="line">		lable &#x3D; lab;</span><br><span class="line">		wasVisited &#x3D; false;</span><br><span class="line">	&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<p>visits:ABDCE</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>java集合之HashMap源码分析</title>
    <url>/Java/java%E9%9B%86%E5%90%88%E4%B9%8BHashMap/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HashMap 作为一种非常非常常用的数据结构，几乎每天都要见面，今天就安排他一下!</p>
<a id="more"></a>
<h1 id="HashMap存储的实现"><a href="#HashMap存储的实现" class="headerlink" title="HashMap存储的实现"></a>HashMap存储的实现</h1><p>当我们新new一个HashMap，并将多个key-value放入HashMap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String , String&gt; map &#x3D; new HashMap&lt;String , String&gt;();</span><br><span class="line">map.put(&quot;王思聪&quot; , &quot;有钱&quot;);</span><br><span class="line">map.put(&quot;姚明&quot; , &quot;个子高&quot;);   </span><br><span class="line">map.put(&quot;SZ&quot; , &quot;很帅&quot;);</span><br></pre></td></tr></table></figure>
<p>HashMap 采用一种所谓的“Hash 算法”来决定每个元素的存储位置。</p>
<p>当程序执行 map.put(“王思聪” , “有钱”); 时，系统将调用”王思聪”的 hashCode() 方法得到其 hashCode 值——每个 Java 对象都有 hashCode() 方法，都可通过该方法获得它的 hashCode 值。得到这个对象的 hashCode 值之后，系统会根据该 hashCode 值来决定该元素的存储位置。</p>
<p>我们可以看 HashMap 类的 put(K key , V value) 方法的源代码(在 JDK 安装目录下可以找到一个 src.zip 压缩文件，该文件里包含了 Java 基础类库的所有源文件。注释为我手动标注…)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public V put(K key, V value)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 为 null，调用 putForNullKey 方法进行处理  </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return putForNullKey(value);   </span><br><span class="line"> &#x2F;&#x2F; 根据 key 的 keyCode 计算 Hash 值  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 搜索指定 hash 值在对应 table 中的索引  </span><br><span class="line">     int i &#x3D; indexFor(hash, table.length);  </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next)   </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 找到指定 key 与需要放入的 key 相等（hash 值相同  </span><br><span class="line">     &#x2F;&#x2F; 通过 equals 比较放回 true）  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">     &#123;   </span><br><span class="line">         V oldValue &#x3D; e.value;   </span><br><span class="line">         e.value &#x3D; value;   </span><br><span class="line">         e.recordAccess(this);   </span><br><span class="line">         return oldValue;   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;   </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry   </span><br><span class="line"> modCount++;   </span><br><span class="line"> &#x2F;&#x2F; 将 key、value 添加到 i 索引处  </span><br><span class="line"> addEntry(hash, key, value, i);   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面程序中用到了一个重要的内部接口：Map.Entry，每个 Map.Entry 其实就是一个 key-value 对。从上面程序中可以看出：当系统决定存储 HashMap 中的 key-value 对时，仅仅只是根据 key 来计算并决定每个 Entry 的存储位置。我们完全可以把 Map 集合中的 value 当成 key 的附属，当系统决定了 key 的存储位置之后，value 随之保存在那里即可。</p>
<h1 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h1><p>在上面的源代码中提供了一个根据hashcode()返回值计算hash码的方法，继续查看其源码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int hash(int h)   </span><br><span class="line">&#123;   </span><br><span class="line">    h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);   </span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到hashcode()方法为一个仅与参数自身有关的方法，对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用 hash(int h) 方法所计算得到的 Hash 码值总是相同的。接下来程序会调用 indexFor(int h, int length) 方法来计算该对象应该保存在 table 数组的哪个索引处。indexFor(int h, int length) 方法的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int indexFor(int h, int length)   </span><br><span class="line">&#123;   </span><br><span class="line">    return h &amp; (length-1);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法非常巧妙，它总是通过 h &amp;(table.length -1) 来得到该对象的保存位置——而 HashMap 底层数组的长度总是 2 的 n 次方，这一点可参看后面关于 HashMap 构造器的介绍。</p>
<p>当 length 总是 2 的倍数时，h &amp; (length-1) 将是一个非常巧妙的设计：假设 h=5,length=16, 那么 h &amp; length - 1 将得到 5；如果 h=6,length=16, 那么 h &amp; length - 1 将得到 6 ……如果 h=15,length=16, 那么 h &amp; length - 1 将得到 15；但是当 h=16 时 , length=16 时，那么 h &amp; length - 1 将得到 0 了；当 h=17 时 , length=16 时，那么 h &amp; length - 1 将得到 1 了……这样保证计算得到的索引值总是位于 table 数组的索引之内。</p>
<p>根据上面 put 方法的源代码可以看出，当程序试图将一个 key-value 对放入 HashMap 中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但 key 不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部——具体说明继续看 addEntry() 方法的说明。</p>
<p>当向 HashMap 中添加 key-value 对，由其 key 的 hashCode() 返回值决定该 key-value 对（就是 Entry 对象）的存储位置。当两个 Entry 对象的 key 的 hashCode() 返回值相同时，将由 key 通过 eqauls() 比较值决定是采用覆盖行为（返回 true），还是产生 Entry 链（返回 false）。</p>
<p>上面程序中还调用了 addEntry(hash, key, value, i); 代码，其中 addEntry 是 HashMap 提供的一个包访问权限的方法，该方法仅用于添加一个 key-value 对。下面是该方法的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex)   </span><br><span class="line">&#123;   </span><br><span class="line">    &#x2F;&#x2F; 获取指定 bucketIndex 索引处的 Entry   </span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; table[bucketIndex];     &#x2F;&#x2F; </span><br><span class="line">    &#x2F;&#x2F; 将新创建的 Entry 放入 bucketIndex 索引处，并让新的 Entry 指向原来的 Entry   </span><br><span class="line">    table[bucketIndex] &#x3D; new Entry&lt;K,V&gt;(hash, key, value, e);   </span><br><span class="line">    &#x2F;&#x2F; 如果 Map 中的 key-value 对的数量超过了极限  </span><br><span class="line">    if (size++ &gt;&#x3D; threshold)   </span><br><span class="line">        &#x2F;&#x2F; 把 table 对象的长度扩充到 2 倍。  </span><br><span class="line">        resize(2 * table.length);    &#x2F;&#x2F; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面方法的代码很简单，但其中包含了一个非常优雅的设计：系统总是将新添加的 Entry 对象放入 table 数组的 bucketIndex 索引处——如果 bucketIndex 索引处已经有了一个 Entry 对象，那新添加的 Entry 对象指向原有的 Entry 对象（产生一个 Entry 链），如果 bucketIndex 索引处没有 Entry 对象，也就是上面程序①号代码的 e 变量是 null，也就是新放入的 Entry 对象指向 null，也就是没有产生 Entry 链。</p>
<p>上面程序中还有这样两个变量：</p>
<pre><code>* size：该变量保存了该 HashMap 中所包含的 key-value 对的数量。
* threshold：该变量包含了 HashMap 能容纳的 key-value 对的极限，它的值等于 HashMap 的容量乘以负载因子（load factor）。</code></pre><p>可以看出，当 size++ &gt;= threshold 时，HashMap 会自动调用 resize 方法扩充 HashMap 的容量。每扩充一次，HashMap 的容量就增大一倍。</p>
<h1 id="HashMap中的构造器"><a href="#HashMap中的构造器" class="headerlink" title="HashMap中的构造器"></a>HashMap中的构造器</h1><p>之前程序中的table实际上就是一个普通数组，，每个数组都有一个固定的长度，这个数组的长度就是 HashMap 的容量。HashMap 包含如下几个构造器：</p>
<pre><code>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。
HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。
HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</code></pre><p>当创建一个 HashMap 时，系统会自动创建一个 table 数组来保存 HashMap 中的 Entry，下面是 HashMap 中一个构造器的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line"> public HashMap(int initialCapacity, float loadFactor)   </span><br><span class="line"> &#123;   </span><br><span class="line">     &#x2F;&#x2F; 初始容量不能为负数  </span><br><span class="line">     if (initialCapacity &lt; 0)   </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">        &quot;Illegal initial capacity: &quot; +   </span><br><span class="line">             initialCapacity);   </span><br><span class="line">     &#x2F;&#x2F; 如果初始容量大于最大容量，让出示容量  </span><br><span class="line">     if (initialCapacity &gt; MAXIMUM_CAPACITY)   </span><br><span class="line">         initialCapacity &#x3D; MAXIMUM_CAPACITY;   </span><br><span class="line">     &#x2F;&#x2F; 负载因子必须大于 0 的数值  </span><br><span class="line">     if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor)) &#x2F;&#x2F;标记一 </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">         loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 计算出大于 initialCapacity 的最小的 2 的 n 次方值。  </span><br><span class="line">     int capacity &#x3D; 1;   </span><br><span class="line">     while (capacity &lt; initialCapacity)   </span><br><span class="line">         capacity &lt;&lt;&#x3D; 1;   </span><br><span class="line">     this.loadFactor &#x3D; loadFactor;   </span><br><span class="line">     &#x2F;&#x2F; 设置容量极限等于容量 * 负载因子  </span><br><span class="line">     threshold &#x3D; (int)(capacity * loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 初始化 table 数组  </span><br><span class="line">     table &#x3D; new Entry[capacity];            &#x2F;&#x2F;  </span><br><span class="line">     init();   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中标记一的代码包含了一个简洁的代码实现：找出大于 initialCapacity 的、最小的 2 的 n 次方值，并将其作为 HashMap 的实际容量（由 capacity 变量保存）。例如给定 initialCapacity 为 10，那么该 HashMap 的实际容量就是 16。<br>程序①号代码处可以看到：table 的实质就是一个数组，一个长度为 capacity 的数组。</p>
<p>对于 HashMap 及其子类而言，它们采用 Hash 算法来决定集合中元素的存储位置。当系统开始初始化 HashMap 时，系统会创建一个长度为 capacity 的 Entry 数组，这个数组里可以存储元素的位置被称为“桶（bucket）”，每个 bucket 都有其指定索引，系统可以根据其索引快速访问该 bucket 里存储的元素。</p>
<p>无论何时，HashMap 的每个“桶”只存储一个元素（也就是一个 Entry），由于 Entry 对象可以包含一个引用变量（就是 Entry 构造器的的最后一个参数）用于指向下一个 Entry，因此可能出现的情况是：HashMap 的 bucket 中只有一个 Entry，但这个 Entry 指向另一个 Entry ——这就形成了一个 Entry 链。如图所示(图片来源于网络)：</p>
<p><img src="/images/haspmap.jpg" alt="alt"></p>
<p>当 HashMap 的每个 bucket 里存储的 Entry 只是单个 Entry ——也就是没有通过指针产生 Entry 链时，此时的 HashMap 具有最好的性能：当程序通过 key 取出对应 value 时，系统只要先计算出该 key 的 hashCode() 返回值，在根据该 hashCode 返回值找出该 key 在 table 数组中的索引，然后取出该索引处的 Entry，最后返回该 key 对应的 value 即可。看 HashMap 类的 get(K key) 方法代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line">public V get(Object key)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 是 null，调用 getForNullKey 取出对应的 value   </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return getForNullKey();   </span><br><span class="line"> &#x2F;&#x2F; 根据该 key 的 hashCode 值计算它的 hash 码  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 直接取出 table 数组中指定索引处的值，  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[indexFor(hash, table.length)];   </span><br><span class="line">     e !&#x3D; null;   </span><br><span class="line">     &#x2F;&#x2F; 搜索该 Entry 链的下一个 Entr   </span><br><span class="line">     e &#x3D; e.next)         &#x2F;&#x2F; ①  </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 如果该 Entry 的 key 与被搜索 key 相同  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">         return e.value;   </span><br><span class="line"> &#125;   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面代码中可以看出，如果 HashMap 的每个 bucket 里只有一个 Entry 时，HashMap 可以根据索引、快速地取出该 bucket 里的 Entry；在发生“Hash 冲突”的情况下，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素。</p>
<p>归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 Hash 算法来决定其存储位置；当需要取出一个 Entry 时，也会根据 Hash 算法找到其存储位置，直接取出该 Entry。由此可见：HashMap 之所以能快速存、取它所包含的 Entry，完全类似于现实生活中母亲从小教我们的：不同的东西要放在不同的位置，需要时才能快速找到它。</p>
<p>当创建 HashMap 时，有一个默认的负载因子（load factor），其默认值为 0.75，这是时间和空间成本上一种折衷：增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</p>
<p>掌握了上面知识之后，我们可以在创建 HashMap 时根据实际需要适当地调整 load factor 的值；如果程序比较关心空间开销、内存比较紧张，可以适当地增加负载因子；如果程序比较关心时间开销，内存比较宽裕则可以适当的减少负载因子。通常情况下，程序员无需改变负载因子的值。</p>
<p>如果开始就知道 HashMap 会保存多个 key-value 对，可以在创建时就使用较大的初始化容量，如果 HashMap 中 Entry 的数量一直不会超过极限容量（capacity * load factor），HashMap 就无需调用 resize() 方法重新分配 table 数组，从而保证较好的性能。当然，开始就将初始容量设置太高可能会浪费空间（系统需要创建一个长度为 capacity 的 Entry 数组），因此创建 HashMap 时初始化容量设置也需要重视起来。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在jdk1.8中对HashMap进行了优化，之后会结合红黑树在一起说，留个待续…</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅实现属性的动态注入</title>
    <url>/Java/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%AE%9E%E7%8E%B0%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8A%A8%E6%80%81%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是在实际开发中遇到的一个问题。从数据库查询返回的 List&lt; Map&lt; String, Object&gt;&gt; 的集合。并且返回的列名是中文的，项目也没有使用mybatis 直接使用的jdbcTemplate. 并且字段还超级多，这样将数据转换的时候如果一个一个的注入就会让代码臭长臭长的，所以才有了动态注入。<br>我这里我整个思路都贴出来。</p>
<a id="more"></a>
<h1 id="实例类Entry"><a href="#实例类Entry" class="headerlink" title="实例类Entry"></a>实例类Entry</h1><p>我们先建一个entry类。用于对象存储。<br>我这里 创建一个BaseDateBean 的类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Setter</span><br><span class="line">@Getter</span><br><span class="line">public class BaseDateBean &#123;</span><br><span class="line"></span><br><span class="line">    private String  attribute1;</span><br><span class="line">    private String  attribute2;</span><br><span class="line">    private String  attribute3;</span><br><span class="line">    private String  attribute4;</span><br><span class="line">    private String  attribute5;</span><br><span class="line">    private String  attribute6;</span><br><span class="line">    private String  attribute7;</span><br><span class="line">    private String  attribute8;</span><br><span class="line">    private String  attribute9;</span><br><span class="line">    private String  attribute10;</span><br><span class="line">    private String  attribute11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例就不列很多了，比如有100个，所以如果一个一个的set注入就很low了。</p>
<h1 id="创建map映射"><a href="#创建map映射" class="headerlink" title="创建map映射"></a>创建map映射</h1><p>在创建好实体类后，还得创建一个静态的map 集合，将数据库的列名和我们实体类的属性名做一个一一对应。这里创建的这个map 集合是我个人愚见。没有想到更好的办法就先这样处理的。<br>我们创建一个BaseDataMap类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public  class BaseDataMap&#123;</span><br><span class="line">    private BaseDataMap()&#123;&#125;</span><br><span class="line">    public static final Map&lt;String,String&gt; cnEnMap&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">    static&#123;</span><br><span class="line">        cnEnMap.put(&quot;属性1&quot;,&quot;attribute1&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性2&quot;,&quot;attribute2&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性3&quot;,&quot;attribute3&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性4&quot;,&quot;attribute4&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性5&quot;,&quot;attribute5&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性6&quot;,&quot;attribute6&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性7&quot;,&quot;attribute7&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性8&quot;,&quot;attribute8&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性9&quot;,&quot;attribute9&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性10&quot;,&quot;attribute10&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性11&quot;,&quot;attribute11&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到就是一个动态的map。</p>
<h1 id="映射类"><a href="#映射类" class="headerlink" title="映射类"></a>映射类</h1><p>接下来就是核心代码了。我们创建一个ReflectHelper类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class ReflectHelper &#123;</span><br><span class="line"></span><br><span class="line">    private Class cls;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 传过来的对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Object obj;</span><br><span class="line">    private Hashtable&lt;String, Method&gt; getMethods &#x3D; null;</span><br><span class="line">    private Hashtable&lt;String, Method&gt; setMethods &#x3D; null;</span><br><span class="line">    public ReflectHelper(Object o) &#123;</span><br><span class="line">        obj &#x3D; o;</span><br><span class="line">        initMethods();</span><br><span class="line">    &#125;</span><br><span class="line">    public void initMethods() &#123;</span><br><span class="line">        getMethods &#x3D; new Hashtable&lt;&gt;();</span><br><span class="line">        setMethods &#x3D; new Hashtable&lt;&gt;();</span><br><span class="line">        cls &#x3D; obj.getClass();</span><br><span class="line">        Method[] methods &#x3D; cls.getMethods();</span><br><span class="line">        &#x2F;&#x2F; 定义正则表达式，从方法中过滤出getter &#x2F; setter 函数.</span><br><span class="line">        String gs &#x3D; &quot;get(\\w )&quot;;</span><br><span class="line">        Pattern getM &#x3D; Pattern.compile(gs);</span><br><span class="line">        String ss &#x3D; &quot;set(\\w )&quot;;</span><br><span class="line">        Pattern setM &#x3D; Pattern.compile(ss);</span><br><span class="line">        &#x2F;&#x2F; 把方法中的&quot;set&quot; 或者 &quot;get&quot; 去掉,$1匹配第一个</span><br><span class="line">        String rapl &#x3D; &quot;$1&quot;;</span><br><span class="line">        String param;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; methods.length;   i) &#123;</span><br><span class="line">            Method m &#x3D; methods[i];</span><br><span class="line">            String methodName &#x3D; m.getName();</span><br><span class="line">            if (Pattern.matches(gs, methodName)) &#123;</span><br><span class="line">                param &#x3D; getM.matcher(methodName).replaceAll(rapl).toLowerCase();</span><br><span class="line">                getMethods.put(param, m);</span><br><span class="line">            &#125; else if (Pattern.matches(ss, methodName)) &#123;</span><br><span class="line">                param &#x3D; setM.matcher(methodName).replaceAll(rapl).toLowerCase();</span><br><span class="line">                setMethods.put(param, m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean setMethodValue(String property,Object object) &#123;</span><br><span class="line">        Method m &#x3D; setMethods.get(property.toLowerCase());</span><br><span class="line">        if (m !&#x3D; null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F; 调用目标类的setter函数</span><br><span class="line">                m.invoke(obj, object);</span><br><span class="line">                return true;</span><br><span class="line">            &#125; catch (Exception ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码可以看到其实也就两个方法setMethodValue 和initMethods 。<br>initMethods 方法是在实例化 ReflectHelper 这个类的时候执行的，主要的工作就是找到我们需要动态注入实例类的get 和set 方法。而setMethodValue 方法就是给这个属性赋值的。</p>
<h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><p> 现在准备工作做好了，怎么使用呢?<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private List&lt;BaseDateBean&gt; getBaseDateBean(List&lt;Map&lt;String, Object&gt;&gt; mapList)&#123;</span><br><span class="line">       List&lt;BaseDateBean&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">       if(mapList&#x3D;&#x3D;null||mapList.isEmpty())&#123;</span><br><span class="line">           return list;</span><br><span class="line">       &#125;</span><br><span class="line">       BaseDateBean baseDateBean;</span><br><span class="line">       for(Map&lt;String, Object&gt; map:mapList)&#123;</span><br><span class="line">           baseDateBean&#x3D;new BaseDateBean();</span><br><span class="line">           for(Map.Entry&lt;String, Object&gt; entry : map.entrySet())&#123;</span><br><span class="line">               String mapKey &#x3D; entry.getKey();</span><br><span class="line">               log.info(mapKey);</span><br><span class="line">               ReflectHelper reflectHelper &#x3D; new ReflectHelper(baseDateBean);</span><br><span class="line">               log.info(BaseDataMap.cnEnMap.get(mapKey));</span><br><span class="line">               String value&#x3D;entry.getValue()&#x3D;&#x3D;null?ConstantPool.SEPARATORNULL:entry.getValue().toString();</span><br><span class="line">               log.info(value);</span><br><span class="line">               if(entry.getValue()!&#x3D;null)&#123;</span><br><span class="line">                   reflectHelper.setMethodValue(BaseDataMap.cnEnMap.get(mapKey),String.valueOf(entry.getValue()));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           list.add(baseDateBean);</span><br><span class="line">       &#125;</span><br><span class="line">       return list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br> 遍历list 集合中的map，动态的将属性值注入到实体类中。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>动态注入</tag>
        <tag>映射</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 优雅的实现CORS跨域</title>
    <url>/springBoot/Spring%20Boot%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0CORS%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  一般的情况下，项目都是前后端分离的，所以这里就涉及到一个很严重的问题，当协议，端口，IP三者有其一不同就会产生跨域，所以需要做跨域支持。</p>
<a id="more"></a>
<h1 id="测试跨域的文件"><a href="#测试跨域的文件" class="headerlink" title="测试跨域的文件"></a>测试跨域的文件</h1><p>在这之前，我们先写一个测试接口是否跨域的html ,这样下面的测试比较方便。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;link type&#x3D;&quot;test&#x2F;css&quot; href&#x3D;&quot;css&#x2F;style.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">	&lt;input type&#x3D;&quot;text&quot; style&#x3D;&quot;width:600px;height:30px;font-size:14px;&quot; id&#x3D;&quot;urlText&quot; value&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">	&lt;br&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;button&quot; style&#x3D;&quot;margin: 10px&quot;;  id&#x3D;&quot;cors&quot; value&#x3D;&quot;判断是否可访问&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;http:&#x2F;&#x2F;localhost:9090&#x2F;test&#x2F;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.2.1.min.js&quot;&gt;&lt;&#x2F;script&gt;  </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">	$(function()&#123;</span><br><span class="line">	$(&quot;#cors&quot;).click(</span><br><span class="line">		function()&#123;</span><br><span class="line">			var url2 &#x3D; $(&quot;#urlText&quot;).val();</span><br><span class="line">			$.post(&#123;</span><br><span class="line">				contentType:&#39;application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8&#39;,</span><br><span class="line">				url:url2,</span><br><span class="line">				data: &quot;&#x2F;rAIeKeSBG1LV XoIq82&#x2F;O&quot;,</span><br><span class="line">				success:function(data)&#123;</span><br><span class="line">					alert(&quot;success&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>接下来我们来学习下在springboot 项目中怎么实现支持跨域。</p>
<h1 id="CrossOrigin-注解"><a href="#CrossOrigin-注解" class="headerlink" title="@CrossOrigin 注解"></a>@CrossOrigin 注解</h1><p>这种方法是springboot 自带的，使用比较简单，在需要支持的跨域的接口上加上这个注解就可以了。<br>比如在我们项目的demo 接口加上注解.就表示这个接口支持跨域，其中origins = “*”<br>表示所有的地址都可以访问这个接口，也可以写具体的地址，表示只有这个地址访问才能访问到接口。<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@CrossOrigin(origin &#x3D;&quot;*&quot;)</span><br><span class="line">public class Demo &#123;</span><br><span class="line">	@RequestMapping(&quot;&#x2F;&quot;)</span><br><span class="line">	public String Demo() &#123;</span><br><span class="line">		return &quot;Hello Word&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们也来测试一下，启动项目后，在浏览器上运行我们的测试的html文件。<br>发现localhost:9090/test/ 是可以访问的。<br>说明跨域是支持的。大伙可以先将注解去掉测试一下，然后加上注解测试一下进行对比。</p>
<p>这种方式虽然很简单，但是缺点也不小，需要跨域的接口都需要加上这个注解，这对前后端分离的项目是不友好的，所以这种方式基本上用的很少。</p>
<h1 id="重写WebMvcConfigurer的addCorsMappings-方法。"><a href="#重写WebMvcConfigurer的addCorsMappings-方法。" class="headerlink" title="重写WebMvcConfigurer的addCorsMappings 方法。"></a>重写WebMvcConfigurer的addCorsMappings 方法。</h1><p>这种方法在实际项目中也用的比较多，是一种全局支持跨域的方法。<br>我们创建一个CorsConfig 类。内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class CorsConfig implements WebMvcConfigurer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">        registry.addMapping(&quot;&#x2F;**&quot;)&#x2F;&#x2F;项目中的所有接口都支持跨域</span><br><span class="line">                .allowedOrigins(&quot;*&quot;)&#x2F;&#x2F;所有地址都可以访问，也可以配置具体地址</span><br><span class="line">                .allowCredentials(true)</span><br><span class="line">                .allowedMethods(&quot;*&quot;)&#x2F;&#x2F;&quot;GET&quot;, &quot;HEAD&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;</span><br><span class="line">                .maxAge(3600);&#x2F;&#x2F; 跨域允许时间</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加上@Configuration 表示是配置类，在项目启动的时候会加载。实现WebMvcConfigurer 接口并重写addCorsMappings 方法。代码比较简单，也有注释。</p>
<p>测试的话，大家可以自行测试，我测试都是通过的和上面一样测试就可以，这里就不占篇幅了。</p>
<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>除了上面方法外，也可以使用过滤器。我们创建一个CorsFilter 类，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class CorsFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletResponse response &#x3D; (HttpServletResponse)servletResponse;</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, PUT, GET, OPTIONS, DELETE&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept, client_id, uuid, Authorization&quot;);</span><br><span class="line">        response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;);</span><br><span class="line">        response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中设置response.setHeader(“Access-Control-Allow-Origin”, “*”);表示所有的地址都可以访问项目接口。</p>
<h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p>接下来我们再介绍一个常用的功能，前后端分离，在访问接口的时候，有的 公司往往会增加一下专属的后缀名才能访问。实际上没有什么太大的作用，能稍微增加一下系统的安全性。这里我就简单是实现一下。真个都非常简单。<br>一样的是实现WebMvcConfigurer 接口，重写configurePathMatch你方法和增加一个dispatcherServlet。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void configurePathMatch(PathMatchConfigurer configurer) &#123;</span><br><span class="line">        configurer.setUseRegisteredSuffixPatternMatch(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean servletRegistrationBean(DispatcherServlet dispatcherServlet) &#123;</span><br><span class="line">        ServletRegistrationBean bean &#x3D; new ServletRegistrationBean(dispatcherServlet);</span><br><span class="line">        bean.addUrlMappings(&quot;*.zlf&quot;);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这个功能实现，就只用这个多代码，configurePathMatch方法中设置的configurer.setUseRegisteredSuffixPatternMatch(true); 主要是将index 和index.* 都指向我们controller 中配置的@RequestMapping(“/index”)。</p>
<p>下面的servletRegistrationBean 方法主要是增加自定义拦截器，只有后缀为“.zlf”的接口才放行。</p>
<p>这样两步就简单的实现了接口增加自定义的后缀名了。</p>
<p>到此为止，springboot 支持跨域的方式就差不多了，当然还有其他的实现方式没有研究。这些希望对大家有帮助。</p>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/hello-world/</url>
    <content><![CDATA[<p>谈谈建站之路…</p>
<a id="more"></a>
<h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><h3 id="坐井观天"><a href="#坐井观天" class="headerlink" title="坐井观天"></a>坐井观天</h3><p>&ensp;&ensp;转眼毕业已经半年有余，主要的工作状态就好像每天都很忙又感觉不知道自己在忙什么。眨眼一晃半年多就这么过来了，这段时间认识了很多很多人，经历了很多很多事，就像做梦一样。刚好这次赶上疫情(看到的你记得戴口罩，保护好自己)，在家的时间比较多，总结了一下:emm,生活真的好难，好像还是代码简单，那我想尽力把简单的事做好,不然连做自己都做不到，更没什么资格去承担什么责任。</p>
<h3 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h3><p>&ensp;&ensp;主要写一些自己在工作以及在平时学习上的总结，这段儿会陆续整理之前想总结一直没下手的,今天先简单整理了两个…不定时更新</p>
<h3 id="总得有个标题吧"><a href="#总得有个标题吧" class="headerlink" title="总得有个标题吧"></a>总得有个标题吧</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello word , hello world！</span><br></pre></td></tr></table></figure>

<p><img src="/images/hello-word.jpg" alt="alt"></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
</search>
