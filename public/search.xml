<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>EXCEL中VLOOKUP的应用</title>
      <link href="/%E5%B7%A5%E5%85%B7/EXCEL%20VLOOKUP%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/%E5%B7%A5%E5%85%B7/EXCEL%20VLOOKUP%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HashMap 作为一种非常非常常用的数据结构，几乎每天都要见面，今天就安排他一下!</p><a id="more"></a><h1 id="HashMap存储的实现"><a href="#HashMap存储的实现" class="headerlink" title="HashMap存储的实现"></a>HashMap存储的实现</h1><p>当我们新new一个HashMap，并将多个key-value放入HashMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String , String&gt; map &#x3D; new HashMap&lt;String , String&gt;();</span><br><span class="line">map.put(&quot;王思聪&quot; , &quot;有钱&quot;);</span><br><span class="line">map.put(&quot;姚明&quot; , &quot;个子高&quot;);   </span><br><span class="line">map.put(&quot;SZ&quot; , &quot;很帅&quot;);</span><br></pre></td></tr></table></figure><p>HashMap 采用一种所谓的“Hash 算法”来决定每个元素的存储位置。</p><p>当程序执行 map.put(“王思聪” , “有钱”); 时，系统将调用”王思聪”的 hashCode() 方法得到其 hashCode 值——每个 Java 对象都有 hashCode() 方法，都可通过该方法获得它的 hashCode 值。得到这个对象的 hashCode 值之后，系统会根据该 hashCode 值来决定该元素的存储位置。</p><p>我们可以看 HashMap 类的 put(K key , V value) 方法的源代码(在 JDK 安装目录下可以找到一个 src.zip 压缩文件，该文件里包含了 Java 基础类库的所有源文件。注释为我手动标注…)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 为 null，调用 putForNullKey 方法进行处理  </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return putForNullKey(value);   </span><br><span class="line"> &#x2F;&#x2F; 根据 key 的 keyCode 计算 Hash 值  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 搜索指定 hash 值在对应 table 中的索引  </span><br><span class="line">     int i &#x3D; indexFor(hash, table.length);  </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next)   </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 找到指定 key 与需要放入的 key 相等（hash 值相同  </span><br><span class="line">     &#x2F;&#x2F; 通过 equals 比较放回 true）  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">     &#123;   </span><br><span class="line">         V oldValue &#x3D; e.value;   </span><br><span class="line">         e.value &#x3D; value;   </span><br><span class="line">         e.recordAccess(this);   </span><br><span class="line">         return oldValue;   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;   </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry   </span><br><span class="line"> modCount++;   </span><br><span class="line"> &#x2F;&#x2F; 将 key、value 添加到 i 索引处  </span><br><span class="line"> addEntry(hash, key, value, i);   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面程序中用到了一个重要的内部接口：Map.Entry，每个 Map.Entry 其实就是一个 key-value 对。从上面程序中可以看出：当系统决定存储 HashMap 中的 key-value 对时，仅仅只是根据 key 来计算并决定每个 Entry 的存储位置。我们完全可以把 Map 集合中的 value 当成 key 的附属，当系统决定了 key 的存储位置之后，value 随之保存在那里即可。</p><h1 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h1><p>在上面的源代码中提供了一个根据hashcode()返回值计算hash码的方法，继续查看其源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static int hash(int h)   </span><br><span class="line">&#123;   </span><br><span class="line">    h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);   </span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到hashcode()方法为一个仅与参数自身有关的方法，对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用 hash(int h) 方法所计算得到的 Hash 码值总是相同的。接下来程序会调用 indexFor(int h, int length) 方法来计算该对象应该保存在 table 数组的哪个索引处。indexFor(int h, int length) 方法的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length)   </span><br><span class="line">&#123;   </span><br><span class="line">    return h &amp; (length-1);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法非常巧妙，它总是通过 h &amp;(table.length -1) 来得到该对象的保存位置——而 HashMap 底层数组的长度总是 2 的 n 次方，这一点可参看后面关于 HashMap 构造器的介绍。</p><p>当 length 总是 2 的倍数时，h &amp; (length-1) 将是一个非常巧妙的设计：假设 h=5,length=16, 那么 h &amp; length - 1 将得到 5；如果 h=6,length=16, 那么 h &amp; length - 1 将得到 6 ……如果 h=15,length=16, 那么 h &amp; length - 1 将得到 15；但是当 h=16 时 , length=16 时，那么 h &amp; length - 1 将得到 0 了；当 h=17 时 , length=16 时，那么 h &amp; length - 1 将得到 1 了……这样保证计算得到的索引值总是位于 table 数组的索引之内。</p><p>根据上面 put 方法的源代码可以看出，当程序试图将一个 key-value 对放入 HashMap 中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但 key 不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部——具体说明继续看 addEntry() 方法的说明。</p><p>当向 HashMap 中添加 key-value 对，由其 key 的 hashCode() 返回值决定该 key-value 对（就是 Entry 对象）的存储位置。当两个 Entry 对象的 key 的 hashCode() 返回值相同时，将由 key 通过 eqauls() 比较值决定是采用覆盖行为（返回 true），还是产生 Entry 链（返回 false）。</p><p>上面程序中还调用了 addEntry(hash, key, value, i); 代码，其中 addEntry 是 HashMap 提供的一个包访问权限的方法，该方法仅用于添加一个 key-value 对。下面是该方法的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex)   </span><br><span class="line">&#123;   </span><br><span class="line">    &#x2F;&#x2F; 获取指定 bucketIndex 索引处的 Entry   </span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; table[bucketIndex];     &#x2F;&#x2F; </span><br><span class="line">    &#x2F;&#x2F; 将新创建的 Entry 放入 bucketIndex 索引处，并让新的 Entry 指向原来的 Entry   </span><br><span class="line">    table[bucketIndex] &#x3D; new Entry&lt;K,V&gt;(hash, key, value, e);   </span><br><span class="line">    &#x2F;&#x2F; 如果 Map 中的 key-value 对的数量超过了极限  </span><br><span class="line">    if (size++ &gt;&#x3D; threshold)   </span><br><span class="line">        &#x2F;&#x2F; 把 table 对象的长度扩充到 2 倍。  </span><br><span class="line">        resize(2 * table.length);    &#x2F;&#x2F; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法的代码很简单，但其中包含了一个非常优雅的设计：系统总是将新添加的 Entry 对象放入 table 数组的 bucketIndex 索引处——如果 bucketIndex 索引处已经有了一个 Entry 对象，那新添加的 Entry 对象指向原有的 Entry 对象（产生一个 Entry 链），如果 bucketIndex 索引处没有 Entry 对象，也就是上面程序①号代码的 e 变量是 null，也就是新放入的 Entry 对象指向 null，也就是没有产生 Entry 链。</p><p>上面程序中还有这样两个变量：</p><pre><code>* size：该变量保存了该 HashMap 中所包含的 key-value 对的数量。* threshold：该变量包含了 HashMap 能容纳的 key-value 对的极限，它的值等于 HashMap 的容量乘以负载因子（load factor）。</code></pre><p>可以看出，当 size++ &gt;= threshold 时，HashMap 会自动调用 resize 方法扩充 HashMap 的容量。每扩充一次，HashMap 的容量就增大一倍。</p><h1 id="HashMap中的构造器"><a href="#HashMap中的构造器" class="headerlink" title="HashMap中的构造器"></a>HashMap中的构造器</h1><p>之前程序中的table实际上就是一个普通数组，，每个数组都有一个固定的长度，这个数组的长度就是 HashMap 的容量。HashMap 包含如下几个构造器：</p><pre><code>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</code></pre><p>当创建一个 HashMap 时，系统会自动创建一个 table 数组来保存 HashMap 中的 Entry，下面是 HashMap 中一个构造器的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line"> public HashMap(int initialCapacity, float loadFactor)   </span><br><span class="line"> &#123;   </span><br><span class="line">     &#x2F;&#x2F; 初始容量不能为负数  </span><br><span class="line">     if (initialCapacity &lt; 0)   </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">        &quot;Illegal initial capacity: &quot; +   </span><br><span class="line">             initialCapacity);   </span><br><span class="line">     &#x2F;&#x2F; 如果初始容量大于最大容量，让出示容量  </span><br><span class="line">     if (initialCapacity &gt; MAXIMUM_CAPACITY)   </span><br><span class="line">         initialCapacity &#x3D; MAXIMUM_CAPACITY;   </span><br><span class="line">     &#x2F;&#x2F; 负载因子必须大于 0 的数值  </span><br><span class="line">     if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor)) &#x2F;&#x2F;标记一 </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">         loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 计算出大于 initialCapacity 的最小的 2 的 n 次方值。  </span><br><span class="line">     int capacity &#x3D; 1;   </span><br><span class="line">     while (capacity &lt; initialCapacity)   </span><br><span class="line">         capacity &lt;&lt;&#x3D; 1;   </span><br><span class="line">     this.loadFactor &#x3D; loadFactor;   </span><br><span class="line">     &#x2F;&#x2F; 设置容量极限等于容量 * 负载因子  </span><br><span class="line">     threshold &#x3D; (int)(capacity * loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 初始化 table 数组  </span><br><span class="line">     table &#x3D; new Entry[capacity];            &#x2F;&#x2F;  </span><br><span class="line">     init();   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面代码中标记一的代码包含了一个简洁的代码实现：找出大于 initialCapacity 的、最小的 2 的 n 次方值，并将其作为 HashMap 的实际容量（由 capacity 变量保存）。例如给定 initialCapacity 为 10，那么该 HashMap 的实际容量就是 16。<br>程序①号代码处可以看到：table 的实质就是一个数组，一个长度为 capacity 的数组。</p><p>对于 HashMap 及其子类而言，它们采用 Hash 算法来决定集合中元素的存储位置。当系统开始初始化 HashMap 时，系统会创建一个长度为 capacity 的 Entry 数组，这个数组里可以存储元素的位置被称为“桶（bucket）”，每个 bucket 都有其指定索引，系统可以根据其索引快速访问该 bucket 里存储的元素。</p><p>无论何时，HashMap 的每个“桶”只存储一个元素（也就是一个 Entry），由于 Entry 对象可以包含一个引用变量（就是 Entry 构造器的的最后一个参数）用于指向下一个 Entry，因此可能出现的情况是：HashMap 的 bucket 中只有一个 Entry，但这个 Entry 指向另一个 Entry ——这就形成了一个 Entry 链。如图所示(图片来源于网络)：</p><p><img src="/images/haspmap.jpg" alt="alt"></p><p>当 HashMap 的每个 bucket 里存储的 Entry 只是单个 Entry ——也就是没有通过指针产生 Entry 链时，此时的 HashMap 具有最好的性能：当程序通过 key 取出对应 value 时，系统只要先计算出该 key 的 hashCode() 返回值，在根据该 hashCode 返回值找出该 key 在 table 数组中的索引，然后取出该索引处的 Entry，最后返回该 key 对应的 value 即可。看 HashMap 类的 get(K key) 方法代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line">public V get(Object key)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 是 null，调用 getForNullKey 取出对应的 value   </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return getForNullKey();   </span><br><span class="line"> &#x2F;&#x2F; 根据该 key 的 hashCode 值计算它的 hash 码  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 直接取出 table 数组中指定索引处的值，  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[indexFor(hash, table.length)];   </span><br><span class="line">     e !&#x3D; null;   </span><br><span class="line">     &#x2F;&#x2F; 搜索该 Entry 链的下一个 Entr   </span><br><span class="line">     e &#x3D; e.next)         &#x2F;&#x2F; ①  </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 如果该 Entry 的 key 与被搜索 key 相同  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">         return e.value;   </span><br><span class="line"> &#125;   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出，如果 HashMap 的每个 bucket 里只有一个 Entry 时，HashMap 可以根据索引、快速地取出该 bucket 里的 Entry；在发生“Hash 冲突”的情况下，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素。</p><p>归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 Hash 算法来决定其存储位置；当需要取出一个 Entry 时，也会根据 Hash 算法找到其存储位置，直接取出该 Entry。由此可见：HashMap 之所以能快速存、取它所包含的 Entry，完全类似于现实生活中母亲从小教我们的：不同的东西要放在不同的位置，需要时才能快速找到它。</p><p>当创建 HashMap 时，有一个默认的负载因子（load factor），其默认值为 0.75，这是时间和空间成本上一种折衷：增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</p><p>掌握了上面知识之后，我们可以在创建 HashMap 时根据实际需要适当地调整 load factor 的值；如果程序比较关心空间开销、内存比较紧张，可以适当地增加负载因子；如果程序比较关心时间开销，内存比较宽裕则可以适当的减少负载因子。通常情况下，程序员无需改变负载因子的值。</p><p>如果开始就知道 HashMap 会保存多个 key-value 对，可以在创建时就使用较大的初始化容量，如果 HashMap 中 Entry 的数量一直不会超过极限容量（capacity * load factor），HashMap 就无需调用 resize() 方法重新分配 table 数组，从而保证较好的性能。当然，开始就将初始容量设置太高可能会浪费空间（系统需要创建一个长度为 capacity 的 Entry 数组），因此创建 HashMap 时初始化容量设置也需要重视起来。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在jdk1.8中对HashMap进行了优化，之后会结合红黑树在一起说，留个待续…</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring：基于注解的Spring MVC（下）</title>
      <link href="/%E6%A1%86%E6%9E%B6/Spring%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Spring%20MVC%EF%BC%88%E4%B8%8B%EF%BC%89%20/"/>
      <url>/%E6%A1%86%E6%9E%B6/Spring%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Spring%20MVC%EF%BC%88%E4%B8%8B%EF%BC%89%20/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HashMap 作为一种非常非常常用的数据结构，几乎每天都要见面，今天就安排他一下!</p><a id="more"></a><h1 id="HashMap存储的实现"><a href="#HashMap存储的实现" class="headerlink" title="HashMap存储的实现"></a>HashMap存储的实现</h1><p>当我们新new一个HashMap，并将多个key-value放入HashMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String , String&gt; map &#x3D; new HashMap&lt;String , String&gt;();</span><br><span class="line">map.put(&quot;王思聪&quot; , &quot;有钱&quot;);</span><br><span class="line">map.put(&quot;姚明&quot; , &quot;个子高&quot;);   </span><br><span class="line">map.put(&quot;SZ&quot; , &quot;很帅&quot;);</span><br></pre></td></tr></table></figure><p>HashMap 采用一种所谓的“Hash 算法”来决定每个元素的存储位置。</p><p>当程序执行 map.put(“王思聪” , “有钱”); 时，系统将调用”王思聪”的 hashCode() 方法得到其 hashCode 值——每个 Java 对象都有 hashCode() 方法，都可通过该方法获得它的 hashCode 值。得到这个对象的 hashCode 值之后，系统会根据该 hashCode 值来决定该元素的存储位置。</p><p>我们可以看 HashMap 类的 put(K key , V value) 方法的源代码(在 JDK 安装目录下可以找到一个 src.zip 压缩文件，该文件里包含了 Java 基础类库的所有源文件。注释为我手动标注…)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 为 null，调用 putForNullKey 方法进行处理  </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return putForNullKey(value);   </span><br><span class="line"> &#x2F;&#x2F; 根据 key 的 keyCode 计算 Hash 值  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 搜索指定 hash 值在对应 table 中的索引  </span><br><span class="line">     int i &#x3D; indexFor(hash, table.length);  </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next)   </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 找到指定 key 与需要放入的 key 相等（hash 值相同  </span><br><span class="line">     &#x2F;&#x2F; 通过 equals 比较放回 true）  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">     &#123;   </span><br><span class="line">         V oldValue &#x3D; e.value;   </span><br><span class="line">         e.value &#x3D; value;   </span><br><span class="line">         e.recordAccess(this);   </span><br><span class="line">         return oldValue;   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;   </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry   </span><br><span class="line"> modCount++;   </span><br><span class="line"> &#x2F;&#x2F; 将 key、value 添加到 i 索引处  </span><br><span class="line"> addEntry(hash, key, value, i);   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面程序中用到了一个重要的内部接口：Map.Entry，每个 Map.Entry 其实就是一个 key-value 对。从上面程序中可以看出：当系统决定存储 HashMap 中的 key-value 对时，仅仅只是根据 key 来计算并决定每个 Entry 的存储位置。我们完全可以把 Map 集合中的 value 当成 key 的附属，当系统决定了 key 的存储位置之后，value 随之保存在那里即可。</p><h1 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h1><p>在上面的源代码中提供了一个根据hashcode()返回值计算hash码的方法，继续查看其源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static int hash(int h)   </span><br><span class="line">&#123;   </span><br><span class="line">    h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);   </span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到hashcode()方法为一个仅与参数自身有关的方法，对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用 hash(int h) 方法所计算得到的 Hash 码值总是相同的。接下来程序会调用 indexFor(int h, int length) 方法来计算该对象应该保存在 table 数组的哪个索引处。indexFor(int h, int length) 方法的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length)   </span><br><span class="line">&#123;   </span><br><span class="line">    return h &amp; (length-1);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法非常巧妙，它总是通过 h &amp;(table.length -1) 来得到该对象的保存位置——而 HashMap 底层数组的长度总是 2 的 n 次方，这一点可参看后面关于 HashMap 构造器的介绍。</p><p>当 length 总是 2 的倍数时，h &amp; (length-1) 将是一个非常巧妙的设计：假设 h=5,length=16, 那么 h &amp; length - 1 将得到 5；如果 h=6,length=16, 那么 h &amp; length - 1 将得到 6 ……如果 h=15,length=16, 那么 h &amp; length - 1 将得到 15；但是当 h=16 时 , length=16 时，那么 h &amp; length - 1 将得到 0 了；当 h=17 时 , length=16 时，那么 h &amp; length - 1 将得到 1 了……这样保证计算得到的索引值总是位于 table 数组的索引之内。</p><p>根据上面 put 方法的源代码可以看出，当程序试图将一个 key-value 对放入 HashMap 中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但 key 不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部——具体说明继续看 addEntry() 方法的说明。</p><p>当向 HashMap 中添加 key-value 对，由其 key 的 hashCode() 返回值决定该 key-value 对（就是 Entry 对象）的存储位置。当两个 Entry 对象的 key 的 hashCode() 返回值相同时，将由 key 通过 eqauls() 比较值决定是采用覆盖行为（返回 true），还是产生 Entry 链（返回 false）。</p><p>上面程序中还调用了 addEntry(hash, key, value, i); 代码，其中 addEntry 是 HashMap 提供的一个包访问权限的方法，该方法仅用于添加一个 key-value 对。下面是该方法的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex)   </span><br><span class="line">&#123;   </span><br><span class="line">    &#x2F;&#x2F; 获取指定 bucketIndex 索引处的 Entry   </span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; table[bucketIndex];     &#x2F;&#x2F; </span><br><span class="line">    &#x2F;&#x2F; 将新创建的 Entry 放入 bucketIndex 索引处，并让新的 Entry 指向原来的 Entry   </span><br><span class="line">    table[bucketIndex] &#x3D; new Entry&lt;K,V&gt;(hash, key, value, e);   </span><br><span class="line">    &#x2F;&#x2F; 如果 Map 中的 key-value 对的数量超过了极限  </span><br><span class="line">    if (size++ &gt;&#x3D; threshold)   </span><br><span class="line">        &#x2F;&#x2F; 把 table 对象的长度扩充到 2 倍。  </span><br><span class="line">        resize(2 * table.length);    &#x2F;&#x2F; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法的代码很简单，但其中包含了一个非常优雅的设计：系统总是将新添加的 Entry 对象放入 table 数组的 bucketIndex 索引处——如果 bucketIndex 索引处已经有了一个 Entry 对象，那新添加的 Entry 对象指向原有的 Entry 对象（产生一个 Entry 链），如果 bucketIndex 索引处没有 Entry 对象，也就是上面程序①号代码的 e 变量是 null，也就是新放入的 Entry 对象指向 null，也就是没有产生 Entry 链。</p><p>上面程序中还有这样两个变量：</p><pre><code>* size：该变量保存了该 HashMap 中所包含的 key-value 对的数量。* threshold：该变量包含了 HashMap 能容纳的 key-value 对的极限，它的值等于 HashMap 的容量乘以负载因子（load factor）。</code></pre><p>可以看出，当 size++ &gt;= threshold 时，HashMap 会自动调用 resize 方法扩充 HashMap 的容量。每扩充一次，HashMap 的容量就增大一倍。</p><h1 id="HashMap中的构造器"><a href="#HashMap中的构造器" class="headerlink" title="HashMap中的构造器"></a>HashMap中的构造器</h1><p>之前程序中的table实际上就是一个普通数组，，每个数组都有一个固定的长度，这个数组的长度就是 HashMap 的容量。HashMap 包含如下几个构造器：</p><pre><code>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</code></pre><p>当创建一个 HashMap 时，系统会自动创建一个 table 数组来保存 HashMap 中的 Entry，下面是 HashMap 中一个构造器的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line"> public HashMap(int initialCapacity, float loadFactor)   </span><br><span class="line"> &#123;   </span><br><span class="line">     &#x2F;&#x2F; 初始容量不能为负数  </span><br><span class="line">     if (initialCapacity &lt; 0)   </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">        &quot;Illegal initial capacity: &quot; +   </span><br><span class="line">             initialCapacity);   </span><br><span class="line">     &#x2F;&#x2F; 如果初始容量大于最大容量，让出示容量  </span><br><span class="line">     if (initialCapacity &gt; MAXIMUM_CAPACITY)   </span><br><span class="line">         initialCapacity &#x3D; MAXIMUM_CAPACITY;   </span><br><span class="line">     &#x2F;&#x2F; 负载因子必须大于 0 的数值  </span><br><span class="line">     if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor)) &#x2F;&#x2F;标记一 </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">         loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 计算出大于 initialCapacity 的最小的 2 的 n 次方值。  </span><br><span class="line">     int capacity &#x3D; 1;   </span><br><span class="line">     while (capacity &lt; initialCapacity)   </span><br><span class="line">         capacity &lt;&lt;&#x3D; 1;   </span><br><span class="line">     this.loadFactor &#x3D; loadFactor;   </span><br><span class="line">     &#x2F;&#x2F; 设置容量极限等于容量 * 负载因子  </span><br><span class="line">     threshold &#x3D; (int)(capacity * loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 初始化 table 数组  </span><br><span class="line">     table &#x3D; new Entry[capacity];            &#x2F;&#x2F;  </span><br><span class="line">     init();   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面代码中标记一的代码包含了一个简洁的代码实现：找出大于 initialCapacity 的、最小的 2 的 n 次方值，并将其作为 HashMap 的实际容量（由 capacity 变量保存）。例如给定 initialCapacity 为 10，那么该 HashMap 的实际容量就是 16。<br>程序①号代码处可以看到：table 的实质就是一个数组，一个长度为 capacity 的数组。</p><p>对于 HashMap 及其子类而言，它们采用 Hash 算法来决定集合中元素的存储位置。当系统开始初始化 HashMap 时，系统会创建一个长度为 capacity 的 Entry 数组，这个数组里可以存储元素的位置被称为“桶（bucket）”，每个 bucket 都有其指定索引，系统可以根据其索引快速访问该 bucket 里存储的元素。</p><p>无论何时，HashMap 的每个“桶”只存储一个元素（也就是一个 Entry），由于 Entry 对象可以包含一个引用变量（就是 Entry 构造器的的最后一个参数）用于指向下一个 Entry，因此可能出现的情况是：HashMap 的 bucket 中只有一个 Entry，但这个 Entry 指向另一个 Entry ——这就形成了一个 Entry 链。如图所示(图片来源于网络)：</p><p><img src="/images/haspmap.jpg" alt="alt"></p><p>当 HashMap 的每个 bucket 里存储的 Entry 只是单个 Entry ——也就是没有通过指针产生 Entry 链时，此时的 HashMap 具有最好的性能：当程序通过 key 取出对应 value 时，系统只要先计算出该 key 的 hashCode() 返回值，在根据该 hashCode 返回值找出该 key 在 table 数组中的索引，然后取出该索引处的 Entry，最后返回该 key 对应的 value 即可。看 HashMap 类的 get(K key) 方法代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line">public V get(Object key)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 是 null，调用 getForNullKey 取出对应的 value   </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return getForNullKey();   </span><br><span class="line"> &#x2F;&#x2F; 根据该 key 的 hashCode 值计算它的 hash 码  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 直接取出 table 数组中指定索引处的值，  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[indexFor(hash, table.length)];   </span><br><span class="line">     e !&#x3D; null;   </span><br><span class="line">     &#x2F;&#x2F; 搜索该 Entry 链的下一个 Entr   </span><br><span class="line">     e &#x3D; e.next)         &#x2F;&#x2F; ①  </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 如果该 Entry 的 key 与被搜索 key 相同  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">         return e.value;   </span><br><span class="line"> &#125;   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出，如果 HashMap 的每个 bucket 里只有一个 Entry 时，HashMap 可以根据索引、快速地取出该 bucket 里的 Entry；在发生“Hash 冲突”的情况下，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素。</p><p>归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 Hash 算法来决定其存储位置；当需要取出一个 Entry 时，也会根据 Hash 算法找到其存储位置，直接取出该 Entry。由此可见：HashMap 之所以能快速存、取它所包含的 Entry，完全类似于现实生活中母亲从小教我们的：不同的东西要放在不同的位置，需要时才能快速找到它。</p><p>当创建 HashMap 时，有一个默认的负载因子（load factor），其默认值为 0.75，这是时间和空间成本上一种折衷：增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</p><p>掌握了上面知识之后，我们可以在创建 HashMap 时根据实际需要适当地调整 load factor 的值；如果程序比较关心空间开销、内存比较紧张，可以适当地增加负载因子；如果程序比较关心时间开销，内存比较宽裕则可以适当的减少负载因子。通常情况下，程序员无需改变负载因子的值。</p><p>如果开始就知道 HashMap 会保存多个 key-value 对，可以在创建时就使用较大的初始化容量，如果 HashMap 中 Entry 的数量一直不会超过极限容量（capacity * load factor），HashMap 就无需调用 resize() 方法重新分配 table 数组，从而保证较好的性能。当然，开始就将初始容量设置太高可能会浪费空间（系统需要创建一个长度为 capacity 的 Entry 数组），因此创建 HashMap 时初始化容量设置也需要重视起来。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在jdk1.8中对HashMap进行了优化，之后会结合红黑树在一起说，留个待续…</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring：基于注解的Spring MVC（上）</title>
      <link href="/%E6%A1%86%E6%9E%B6/Spring%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Spring%20MVC%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/%E6%A1%86%E6%9E%B6/Spring%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Spring%20MVC%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HashMap 作为一种非常非常常用的数据结构，几乎每天都要见面，今天就安排他一下!</p><a id="more"></a><h1 id="HashMap存储的实现"><a href="#HashMap存储的实现" class="headerlink" title="HashMap存储的实现"></a>HashMap存储的实现</h1><p>当我们新new一个HashMap，并将多个key-value放入HashMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String , String&gt; map &#x3D; new HashMap&lt;String , String&gt;();</span><br><span class="line">map.put(&quot;王思聪&quot; , &quot;有钱&quot;);</span><br><span class="line">map.put(&quot;姚明&quot; , &quot;个子高&quot;);   </span><br><span class="line">map.put(&quot;SZ&quot; , &quot;很帅&quot;);</span><br></pre></td></tr></table></figure><p>HashMap 采用一种所谓的“Hash 算法”来决定每个元素的存储位置。</p><p>当程序执行 map.put(“王思聪” , “有钱”); 时，系统将调用”王思聪”的 hashCode() 方法得到其 hashCode 值——每个 Java 对象都有 hashCode() 方法，都可通过该方法获得它的 hashCode 值。得到这个对象的 hashCode 值之后，系统会根据该 hashCode 值来决定该元素的存储位置。</p><p>我们可以看 HashMap 类的 put(K key , V value) 方法的源代码(在 JDK 安装目录下可以找到一个 src.zip 压缩文件，该文件里包含了 Java 基础类库的所有源文件。注释为我手动标注…)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 为 null，调用 putForNullKey 方法进行处理  </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return putForNullKey(value);   </span><br><span class="line"> &#x2F;&#x2F; 根据 key 的 keyCode 计算 Hash 值  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 搜索指定 hash 值在对应 table 中的索引  </span><br><span class="line">     int i &#x3D; indexFor(hash, table.length);  </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next)   </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 找到指定 key 与需要放入的 key 相等（hash 值相同  </span><br><span class="line">     &#x2F;&#x2F; 通过 equals 比较放回 true）  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">     &#123;   </span><br><span class="line">         V oldValue &#x3D; e.value;   </span><br><span class="line">         e.value &#x3D; value;   </span><br><span class="line">         e.recordAccess(this);   </span><br><span class="line">         return oldValue;   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;   </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry   </span><br><span class="line"> modCount++;   </span><br><span class="line"> &#x2F;&#x2F; 将 key、value 添加到 i 索引处  </span><br><span class="line"> addEntry(hash, key, value, i);   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面程序中用到了一个重要的内部接口：Map.Entry，每个 Map.Entry 其实就是一个 key-value 对。从上面程序中可以看出：当系统决定存储 HashMap 中的 key-value 对时，仅仅只是根据 key 来计算并决定每个 Entry 的存储位置。我们完全可以把 Map 集合中的 value 当成 key 的附属，当系统决定了 key 的存储位置之后，value 随之保存在那里即可。</p><h1 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h1><p>在上面的源代码中提供了一个根据hashcode()返回值计算hash码的方法，继续查看其源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static int hash(int h)   </span><br><span class="line">&#123;   </span><br><span class="line">    h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);   </span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到hashcode()方法为一个仅与参数自身有关的方法，对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用 hash(int h) 方法所计算得到的 Hash 码值总是相同的。接下来程序会调用 indexFor(int h, int length) 方法来计算该对象应该保存在 table 数组的哪个索引处。indexFor(int h, int length) 方法的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length)   </span><br><span class="line">&#123;   </span><br><span class="line">    return h &amp; (length-1);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法非常巧妙，它总是通过 h &amp;(table.length -1) 来得到该对象的保存位置——而 HashMap 底层数组的长度总是 2 的 n 次方，这一点可参看后面关于 HashMap 构造器的介绍。</p><p>当 length 总是 2 的倍数时，h &amp; (length-1) 将是一个非常巧妙的设计：假设 h=5,length=16, 那么 h &amp; length - 1 将得到 5；如果 h=6,length=16, 那么 h &amp; length - 1 将得到 6 ……如果 h=15,length=16, 那么 h &amp; length - 1 将得到 15；但是当 h=16 时 , length=16 时，那么 h &amp; length - 1 将得到 0 了；当 h=17 时 , length=16 时，那么 h &amp; length - 1 将得到 1 了……这样保证计算得到的索引值总是位于 table 数组的索引之内。</p><p>根据上面 put 方法的源代码可以看出，当程序试图将一个 key-value 对放入 HashMap 中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但 key 不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部——具体说明继续看 addEntry() 方法的说明。</p><p>当向 HashMap 中添加 key-value 对，由其 key 的 hashCode() 返回值决定该 key-value 对（就是 Entry 对象）的存储位置。当两个 Entry 对象的 key 的 hashCode() 返回值相同时，将由 key 通过 eqauls() 比较值决定是采用覆盖行为（返回 true），还是产生 Entry 链（返回 false）。</p><p>上面程序中还调用了 addEntry(hash, key, value, i); 代码，其中 addEntry 是 HashMap 提供的一个包访问权限的方法，该方法仅用于添加一个 key-value 对。下面是该方法的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex)   </span><br><span class="line">&#123;   </span><br><span class="line">    &#x2F;&#x2F; 获取指定 bucketIndex 索引处的 Entry   </span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; table[bucketIndex];     &#x2F;&#x2F; </span><br><span class="line">    &#x2F;&#x2F; 将新创建的 Entry 放入 bucketIndex 索引处，并让新的 Entry 指向原来的 Entry   </span><br><span class="line">    table[bucketIndex] &#x3D; new Entry&lt;K,V&gt;(hash, key, value, e);   </span><br><span class="line">    &#x2F;&#x2F; 如果 Map 中的 key-value 对的数量超过了极限  </span><br><span class="line">    if (size++ &gt;&#x3D; threshold)   </span><br><span class="line">        &#x2F;&#x2F; 把 table 对象的长度扩充到 2 倍。  </span><br><span class="line">        resize(2 * table.length);    &#x2F;&#x2F; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法的代码很简单，但其中包含了一个非常优雅的设计：系统总是将新添加的 Entry 对象放入 table 数组的 bucketIndex 索引处——如果 bucketIndex 索引处已经有了一个 Entry 对象，那新添加的 Entry 对象指向原有的 Entry 对象（产生一个 Entry 链），如果 bucketIndex 索引处没有 Entry 对象，也就是上面程序①号代码的 e 变量是 null，也就是新放入的 Entry 对象指向 null，也就是没有产生 Entry 链。</p><p>上面程序中还有这样两个变量：</p><pre><code>* size：该变量保存了该 HashMap 中所包含的 key-value 对的数量。* threshold：该变量包含了 HashMap 能容纳的 key-value 对的极限，它的值等于 HashMap 的容量乘以负载因子（load factor）。</code></pre><p>可以看出，当 size++ &gt;= threshold 时，HashMap 会自动调用 resize 方法扩充 HashMap 的容量。每扩充一次，HashMap 的容量就增大一倍。</p><h1 id="HashMap中的构造器"><a href="#HashMap中的构造器" class="headerlink" title="HashMap中的构造器"></a>HashMap中的构造器</h1><p>之前程序中的table实际上就是一个普通数组，，每个数组都有一个固定的长度，这个数组的长度就是 HashMap 的容量。HashMap 包含如下几个构造器：</p><pre><code>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</code></pre><p>当创建一个 HashMap 时，系统会自动创建一个 table 数组来保存 HashMap 中的 Entry，下面是 HashMap 中一个构造器的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line"> public HashMap(int initialCapacity, float loadFactor)   </span><br><span class="line"> &#123;   </span><br><span class="line">     &#x2F;&#x2F; 初始容量不能为负数  </span><br><span class="line">     if (initialCapacity &lt; 0)   </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">        &quot;Illegal initial capacity: &quot; +   </span><br><span class="line">             initialCapacity);   </span><br><span class="line">     &#x2F;&#x2F; 如果初始容量大于最大容量，让出示容量  </span><br><span class="line">     if (initialCapacity &gt; MAXIMUM_CAPACITY)   </span><br><span class="line">         initialCapacity &#x3D; MAXIMUM_CAPACITY;   </span><br><span class="line">     &#x2F;&#x2F; 负载因子必须大于 0 的数值  </span><br><span class="line">     if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor)) &#x2F;&#x2F;标记一 </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">         loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 计算出大于 initialCapacity 的最小的 2 的 n 次方值。  </span><br><span class="line">     int capacity &#x3D; 1;   </span><br><span class="line">     while (capacity &lt; initialCapacity)   </span><br><span class="line">         capacity &lt;&lt;&#x3D; 1;   </span><br><span class="line">     this.loadFactor &#x3D; loadFactor;   </span><br><span class="line">     &#x2F;&#x2F; 设置容量极限等于容量 * 负载因子  </span><br><span class="line">     threshold &#x3D; (int)(capacity * loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 初始化 table 数组  </span><br><span class="line">     table &#x3D; new Entry[capacity];            &#x2F;&#x2F;  </span><br><span class="line">     init();   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面代码中标记一的代码包含了一个简洁的代码实现：找出大于 initialCapacity 的、最小的 2 的 n 次方值，并将其作为 HashMap 的实际容量（由 capacity 变量保存）。例如给定 initialCapacity 为 10，那么该 HashMap 的实际容量就是 16。<br>程序①号代码处可以看到：table 的实质就是一个数组，一个长度为 capacity 的数组。</p><p>对于 HashMap 及其子类而言，它们采用 Hash 算法来决定集合中元素的存储位置。当系统开始初始化 HashMap 时，系统会创建一个长度为 capacity 的 Entry 数组，这个数组里可以存储元素的位置被称为“桶（bucket）”，每个 bucket 都有其指定索引，系统可以根据其索引快速访问该 bucket 里存储的元素。</p><p>无论何时，HashMap 的每个“桶”只存储一个元素（也就是一个 Entry），由于 Entry 对象可以包含一个引用变量（就是 Entry 构造器的的最后一个参数）用于指向下一个 Entry，因此可能出现的情况是：HashMap 的 bucket 中只有一个 Entry，但这个 Entry 指向另一个 Entry ——这就形成了一个 Entry 链。如图所示(图片来源于网络)：</p><p><img src="/images/haspmap.jpg" alt="alt"></p><p>当 HashMap 的每个 bucket 里存储的 Entry 只是单个 Entry ——也就是没有通过指针产生 Entry 链时，此时的 HashMap 具有最好的性能：当程序通过 key 取出对应 value 时，系统只要先计算出该 key 的 hashCode() 返回值，在根据该 hashCode 返回值找出该 key 在 table 数组中的索引，然后取出该索引处的 Entry，最后返回该 key 对应的 value 即可。看 HashMap 类的 get(K key) 方法代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line">public V get(Object key)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 是 null，调用 getForNullKey 取出对应的 value   </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return getForNullKey();   </span><br><span class="line"> &#x2F;&#x2F; 根据该 key 的 hashCode 值计算它的 hash 码  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 直接取出 table 数组中指定索引处的值，  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[indexFor(hash, table.length)];   </span><br><span class="line">     e !&#x3D; null;   </span><br><span class="line">     &#x2F;&#x2F; 搜索该 Entry 链的下一个 Entr   </span><br><span class="line">     e &#x3D; e.next)         &#x2F;&#x2F; ①  </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 如果该 Entry 的 key 与被搜索 key 相同  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">         return e.value;   </span><br><span class="line"> &#125;   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出，如果 HashMap 的每个 bucket 里只有一个 Entry 时，HashMap 可以根据索引、快速地取出该 bucket 里的 Entry；在发生“Hash 冲突”的情况下，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素。</p><p>归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 Hash 算法来决定其存储位置；当需要取出一个 Entry 时，也会根据 Hash 算法找到其存储位置，直接取出该 Entry。由此可见：HashMap 之所以能快速存、取它所包含的 Entry，完全类似于现实生活中母亲从小教我们的：不同的东西要放在不同的位置，需要时才能快速找到它。</p><p>当创建 HashMap 时，有一个默认的负载因子（load factor），其默认值为 0.75，这是时间和空间成本上一种折衷：增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</p><p>掌握了上面知识之后，我们可以在创建 HashMap 时根据实际需要适当地调整 load factor 的值；如果程序比较关心空间开销、内存比较紧张，可以适当地增加负载因子；如果程序比较关心时间开销，内存比较宽裕则可以适当的减少负载因子。通常情况下，程序员无需改变负载因子的值。</p><p>如果开始就知道 HashMap 会保存多个 key-value 对，可以在创建时就使用较大的初始化容量，如果 HashMap 中 Entry 的数量一直不会超过极限容量（capacity * load factor），HashMap 就无需调用 resize() 方法重新分配 table 数组，从而保证较好的性能。当然，开始就将初始容量设置太高可能会浪费空间（系统需要创建一个长度为 capacity 的 Entry 数组），因此创建 HashMap 时初始化容量设置也需要重视起来。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在jdk1.8中对HashMap进行了优化，之后会结合红黑树在一起说，留个待续…</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架IOC容器和AOP解析</title>
      <link href="/%E6%A1%86%E6%9E%B6/Spring%E6%A1%86%E6%9E%B6IOC%E5%AE%B9%E5%99%A8%E5%92%8CAOP%E8%A7%A3%E6%9E%90/"/>
      <url>/%E6%A1%86%E6%9E%B6/Spring%E6%A1%86%E6%9E%B6IOC%E5%AE%B9%E5%99%A8%E5%92%8CAOP%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HashMap 作为一种非常非常常用的数据结构，几乎每天都要见面，今天就安排他一下!</p><a id="more"></a><h1 id="HashMap存储的实现"><a href="#HashMap存储的实现" class="headerlink" title="HashMap存储的实现"></a>HashMap存储的实现</h1><p>当我们新new一个HashMap，并将多个key-value放入HashMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String , String&gt; map &#x3D; new HashMap&lt;String , String&gt;();</span><br><span class="line">map.put(&quot;王思聪&quot; , &quot;有钱&quot;);</span><br><span class="line">map.put(&quot;姚明&quot; , &quot;个子高&quot;);   </span><br><span class="line">map.put(&quot;SZ&quot; , &quot;很帅&quot;);</span><br></pre></td></tr></table></figure><p>HashMap 采用一种所谓的“Hash 算法”来决定每个元素的存储位置。</p><p>当程序执行 map.put(“王思聪” , “有钱”); 时，系统将调用”王思聪”的 hashCode() 方法得到其 hashCode 值——每个 Java 对象都有 hashCode() 方法，都可通过该方法获得它的 hashCode 值。得到这个对象的 hashCode 值之后，系统会根据该 hashCode 值来决定该元素的存储位置。</p><p>我们可以看 HashMap 类的 put(K key , V value) 方法的源代码(在 JDK 安装目录下可以找到一个 src.zip 压缩文件，该文件里包含了 Java 基础类库的所有源文件。注释为我手动标注…)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 为 null，调用 putForNullKey 方法进行处理  </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return putForNullKey(value);   </span><br><span class="line"> &#x2F;&#x2F; 根据 key 的 keyCode 计算 Hash 值  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 搜索指定 hash 值在对应 table 中的索引  </span><br><span class="line">     int i &#x3D; indexFor(hash, table.length);  </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next)   </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 找到指定 key 与需要放入的 key 相等（hash 值相同  </span><br><span class="line">     &#x2F;&#x2F; 通过 equals 比较放回 true）  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">     &#123;   </span><br><span class="line">         V oldValue &#x3D; e.value;   </span><br><span class="line">         e.value &#x3D; value;   </span><br><span class="line">         e.recordAccess(this);   </span><br><span class="line">         return oldValue;   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;   </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry   </span><br><span class="line"> modCount++;   </span><br><span class="line"> &#x2F;&#x2F; 将 key、value 添加到 i 索引处  </span><br><span class="line"> addEntry(hash, key, value, i);   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面程序中用到了一个重要的内部接口：Map.Entry，每个 Map.Entry 其实就是一个 key-value 对。从上面程序中可以看出：当系统决定存储 HashMap 中的 key-value 对时，仅仅只是根据 key 来计算并决定每个 Entry 的存储位置。我们完全可以把 Map 集合中的 value 当成 key 的附属，当系统决定了 key 的存储位置之后，value 随之保存在那里即可。</p><h1 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h1><p>在上面的源代码中提供了一个根据hashcode()返回值计算hash码的方法，继续查看其源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static int hash(int h)   </span><br><span class="line">&#123;   </span><br><span class="line">    h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);   </span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到hashcode()方法为一个仅与参数自身有关的方法，对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用 hash(int h) 方法所计算得到的 Hash 码值总是相同的。接下来程序会调用 indexFor(int h, int length) 方法来计算该对象应该保存在 table 数组的哪个索引处。indexFor(int h, int length) 方法的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length)   </span><br><span class="line">&#123;   </span><br><span class="line">    return h &amp; (length-1);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法非常巧妙，它总是通过 h &amp;(table.length -1) 来得到该对象的保存位置——而 HashMap 底层数组的长度总是 2 的 n 次方，这一点可参看后面关于 HashMap 构造器的介绍。</p><p>当 length 总是 2 的倍数时，h &amp; (length-1) 将是一个非常巧妙的设计：假设 h=5,length=16, 那么 h &amp; length - 1 将得到 5；如果 h=6,length=16, 那么 h &amp; length - 1 将得到 6 ……如果 h=15,length=16, 那么 h &amp; length - 1 将得到 15；但是当 h=16 时 , length=16 时，那么 h &amp; length - 1 将得到 0 了；当 h=17 时 , length=16 时，那么 h &amp; length - 1 将得到 1 了……这样保证计算得到的索引值总是位于 table 数组的索引之内。</p><p>根据上面 put 方法的源代码可以看出，当程序试图将一个 key-value 对放入 HashMap 中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但 key 不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部——具体说明继续看 addEntry() 方法的说明。</p><p>当向 HashMap 中添加 key-value 对，由其 key 的 hashCode() 返回值决定该 key-value 对（就是 Entry 对象）的存储位置。当两个 Entry 对象的 key 的 hashCode() 返回值相同时，将由 key 通过 eqauls() 比较值决定是采用覆盖行为（返回 true），还是产生 Entry 链（返回 false）。</p><p>上面程序中还调用了 addEntry(hash, key, value, i); 代码，其中 addEntry 是 HashMap 提供的一个包访问权限的方法，该方法仅用于添加一个 key-value 对。下面是该方法的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex)   </span><br><span class="line">&#123;   </span><br><span class="line">    &#x2F;&#x2F; 获取指定 bucketIndex 索引处的 Entry   </span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; table[bucketIndex];     &#x2F;&#x2F; </span><br><span class="line">    &#x2F;&#x2F; 将新创建的 Entry 放入 bucketIndex 索引处，并让新的 Entry 指向原来的 Entry   </span><br><span class="line">    table[bucketIndex] &#x3D; new Entry&lt;K,V&gt;(hash, key, value, e);   </span><br><span class="line">    &#x2F;&#x2F; 如果 Map 中的 key-value 对的数量超过了极限  </span><br><span class="line">    if (size++ &gt;&#x3D; threshold)   </span><br><span class="line">        &#x2F;&#x2F; 把 table 对象的长度扩充到 2 倍。  </span><br><span class="line">        resize(2 * table.length);    &#x2F;&#x2F; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法的代码很简单，但其中包含了一个非常优雅的设计：系统总是将新添加的 Entry 对象放入 table 数组的 bucketIndex 索引处——如果 bucketIndex 索引处已经有了一个 Entry 对象，那新添加的 Entry 对象指向原有的 Entry 对象（产生一个 Entry 链），如果 bucketIndex 索引处没有 Entry 对象，也就是上面程序①号代码的 e 变量是 null，也就是新放入的 Entry 对象指向 null，也就是没有产生 Entry 链。</p><p>上面程序中还有这样两个变量：</p><pre><code>* size：该变量保存了该 HashMap 中所包含的 key-value 对的数量。* threshold：该变量包含了 HashMap 能容纳的 key-value 对的极限，它的值等于 HashMap 的容量乘以负载因子（load factor）。</code></pre><p>可以看出，当 size++ &gt;= threshold 时，HashMap 会自动调用 resize 方法扩充 HashMap 的容量。每扩充一次，HashMap 的容量就增大一倍。</p><h1 id="HashMap中的构造器"><a href="#HashMap中的构造器" class="headerlink" title="HashMap中的构造器"></a>HashMap中的构造器</h1><p>之前程序中的table实际上就是一个普通数组，，每个数组都有一个固定的长度，这个数组的长度就是 HashMap 的容量。HashMap 包含如下几个构造器：</p><pre><code>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</code></pre><p>当创建一个 HashMap 时，系统会自动创建一个 table 数组来保存 HashMap 中的 Entry，下面是 HashMap 中一个构造器的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line"> public HashMap(int initialCapacity, float loadFactor)   </span><br><span class="line"> &#123;   </span><br><span class="line">     &#x2F;&#x2F; 初始容量不能为负数  </span><br><span class="line">     if (initialCapacity &lt; 0)   </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">        &quot;Illegal initial capacity: &quot; +   </span><br><span class="line">             initialCapacity);   </span><br><span class="line">     &#x2F;&#x2F; 如果初始容量大于最大容量，让出示容量  </span><br><span class="line">     if (initialCapacity &gt; MAXIMUM_CAPACITY)   </span><br><span class="line">         initialCapacity &#x3D; MAXIMUM_CAPACITY;   </span><br><span class="line">     &#x2F;&#x2F; 负载因子必须大于 0 的数值  </span><br><span class="line">     if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor)) &#x2F;&#x2F;标记一 </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">         loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 计算出大于 initialCapacity 的最小的 2 的 n 次方值。  </span><br><span class="line">     int capacity &#x3D; 1;   </span><br><span class="line">     while (capacity &lt; initialCapacity)   </span><br><span class="line">         capacity &lt;&lt;&#x3D; 1;   </span><br><span class="line">     this.loadFactor &#x3D; loadFactor;   </span><br><span class="line">     &#x2F;&#x2F; 设置容量极限等于容量 * 负载因子  </span><br><span class="line">     threshold &#x3D; (int)(capacity * loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 初始化 table 数组  </span><br><span class="line">     table &#x3D; new Entry[capacity];            &#x2F;&#x2F;  </span><br><span class="line">     init();   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面代码中标记一的代码包含了一个简洁的代码实现：找出大于 initialCapacity 的、最小的 2 的 n 次方值，并将其作为 HashMap 的实际容量（由 capacity 变量保存）。例如给定 initialCapacity 为 10，那么该 HashMap 的实际容量就是 16。<br>程序①号代码处可以看到：table 的实质就是一个数组，一个长度为 capacity 的数组。</p><p>对于 HashMap 及其子类而言，它们采用 Hash 算法来决定集合中元素的存储位置。当系统开始初始化 HashMap 时，系统会创建一个长度为 capacity 的 Entry 数组，这个数组里可以存储元素的位置被称为“桶（bucket）”，每个 bucket 都有其指定索引，系统可以根据其索引快速访问该 bucket 里存储的元素。</p><p>无论何时，HashMap 的每个“桶”只存储一个元素（也就是一个 Entry），由于 Entry 对象可以包含一个引用变量（就是 Entry 构造器的的最后一个参数）用于指向下一个 Entry，因此可能出现的情况是：HashMap 的 bucket 中只有一个 Entry，但这个 Entry 指向另一个 Entry ——这就形成了一个 Entry 链。如图所示(图片来源于网络)：</p><p><img src="/images/haspmap.jpg" alt="alt"></p><p>当 HashMap 的每个 bucket 里存储的 Entry 只是单个 Entry ——也就是没有通过指针产生 Entry 链时，此时的 HashMap 具有最好的性能：当程序通过 key 取出对应 value 时，系统只要先计算出该 key 的 hashCode() 返回值，在根据该 hashCode 返回值找出该 key 在 table 数组中的索引，然后取出该索引处的 Entry，最后返回该 key 对应的 value 即可。看 HashMap 类的 get(K key) 方法代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line">public V get(Object key)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 是 null，调用 getForNullKey 取出对应的 value   </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return getForNullKey();   </span><br><span class="line"> &#x2F;&#x2F; 根据该 key 的 hashCode 值计算它的 hash 码  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 直接取出 table 数组中指定索引处的值，  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[indexFor(hash, table.length)];   </span><br><span class="line">     e !&#x3D; null;   </span><br><span class="line">     &#x2F;&#x2F; 搜索该 Entry 链的下一个 Entr   </span><br><span class="line">     e &#x3D; e.next)         &#x2F;&#x2F; ①  </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 如果该 Entry 的 key 与被搜索 key 相同  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">         return e.value;   </span><br><span class="line"> &#125;   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出，如果 HashMap 的每个 bucket 里只有一个 Entry 时，HashMap 可以根据索引、快速地取出该 bucket 里的 Entry；在发生“Hash 冲突”的情况下，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素。</p><p>归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 Hash 算法来决定其存储位置；当需要取出一个 Entry 时，也会根据 Hash 算法找到其存储位置，直接取出该 Entry。由此可见：HashMap 之所以能快速存、取它所包含的 Entry，完全类似于现实生活中母亲从小教我们的：不同的东西要放在不同的位置，需要时才能快速找到它。</p><p>当创建 HashMap 时，有一个默认的负载因子（load factor），其默认值为 0.75，这是时间和空间成本上一种折衷：增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</p><p>掌握了上面知识之后，我们可以在创建 HashMap 时根据实际需要适当地调整 load factor 的值；如果程序比较关心空间开销、内存比较紧张，可以适当地增加负载因子；如果程序比较关心时间开销，内存比较宽裕则可以适当的减少负载因子。通常情况下，程序员无需改变负载因子的值。</p><p>如果开始就知道 HashMap 会保存多个 key-value 对，可以在创建时就使用较大的初始化容量，如果 HashMap 中 Entry 的数量一直不会超过极限容量（capacity * load factor），HashMap 就无需调用 resize() 方法重新分配 table 数组，从而保证较好的性能。当然，开始就将初始容量设置太高可能会浪费空间（系统需要创建一个长度为 capacity 的 Entry 数组），因此创建 HashMap 时初始化容量设置也需要重视起来。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在jdk1.8中对HashMap进行了优化，之后会结合红黑树在一起说，留个待续…</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java GC机制（下）</title>
      <link href="/Java/Java%20GC%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/Java/Java%20GC%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HashMap 作为一种非常非常常用的数据结构，几乎每天都要见面，今天就安排他一下!</p><a id="more"></a><h1 id="HashMap存储的实现"><a href="#HashMap存储的实现" class="headerlink" title="HashMap存储的实现"></a>HashMap存储的实现</h1><p>当我们新new一个HashMap，并将多个key-value放入HashMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String , String&gt; map &#x3D; new HashMap&lt;String , String&gt;();</span><br><span class="line">map.put(&quot;王思聪&quot; , &quot;有钱&quot;);</span><br><span class="line">map.put(&quot;姚明&quot; , &quot;个子高&quot;);   </span><br><span class="line">map.put(&quot;SZ&quot; , &quot;很帅&quot;);</span><br></pre></td></tr></table></figure><p>HashMap 采用一种所谓的“Hash 算法”来决定每个元素的存储位置。</p><p>当程序执行 map.put(“王思聪” , “有钱”); 时，系统将调用”王思聪”的 hashCode() 方法得到其 hashCode 值——每个 Java 对象都有 hashCode() 方法，都可通过该方法获得它的 hashCode 值。得到这个对象的 hashCode 值之后，系统会根据该 hashCode 值来决定该元素的存储位置。</p><p>我们可以看 HashMap 类的 put(K key , V value) 方法的源代码(在 JDK 安装目录下可以找到一个 src.zip 压缩文件，该文件里包含了 Java 基础类库的所有源文件。注释为我手动标注…)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 为 null，调用 putForNullKey 方法进行处理  </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return putForNullKey(value);   </span><br><span class="line"> &#x2F;&#x2F; 根据 key 的 keyCode 计算 Hash 值  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 搜索指定 hash 值在对应 table 中的索引  </span><br><span class="line">     int i &#x3D; indexFor(hash, table.length);  </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next)   </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 找到指定 key 与需要放入的 key 相等（hash 值相同  </span><br><span class="line">     &#x2F;&#x2F; 通过 equals 比较放回 true）  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">     &#123;   </span><br><span class="line">         V oldValue &#x3D; e.value;   </span><br><span class="line">         e.value &#x3D; value;   </span><br><span class="line">         e.recordAccess(this);   </span><br><span class="line">         return oldValue;   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;   </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry   </span><br><span class="line"> modCount++;   </span><br><span class="line"> &#x2F;&#x2F; 将 key、value 添加到 i 索引处  </span><br><span class="line"> addEntry(hash, key, value, i);   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面程序中用到了一个重要的内部接口：Map.Entry，每个 Map.Entry 其实就是一个 key-value 对。从上面程序中可以看出：当系统决定存储 HashMap 中的 key-value 对时，仅仅只是根据 key 来计算并决定每个 Entry 的存储位置。我们完全可以把 Map 集合中的 value 当成 key 的附属，当系统决定了 key 的存储位置之后，value 随之保存在那里即可。</p><h1 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h1><p>在上面的源代码中提供了一个根据hashcode()返回值计算hash码的方法，继续查看其源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static int hash(int h)   </span><br><span class="line">&#123;   </span><br><span class="line">    h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);   </span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到hashcode()方法为一个仅与参数自身有关的方法，对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用 hash(int h) 方法所计算得到的 Hash 码值总是相同的。接下来程序会调用 indexFor(int h, int length) 方法来计算该对象应该保存在 table 数组的哪个索引处。indexFor(int h, int length) 方法的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length)   </span><br><span class="line">&#123;   </span><br><span class="line">    return h &amp; (length-1);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法非常巧妙，它总是通过 h &amp;(table.length -1) 来得到该对象的保存位置——而 HashMap 底层数组的长度总是 2 的 n 次方，这一点可参看后面关于 HashMap 构造器的介绍。</p><p>当 length 总是 2 的倍数时，h &amp; (length-1) 将是一个非常巧妙的设计：假设 h=5,length=16, 那么 h &amp; length - 1 将得到 5；如果 h=6,length=16, 那么 h &amp; length - 1 将得到 6 ……如果 h=15,length=16, 那么 h &amp; length - 1 将得到 15；但是当 h=16 时 , length=16 时，那么 h &amp; length - 1 将得到 0 了；当 h=17 时 , length=16 时，那么 h &amp; length - 1 将得到 1 了……这样保证计算得到的索引值总是位于 table 数组的索引之内。</p><p>根据上面 put 方法的源代码可以看出，当程序试图将一个 key-value 对放入 HashMap 中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但 key 不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部——具体说明继续看 addEntry() 方法的说明。</p><p>当向 HashMap 中添加 key-value 对，由其 key 的 hashCode() 返回值决定该 key-value 对（就是 Entry 对象）的存储位置。当两个 Entry 对象的 key 的 hashCode() 返回值相同时，将由 key 通过 eqauls() 比较值决定是采用覆盖行为（返回 true），还是产生 Entry 链（返回 false）。</p><p>上面程序中还调用了 addEntry(hash, key, value, i); 代码，其中 addEntry 是 HashMap 提供的一个包访问权限的方法，该方法仅用于添加一个 key-value 对。下面是该方法的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex)   </span><br><span class="line">&#123;   </span><br><span class="line">    &#x2F;&#x2F; 获取指定 bucketIndex 索引处的 Entry   </span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; table[bucketIndex];     &#x2F;&#x2F; </span><br><span class="line">    &#x2F;&#x2F; 将新创建的 Entry 放入 bucketIndex 索引处，并让新的 Entry 指向原来的 Entry   </span><br><span class="line">    table[bucketIndex] &#x3D; new Entry&lt;K,V&gt;(hash, key, value, e);   </span><br><span class="line">    &#x2F;&#x2F; 如果 Map 中的 key-value 对的数量超过了极限  </span><br><span class="line">    if (size++ &gt;&#x3D; threshold)   </span><br><span class="line">        &#x2F;&#x2F; 把 table 对象的长度扩充到 2 倍。  </span><br><span class="line">        resize(2 * table.length);    &#x2F;&#x2F; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法的代码很简单，但其中包含了一个非常优雅的设计：系统总是将新添加的 Entry 对象放入 table 数组的 bucketIndex 索引处——如果 bucketIndex 索引处已经有了一个 Entry 对象，那新添加的 Entry 对象指向原有的 Entry 对象（产生一个 Entry 链），如果 bucketIndex 索引处没有 Entry 对象，也就是上面程序①号代码的 e 变量是 null，也就是新放入的 Entry 对象指向 null，也就是没有产生 Entry 链。</p><p>上面程序中还有这样两个变量：</p><pre><code>* size：该变量保存了该 HashMap 中所包含的 key-value 对的数量。* threshold：该变量包含了 HashMap 能容纳的 key-value 对的极限，它的值等于 HashMap 的容量乘以负载因子（load factor）。</code></pre><p>可以看出，当 size++ &gt;= threshold 时，HashMap 会自动调用 resize 方法扩充 HashMap 的容量。每扩充一次，HashMap 的容量就增大一倍。</p><h1 id="HashMap中的构造器"><a href="#HashMap中的构造器" class="headerlink" title="HashMap中的构造器"></a>HashMap中的构造器</h1><p>之前程序中的table实际上就是一个普通数组，，每个数组都有一个固定的长度，这个数组的长度就是 HashMap 的容量。HashMap 包含如下几个构造器：</p><pre><code>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</code></pre><p>当创建一个 HashMap 时，系统会自动创建一个 table 数组来保存 HashMap 中的 Entry，下面是 HashMap 中一个构造器的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line"> public HashMap(int initialCapacity, float loadFactor)   </span><br><span class="line"> &#123;   </span><br><span class="line">     &#x2F;&#x2F; 初始容量不能为负数  </span><br><span class="line">     if (initialCapacity &lt; 0)   </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">        &quot;Illegal initial capacity: &quot; +   </span><br><span class="line">             initialCapacity);   </span><br><span class="line">     &#x2F;&#x2F; 如果初始容量大于最大容量，让出示容量  </span><br><span class="line">     if (initialCapacity &gt; MAXIMUM_CAPACITY)   </span><br><span class="line">         initialCapacity &#x3D; MAXIMUM_CAPACITY;   </span><br><span class="line">     &#x2F;&#x2F; 负载因子必须大于 0 的数值  </span><br><span class="line">     if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor)) &#x2F;&#x2F;标记一 </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">         loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 计算出大于 initialCapacity 的最小的 2 的 n 次方值。  </span><br><span class="line">     int capacity &#x3D; 1;   </span><br><span class="line">     while (capacity &lt; initialCapacity)   </span><br><span class="line">         capacity &lt;&lt;&#x3D; 1;   </span><br><span class="line">     this.loadFactor &#x3D; loadFactor;   </span><br><span class="line">     &#x2F;&#x2F; 设置容量极限等于容量 * 负载因子  </span><br><span class="line">     threshold &#x3D; (int)(capacity * loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 初始化 table 数组  </span><br><span class="line">     table &#x3D; new Entry[capacity];            &#x2F;&#x2F;  </span><br><span class="line">     init();   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面代码中标记一的代码包含了一个简洁的代码实现：找出大于 initialCapacity 的、最小的 2 的 n 次方值，并将其作为 HashMap 的实际容量（由 capacity 变量保存）。例如给定 initialCapacity 为 10，那么该 HashMap 的实际容量就是 16。<br>程序①号代码处可以看到：table 的实质就是一个数组，一个长度为 capacity 的数组。</p><p>对于 HashMap 及其子类而言，它们采用 Hash 算法来决定集合中元素的存储位置。当系统开始初始化 HashMap 时，系统会创建一个长度为 capacity 的 Entry 数组，这个数组里可以存储元素的位置被称为“桶（bucket）”，每个 bucket 都有其指定索引，系统可以根据其索引快速访问该 bucket 里存储的元素。</p><p>无论何时，HashMap 的每个“桶”只存储一个元素（也就是一个 Entry），由于 Entry 对象可以包含一个引用变量（就是 Entry 构造器的的最后一个参数）用于指向下一个 Entry，因此可能出现的情况是：HashMap 的 bucket 中只有一个 Entry，但这个 Entry 指向另一个 Entry ——这就形成了一个 Entry 链。如图所示(图片来源于网络)：</p><p><img src="/images/haspmap.jpg" alt="alt"></p><p>当 HashMap 的每个 bucket 里存储的 Entry 只是单个 Entry ——也就是没有通过指针产生 Entry 链时，此时的 HashMap 具有最好的性能：当程序通过 key 取出对应 value 时，系统只要先计算出该 key 的 hashCode() 返回值，在根据该 hashCode 返回值找出该 key 在 table 数组中的索引，然后取出该索引处的 Entry，最后返回该 key 对应的 value 即可。看 HashMap 类的 get(K key) 方法代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line">public V get(Object key)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 是 null，调用 getForNullKey 取出对应的 value   </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return getForNullKey();   </span><br><span class="line"> &#x2F;&#x2F; 根据该 key 的 hashCode 值计算它的 hash 码  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 直接取出 table 数组中指定索引处的值，  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[indexFor(hash, table.length)];   </span><br><span class="line">     e !&#x3D; null;   </span><br><span class="line">     &#x2F;&#x2F; 搜索该 Entry 链的下一个 Entr   </span><br><span class="line">     e &#x3D; e.next)         &#x2F;&#x2F; ①  </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 如果该 Entry 的 key 与被搜索 key 相同  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">         return e.value;   </span><br><span class="line"> &#125;   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出，如果 HashMap 的每个 bucket 里只有一个 Entry 时，HashMap 可以根据索引、快速地取出该 bucket 里的 Entry；在发生“Hash 冲突”的情况下，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素。</p><p>归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 Hash 算法来决定其存储位置；当需要取出一个 Entry 时，也会根据 Hash 算法找到其存储位置，直接取出该 Entry。由此可见：HashMap 之所以能快速存、取它所包含的 Entry，完全类似于现实生活中母亲从小教我们的：不同的东西要放在不同的位置，需要时才能快速找到它。</p><p>当创建 HashMap 时，有一个默认的负载因子（load factor），其默认值为 0.75，这是时间和空间成本上一种折衷：增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</p><p>掌握了上面知识之后，我们可以在创建 HashMap 时根据实际需要适当地调整 load factor 的值；如果程序比较关心空间开销、内存比较紧张，可以适当地增加负载因子；如果程序比较关心时间开销，内存比较宽裕则可以适当的减少负载因子。通常情况下，程序员无需改变负载因子的值。</p><p>如果开始就知道 HashMap 会保存多个 key-value 对，可以在创建时就使用较大的初始化容量，如果 HashMap 中 Entry 的数量一直不会超过极限容量（capacity * load factor），HashMap 就无需调用 resize() 方法重新分配 table 数组，从而保证较好的性能。当然，开始就将初始容量设置太高可能会浪费空间（系统需要创建一个长度为 capacity 的 Entry 数组），因此创建 HashMap 时初始化容量设置也需要重视起来。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在jdk1.8中对HashMap进行了优化，之后会结合红黑树在一起说，留个待续…</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java GC机制（上）</title>
      <link href="/Java/Java%20GC%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/Java/Java%20GC%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HashMap 作为一种非常非常常用的数据结构，几乎每天都要见面，今天就安排他一下!</p><a id="more"></a><h1 id="HashMap存储的实现"><a href="#HashMap存储的实现" class="headerlink" title="HashMap存储的实现"></a>HashMap存储的实现</h1><p>当我们新new一个HashMap，并将多个key-value放入HashMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String , String&gt; map &#x3D; new HashMap&lt;String , String&gt;();</span><br><span class="line">map.put(&quot;王思聪&quot; , &quot;有钱&quot;);</span><br><span class="line">map.put(&quot;姚明&quot; , &quot;个子高&quot;);   </span><br><span class="line">map.put(&quot;SZ&quot; , &quot;很帅&quot;);</span><br></pre></td></tr></table></figure><p>HashMap 采用一种所谓的“Hash 算法”来决定每个元素的存储位置。</p><p>当程序执行 map.put(“王思聪” , “有钱”); 时，系统将调用”王思聪”的 hashCode() 方法得到其 hashCode 值——每个 Java 对象都有 hashCode() 方法，都可通过该方法获得它的 hashCode 值。得到这个对象的 hashCode 值之后，系统会根据该 hashCode 值来决定该元素的存储位置。</p><p>我们可以看 HashMap 类的 put(K key , V value) 方法的源代码(在 JDK 安装目录下可以找到一个 src.zip 压缩文件，该文件里包含了 Java 基础类库的所有源文件。注释为我手动标注…)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 为 null，调用 putForNullKey 方法进行处理  </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return putForNullKey(value);   </span><br><span class="line"> &#x2F;&#x2F; 根据 key 的 keyCode 计算 Hash 值  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 搜索指定 hash 值在对应 table 中的索引  </span><br><span class="line">     int i &#x3D; indexFor(hash, table.length);  </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next)   </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 找到指定 key 与需要放入的 key 相等（hash 值相同  </span><br><span class="line">     &#x2F;&#x2F; 通过 equals 比较放回 true）  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">     &#123;   </span><br><span class="line">         V oldValue &#x3D; e.value;   </span><br><span class="line">         e.value &#x3D; value;   </span><br><span class="line">         e.recordAccess(this);   </span><br><span class="line">         return oldValue;   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;   </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry   </span><br><span class="line"> modCount++;   </span><br><span class="line"> &#x2F;&#x2F; 将 key、value 添加到 i 索引处  </span><br><span class="line"> addEntry(hash, key, value, i);   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面程序中用到了一个重要的内部接口：Map.Entry，每个 Map.Entry 其实就是一个 key-value 对。从上面程序中可以看出：当系统决定存储 HashMap 中的 key-value 对时，仅仅只是根据 key 来计算并决定每个 Entry 的存储位置。我们完全可以把 Map 集合中的 value 当成 key 的附属，当系统决定了 key 的存储位置之后，value 随之保存在那里即可。</p><h1 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h1><p>在上面的源代码中提供了一个根据hashcode()返回值计算hash码的方法，继续查看其源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static int hash(int h)   </span><br><span class="line">&#123;   </span><br><span class="line">    h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);   </span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到hashcode()方法为一个仅与参数自身有关的方法，对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用 hash(int h) 方法所计算得到的 Hash 码值总是相同的。接下来程序会调用 indexFor(int h, int length) 方法来计算该对象应该保存在 table 数组的哪个索引处。indexFor(int h, int length) 方法的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length)   </span><br><span class="line">&#123;   </span><br><span class="line">    return h &amp; (length-1);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法非常巧妙，它总是通过 h &amp;(table.length -1) 来得到该对象的保存位置——而 HashMap 底层数组的长度总是 2 的 n 次方，这一点可参看后面关于 HashMap 构造器的介绍。</p><p>当 length 总是 2 的倍数时，h &amp; (length-1) 将是一个非常巧妙的设计：假设 h=5,length=16, 那么 h &amp; length - 1 将得到 5；如果 h=6,length=16, 那么 h &amp; length - 1 将得到 6 ……如果 h=15,length=16, 那么 h &amp; length - 1 将得到 15；但是当 h=16 时 , length=16 时，那么 h &amp; length - 1 将得到 0 了；当 h=17 时 , length=16 时，那么 h &amp; length - 1 将得到 1 了……这样保证计算得到的索引值总是位于 table 数组的索引之内。</p><p>根据上面 put 方法的源代码可以看出，当程序试图将一个 key-value 对放入 HashMap 中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但 key 不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部——具体说明继续看 addEntry() 方法的说明。</p><p>当向 HashMap 中添加 key-value 对，由其 key 的 hashCode() 返回值决定该 key-value 对（就是 Entry 对象）的存储位置。当两个 Entry 对象的 key 的 hashCode() 返回值相同时，将由 key 通过 eqauls() 比较值决定是采用覆盖行为（返回 true），还是产生 Entry 链（返回 false）。</p><p>上面程序中还调用了 addEntry(hash, key, value, i); 代码，其中 addEntry 是 HashMap 提供的一个包访问权限的方法，该方法仅用于添加一个 key-value 对。下面是该方法的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex)   </span><br><span class="line">&#123;   </span><br><span class="line">    &#x2F;&#x2F; 获取指定 bucketIndex 索引处的 Entry   </span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; table[bucketIndex];     &#x2F;&#x2F; </span><br><span class="line">    &#x2F;&#x2F; 将新创建的 Entry 放入 bucketIndex 索引处，并让新的 Entry 指向原来的 Entry   </span><br><span class="line">    table[bucketIndex] &#x3D; new Entry&lt;K,V&gt;(hash, key, value, e);   </span><br><span class="line">    &#x2F;&#x2F; 如果 Map 中的 key-value 对的数量超过了极限  </span><br><span class="line">    if (size++ &gt;&#x3D; threshold)   </span><br><span class="line">        &#x2F;&#x2F; 把 table 对象的长度扩充到 2 倍。  </span><br><span class="line">        resize(2 * table.length);    &#x2F;&#x2F; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法的代码很简单，但其中包含了一个非常优雅的设计：系统总是将新添加的 Entry 对象放入 table 数组的 bucketIndex 索引处——如果 bucketIndex 索引处已经有了一个 Entry 对象，那新添加的 Entry 对象指向原有的 Entry 对象（产生一个 Entry 链），如果 bucketIndex 索引处没有 Entry 对象，也就是上面程序①号代码的 e 变量是 null，也就是新放入的 Entry 对象指向 null，也就是没有产生 Entry 链。</p><p>上面程序中还有这样两个变量：</p><pre><code>* size：该变量保存了该 HashMap 中所包含的 key-value 对的数量。* threshold：该变量包含了 HashMap 能容纳的 key-value 对的极限，它的值等于 HashMap 的容量乘以负载因子（load factor）。</code></pre><p>可以看出，当 size++ &gt;= threshold 时，HashMap 会自动调用 resize 方法扩充 HashMap 的容量。每扩充一次，HashMap 的容量就增大一倍。</p><h1 id="HashMap中的构造器"><a href="#HashMap中的构造器" class="headerlink" title="HashMap中的构造器"></a>HashMap中的构造器</h1><p>之前程序中的table实际上就是一个普通数组，，每个数组都有一个固定的长度，这个数组的长度就是 HashMap 的容量。HashMap 包含如下几个构造器：</p><pre><code>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</code></pre><p>当创建一个 HashMap 时，系统会自动创建一个 table 数组来保存 HashMap 中的 Entry，下面是 HashMap 中一个构造器的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line"> public HashMap(int initialCapacity, float loadFactor)   </span><br><span class="line"> &#123;   </span><br><span class="line">     &#x2F;&#x2F; 初始容量不能为负数  </span><br><span class="line">     if (initialCapacity &lt; 0)   </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">        &quot;Illegal initial capacity: &quot; +   </span><br><span class="line">             initialCapacity);   </span><br><span class="line">     &#x2F;&#x2F; 如果初始容量大于最大容量，让出示容量  </span><br><span class="line">     if (initialCapacity &gt; MAXIMUM_CAPACITY)   </span><br><span class="line">         initialCapacity &#x3D; MAXIMUM_CAPACITY;   </span><br><span class="line">     &#x2F;&#x2F; 负载因子必须大于 0 的数值  </span><br><span class="line">     if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor)) &#x2F;&#x2F;标记一 </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">         loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 计算出大于 initialCapacity 的最小的 2 的 n 次方值。  </span><br><span class="line">     int capacity &#x3D; 1;   </span><br><span class="line">     while (capacity &lt; initialCapacity)   </span><br><span class="line">         capacity &lt;&lt;&#x3D; 1;   </span><br><span class="line">     this.loadFactor &#x3D; loadFactor;   </span><br><span class="line">     &#x2F;&#x2F; 设置容量极限等于容量 * 负载因子  </span><br><span class="line">     threshold &#x3D; (int)(capacity * loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 初始化 table 数组  </span><br><span class="line">     table &#x3D; new Entry[capacity];            &#x2F;&#x2F;  </span><br><span class="line">     init();   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面代码中标记一的代码包含了一个简洁的代码实现：找出大于 initialCapacity 的、最小的 2 的 n 次方值，并将其作为 HashMap 的实际容量（由 capacity 变量保存）。例如给定 initialCapacity 为 10，那么该 HashMap 的实际容量就是 16。<br>程序①号代码处可以看到：table 的实质就是一个数组，一个长度为 capacity 的数组。</p><p>对于 HashMap 及其子类而言，它们采用 Hash 算法来决定集合中元素的存储位置。当系统开始初始化 HashMap 时，系统会创建一个长度为 capacity 的 Entry 数组，这个数组里可以存储元素的位置被称为“桶（bucket）”，每个 bucket 都有其指定索引，系统可以根据其索引快速访问该 bucket 里存储的元素。</p><p>无论何时，HashMap 的每个“桶”只存储一个元素（也就是一个 Entry），由于 Entry 对象可以包含一个引用变量（就是 Entry 构造器的的最后一个参数）用于指向下一个 Entry，因此可能出现的情况是：HashMap 的 bucket 中只有一个 Entry，但这个 Entry 指向另一个 Entry ——这就形成了一个 Entry 链。如图所示(图片来源于网络)：</p><p><img src="/images/haspmap.jpg" alt="alt"></p><p>当 HashMap 的每个 bucket 里存储的 Entry 只是单个 Entry ——也就是没有通过指针产生 Entry 链时，此时的 HashMap 具有最好的性能：当程序通过 key 取出对应 value 时，系统只要先计算出该 key 的 hashCode() 返回值，在根据该 hashCode 返回值找出该 key 在 table 数组中的索引，然后取出该索引处的 Entry，最后返回该 key 对应的 value 即可。看 HashMap 类的 get(K key) 方法代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line">public V get(Object key)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 是 null，调用 getForNullKey 取出对应的 value   </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return getForNullKey();   </span><br><span class="line"> &#x2F;&#x2F; 根据该 key 的 hashCode 值计算它的 hash 码  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 直接取出 table 数组中指定索引处的值，  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[indexFor(hash, table.length)];   </span><br><span class="line">     e !&#x3D; null;   </span><br><span class="line">     &#x2F;&#x2F; 搜索该 Entry 链的下一个 Entr   </span><br><span class="line">     e &#x3D; e.next)         &#x2F;&#x2F; ①  </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 如果该 Entry 的 key 与被搜索 key 相同  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">         return e.value;   </span><br><span class="line"> &#125;   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出，如果 HashMap 的每个 bucket 里只有一个 Entry 时，HashMap 可以根据索引、快速地取出该 bucket 里的 Entry；在发生“Hash 冲突”的情况下，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素。</p><p>归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 Hash 算法来决定其存储位置；当需要取出一个 Entry 时，也会根据 Hash 算法找到其存储位置，直接取出该 Entry。由此可见：HashMap 之所以能快速存、取它所包含的 Entry，完全类似于现实生活中母亲从小教我们的：不同的东西要放在不同的位置，需要时才能快速找到它。</p><p>当创建 HashMap 时，有一个默认的负载因子（load factor），其默认值为 0.75，这是时间和空间成本上一种折衷：增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</p><p>掌握了上面知识之后，我们可以在创建 HashMap 时根据实际需要适当地调整 load factor 的值；如果程序比较关心空间开销、内存比较紧张，可以适当地增加负载因子；如果程序比较关心时间开销，内存比较宽裕则可以适当的减少负载因子。通常情况下，程序员无需改变负载因子的值。</p><p>如果开始就知道 HashMap 会保存多个 key-value 对，可以在创建时就使用较大的初始化容量，如果 HashMap 中 Entry 的数量一直不会超过极限容量（capacity * load factor），HashMap 就无需调用 resize() 方法重新分配 table 数组，从而保证较好的性能。当然，开始就将初始容量设置太高可能会浪费空间（系统需要创建一个长度为 capacity 的 Entry 数组），因此创建 HashMap 时初始化容量设置也需要重视起来。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在jdk1.8中对HashMap进行了优化，之后会结合红黑树在一起说，留个待续…</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP请求报文和HTTP响应报文</title>
      <link href="/%E9%80%9A%E4%BF%A1/HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E5%92%8CHTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87/"/>
      <url>/%E9%80%9A%E4%BF%A1/HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E5%92%8CHTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HashMap 作为一种非常非常常用的数据结构，几乎每天都要见面，今天就安排他一下!</p><a id="more"></a><h1 id="HashMap存储的实现"><a href="#HashMap存储的实现" class="headerlink" title="HashMap存储的实现"></a>HashMap存储的实现</h1><p>当我们新new一个HashMap，并将多个key-value放入HashMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String , String&gt; map &#x3D; new HashMap&lt;String , String&gt;();</span><br><span class="line">map.put(&quot;王思聪&quot; , &quot;有钱&quot;);</span><br><span class="line">map.put(&quot;姚明&quot; , &quot;个子高&quot;);   </span><br><span class="line">map.put(&quot;SZ&quot; , &quot;很帅&quot;);</span><br></pre></td></tr></table></figure><p>HashMap 采用一种所谓的“Hash 算法”来决定每个元素的存储位置。</p><p>当程序执行 map.put(“王思聪” , “有钱”); 时，系统将调用”王思聪”的 hashCode() 方法得到其 hashCode 值——每个 Java 对象都有 hashCode() 方法，都可通过该方法获得它的 hashCode 值。得到这个对象的 hashCode 值之后，系统会根据该 hashCode 值来决定该元素的存储位置。</p><p>我们可以看 HashMap 类的 put(K key , V value) 方法的源代码(在 JDK 安装目录下可以找到一个 src.zip 压缩文件，该文件里包含了 Java 基础类库的所有源文件。注释为我手动标注…)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 为 null，调用 putForNullKey 方法进行处理  </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return putForNullKey(value);   </span><br><span class="line"> &#x2F;&#x2F; 根据 key 的 keyCode 计算 Hash 值  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 搜索指定 hash 值在对应 table 中的索引  </span><br><span class="line">     int i &#x3D; indexFor(hash, table.length);  </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next)   </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 找到指定 key 与需要放入的 key 相等（hash 值相同  </span><br><span class="line">     &#x2F;&#x2F; 通过 equals 比较放回 true）  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">     &#123;   </span><br><span class="line">         V oldValue &#x3D; e.value;   </span><br><span class="line">         e.value &#x3D; value;   </span><br><span class="line">         e.recordAccess(this);   </span><br><span class="line">         return oldValue;   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;   </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry   </span><br><span class="line"> modCount++;   </span><br><span class="line"> &#x2F;&#x2F; 将 key、value 添加到 i 索引处  </span><br><span class="line"> addEntry(hash, key, value, i);   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面程序中用到了一个重要的内部接口：Map.Entry，每个 Map.Entry 其实就是一个 key-value 对。从上面程序中可以看出：当系统决定存储 HashMap 中的 key-value 对时，仅仅只是根据 key 来计算并决定每个 Entry 的存储位置。我们完全可以把 Map 集合中的 value 当成 key 的附属，当系统决定了 key 的存储位置之后，value 随之保存在那里即可。</p><h1 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h1><p>在上面的源代码中提供了一个根据hashcode()返回值计算hash码的方法，继续查看其源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static int hash(int h)   </span><br><span class="line">&#123;   </span><br><span class="line">    h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);   </span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到hashcode()方法为一个仅与参数自身有关的方法，对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用 hash(int h) 方法所计算得到的 Hash 码值总是相同的。接下来程序会调用 indexFor(int h, int length) 方法来计算该对象应该保存在 table 数组的哪个索引处。indexFor(int h, int length) 方法的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length)   </span><br><span class="line">&#123;   </span><br><span class="line">    return h &amp; (length-1);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法非常巧妙，它总是通过 h &amp;(table.length -1) 来得到该对象的保存位置——而 HashMap 底层数组的长度总是 2 的 n 次方，这一点可参看后面关于 HashMap 构造器的介绍。</p><p>当 length 总是 2 的倍数时，h &amp; (length-1) 将是一个非常巧妙的设计：假设 h=5,length=16, 那么 h &amp; length - 1 将得到 5；如果 h=6,length=16, 那么 h &amp; length - 1 将得到 6 ……如果 h=15,length=16, 那么 h &amp; length - 1 将得到 15；但是当 h=16 时 , length=16 时，那么 h &amp; length - 1 将得到 0 了；当 h=17 时 , length=16 时，那么 h &amp; length - 1 将得到 1 了……这样保证计算得到的索引值总是位于 table 数组的索引之内。</p><p>根据上面 put 方法的源代码可以看出，当程序试图将一个 key-value 对放入 HashMap 中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但 key 不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部——具体说明继续看 addEntry() 方法的说明。</p><p>当向 HashMap 中添加 key-value 对，由其 key 的 hashCode() 返回值决定该 key-value 对（就是 Entry 对象）的存储位置。当两个 Entry 对象的 key 的 hashCode() 返回值相同时，将由 key 通过 eqauls() 比较值决定是采用覆盖行为（返回 true），还是产生 Entry 链（返回 false）。</p><p>上面程序中还调用了 addEntry(hash, key, value, i); 代码，其中 addEntry 是 HashMap 提供的一个包访问权限的方法，该方法仅用于添加一个 key-value 对。下面是该方法的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex)   </span><br><span class="line">&#123;   </span><br><span class="line">    &#x2F;&#x2F; 获取指定 bucketIndex 索引处的 Entry   </span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; table[bucketIndex];     &#x2F;&#x2F; </span><br><span class="line">    &#x2F;&#x2F; 将新创建的 Entry 放入 bucketIndex 索引处，并让新的 Entry 指向原来的 Entry   </span><br><span class="line">    table[bucketIndex] &#x3D; new Entry&lt;K,V&gt;(hash, key, value, e);   </span><br><span class="line">    &#x2F;&#x2F; 如果 Map 中的 key-value 对的数量超过了极限  </span><br><span class="line">    if (size++ &gt;&#x3D; threshold)   </span><br><span class="line">        &#x2F;&#x2F; 把 table 对象的长度扩充到 2 倍。  </span><br><span class="line">        resize(2 * table.length);    &#x2F;&#x2F; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法的代码很简单，但其中包含了一个非常优雅的设计：系统总是将新添加的 Entry 对象放入 table 数组的 bucketIndex 索引处——如果 bucketIndex 索引处已经有了一个 Entry 对象，那新添加的 Entry 对象指向原有的 Entry 对象（产生一个 Entry 链），如果 bucketIndex 索引处没有 Entry 对象，也就是上面程序①号代码的 e 变量是 null，也就是新放入的 Entry 对象指向 null，也就是没有产生 Entry 链。</p><p>上面程序中还有这样两个变量：</p><pre><code>* size：该变量保存了该 HashMap 中所包含的 key-value 对的数量。* threshold：该变量包含了 HashMap 能容纳的 key-value 对的极限，它的值等于 HashMap 的容量乘以负载因子（load factor）。</code></pre><p>可以看出，当 size++ &gt;= threshold 时，HashMap 会自动调用 resize 方法扩充 HashMap 的容量。每扩充一次，HashMap 的容量就增大一倍。</p><h1 id="HashMap中的构造器"><a href="#HashMap中的构造器" class="headerlink" title="HashMap中的构造器"></a>HashMap中的构造器</h1><p>之前程序中的table实际上就是一个普通数组，，每个数组都有一个固定的长度，这个数组的长度就是 HashMap 的容量。HashMap 包含如下几个构造器：</p><pre><code>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</code></pre><p>当创建一个 HashMap 时，系统会自动创建一个 table 数组来保存 HashMap 中的 Entry，下面是 HashMap 中一个构造器的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line"> public HashMap(int initialCapacity, float loadFactor)   </span><br><span class="line"> &#123;   </span><br><span class="line">     &#x2F;&#x2F; 初始容量不能为负数  </span><br><span class="line">     if (initialCapacity &lt; 0)   </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">        &quot;Illegal initial capacity: &quot; +   </span><br><span class="line">             initialCapacity);   </span><br><span class="line">     &#x2F;&#x2F; 如果初始容量大于最大容量，让出示容量  </span><br><span class="line">     if (initialCapacity &gt; MAXIMUM_CAPACITY)   </span><br><span class="line">         initialCapacity &#x3D; MAXIMUM_CAPACITY;   </span><br><span class="line">     &#x2F;&#x2F; 负载因子必须大于 0 的数值  </span><br><span class="line">     if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor)) &#x2F;&#x2F;标记一 </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">         loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 计算出大于 initialCapacity 的最小的 2 的 n 次方值。  </span><br><span class="line">     int capacity &#x3D; 1;   </span><br><span class="line">     while (capacity &lt; initialCapacity)   </span><br><span class="line">         capacity &lt;&lt;&#x3D; 1;   </span><br><span class="line">     this.loadFactor &#x3D; loadFactor;   </span><br><span class="line">     &#x2F;&#x2F; 设置容量极限等于容量 * 负载因子  </span><br><span class="line">     threshold &#x3D; (int)(capacity * loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 初始化 table 数组  </span><br><span class="line">     table &#x3D; new Entry[capacity];            &#x2F;&#x2F;  </span><br><span class="line">     init();   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面代码中标记一的代码包含了一个简洁的代码实现：找出大于 initialCapacity 的、最小的 2 的 n 次方值，并将其作为 HashMap 的实际容量（由 capacity 变量保存）。例如给定 initialCapacity 为 10，那么该 HashMap 的实际容量就是 16。<br>程序①号代码处可以看到：table 的实质就是一个数组，一个长度为 capacity 的数组。</p><p>对于 HashMap 及其子类而言，它们采用 Hash 算法来决定集合中元素的存储位置。当系统开始初始化 HashMap 时，系统会创建一个长度为 capacity 的 Entry 数组，这个数组里可以存储元素的位置被称为“桶（bucket）”，每个 bucket 都有其指定索引，系统可以根据其索引快速访问该 bucket 里存储的元素。</p><p>无论何时，HashMap 的每个“桶”只存储一个元素（也就是一个 Entry），由于 Entry 对象可以包含一个引用变量（就是 Entry 构造器的的最后一个参数）用于指向下一个 Entry，因此可能出现的情况是：HashMap 的 bucket 中只有一个 Entry，但这个 Entry 指向另一个 Entry ——这就形成了一个 Entry 链。如图所示(图片来源于网络)：</p><p><img src="/images/haspmap.jpg" alt="alt"></p><p>当 HashMap 的每个 bucket 里存储的 Entry 只是单个 Entry ——也就是没有通过指针产生 Entry 链时，此时的 HashMap 具有最好的性能：当程序通过 key 取出对应 value 时，系统只要先计算出该 key 的 hashCode() 返回值，在根据该 hashCode 返回值找出该 key 在 table 数组中的索引，然后取出该索引处的 Entry，最后返回该 key 对应的 value 即可。看 HashMap 类的 get(K key) 方法代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line">public V get(Object key)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 是 null，调用 getForNullKey 取出对应的 value   </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return getForNullKey();   </span><br><span class="line"> &#x2F;&#x2F; 根据该 key 的 hashCode 值计算它的 hash 码  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 直接取出 table 数组中指定索引处的值，  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[indexFor(hash, table.length)];   </span><br><span class="line">     e !&#x3D; null;   </span><br><span class="line">     &#x2F;&#x2F; 搜索该 Entry 链的下一个 Entr   </span><br><span class="line">     e &#x3D; e.next)         &#x2F;&#x2F; ①  </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 如果该 Entry 的 key 与被搜索 key 相同  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">         return e.value;   </span><br><span class="line"> &#125;   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出，如果 HashMap 的每个 bucket 里只有一个 Entry 时，HashMap 可以根据索引、快速地取出该 bucket 里的 Entry；在发生“Hash 冲突”的情况下，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素。</p><p>归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 Hash 算法来决定其存储位置；当需要取出一个 Entry 时，也会根据 Hash 算法找到其存储位置，直接取出该 Entry。由此可见：HashMap 之所以能快速存、取它所包含的 Entry，完全类似于现实生活中母亲从小教我们的：不同的东西要放在不同的位置，需要时才能快速找到它。</p><p>当创建 HashMap 时，有一个默认的负载因子（load factor），其默认值为 0.75，这是时间和空间成本上一种折衷：增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</p><p>掌握了上面知识之后，我们可以在创建 HashMap 时根据实际需要适当地调整 load factor 的值；如果程序比较关心空间开销、内存比较紧张，可以适当地增加负载因子；如果程序比较关心时间开销，内存比较宽裕则可以适当的减少负载因子。通常情况下，程序员无需改变负载因子的值。</p><p>如果开始就知道 HashMap 会保存多个 key-value 对，可以在创建时就使用较大的初始化容量，如果 HashMap 中 Entry 的数量一直不会超过极限容量（capacity * load factor），HashMap 就无需调用 resize() 方法重新分配 table 数组，从而保证较好的性能。当然，开始就将初始容量设置太高可能会浪费空间（系统需要创建一个长度为 capacity 的 Entry 数组），因此创建 HashMap 时初始化容量设置也需要重视起来。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在jdk1.8中对HashMap进行了优化，之后会结合红黑树在一起说，留个待续…</p>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL：InnoDB存储引擎的B+树索引算法</title>
      <link href="/MySql/MySQL%EF%BC%9AInnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84B+%E6%A0%91%E7%B4%A2%E5%BC%95%E7%AE%97%E6%B3%95/"/>
      <url>/MySql/MySQL%EF%BC%9AInnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84B+%E6%A0%91%E7%B4%A2%E5%BC%95%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HashMap 作为一种非常非常常用的数据结构，几乎每天都要见面，今天就安排他一下!</p><a id="more"></a><h1 id="HashMap存储的实现"><a href="#HashMap存储的实现" class="headerlink" title="HashMap存储的实现"></a>HashMap存储的实现</h1><p>当我们新new一个HashMap，并将多个key-value放入HashMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String , String&gt; map &#x3D; new HashMap&lt;String , String&gt;();</span><br><span class="line">map.put(&quot;王思聪&quot; , &quot;有钱&quot;);</span><br><span class="line">map.put(&quot;姚明&quot; , &quot;个子高&quot;);   </span><br><span class="line">map.put(&quot;SZ&quot; , &quot;很帅&quot;);</span><br></pre></td></tr></table></figure><p>HashMap 采用一种所谓的“Hash 算法”来决定每个元素的存储位置。</p><p>当程序执行 map.put(“王思聪” , “有钱”); 时，系统将调用”王思聪”的 hashCode() 方法得到其 hashCode 值——每个 Java 对象都有 hashCode() 方法，都可通过该方法获得它的 hashCode 值。得到这个对象的 hashCode 值之后，系统会根据该 hashCode 值来决定该元素的存储位置。</p><p>我们可以看 HashMap 类的 put(K key , V value) 方法的源代码(在 JDK 安装目录下可以找到一个 src.zip 压缩文件，该文件里包含了 Java 基础类库的所有源文件。注释为我手动标注…)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 为 null，调用 putForNullKey 方法进行处理  </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return putForNullKey(value);   </span><br><span class="line"> &#x2F;&#x2F; 根据 key 的 keyCode 计算 Hash 值  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 搜索指定 hash 值在对应 table 中的索引  </span><br><span class="line">     int i &#x3D; indexFor(hash, table.length);  </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next)   </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 找到指定 key 与需要放入的 key 相等（hash 值相同  </span><br><span class="line">     &#x2F;&#x2F; 通过 equals 比较放回 true）  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">     &#123;   </span><br><span class="line">         V oldValue &#x3D; e.value;   </span><br><span class="line">         e.value &#x3D; value;   </span><br><span class="line">         e.recordAccess(this);   </span><br><span class="line">         return oldValue;   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;   </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry   </span><br><span class="line"> modCount++;   </span><br><span class="line"> &#x2F;&#x2F; 将 key、value 添加到 i 索引处  </span><br><span class="line"> addEntry(hash, key, value, i);   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面程序中用到了一个重要的内部接口：Map.Entry，每个 Map.Entry 其实就是一个 key-value 对。从上面程序中可以看出：当系统决定存储 HashMap 中的 key-value 对时，仅仅只是根据 key 来计算并决定每个 Entry 的存储位置。我们完全可以把 Map 集合中的 value 当成 key 的附属，当系统决定了 key 的存储位置之后，value 随之保存在那里即可。</p><h1 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h1><p>在上面的源代码中提供了一个根据hashcode()返回值计算hash码的方法，继续查看其源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static int hash(int h)   </span><br><span class="line">&#123;   </span><br><span class="line">    h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);   </span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到hashcode()方法为一个仅与参数自身有关的方法，对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用 hash(int h) 方法所计算得到的 Hash 码值总是相同的。接下来程序会调用 indexFor(int h, int length) 方法来计算该对象应该保存在 table 数组的哪个索引处。indexFor(int h, int length) 方法的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length)   </span><br><span class="line">&#123;   </span><br><span class="line">    return h &amp; (length-1);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法非常巧妙，它总是通过 h &amp;(table.length -1) 来得到该对象的保存位置——而 HashMap 底层数组的长度总是 2 的 n 次方，这一点可参看后面关于 HashMap 构造器的介绍。</p><p>当 length 总是 2 的倍数时，h &amp; (length-1) 将是一个非常巧妙的设计：假设 h=5,length=16, 那么 h &amp; length - 1 将得到 5；如果 h=6,length=16, 那么 h &amp; length - 1 将得到 6 ……如果 h=15,length=16, 那么 h &amp; length - 1 将得到 15；但是当 h=16 时 , length=16 时，那么 h &amp; length - 1 将得到 0 了；当 h=17 时 , length=16 时，那么 h &amp; length - 1 将得到 1 了……这样保证计算得到的索引值总是位于 table 数组的索引之内。</p><p>根据上面 put 方法的源代码可以看出，当程序试图将一个 key-value 对放入 HashMap 中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但 key 不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部——具体说明继续看 addEntry() 方法的说明。</p><p>当向 HashMap 中添加 key-value 对，由其 key 的 hashCode() 返回值决定该 key-value 对（就是 Entry 对象）的存储位置。当两个 Entry 对象的 key 的 hashCode() 返回值相同时，将由 key 通过 eqauls() 比较值决定是采用覆盖行为（返回 true），还是产生 Entry 链（返回 false）。</p><p>上面程序中还调用了 addEntry(hash, key, value, i); 代码，其中 addEntry 是 HashMap 提供的一个包访问权限的方法，该方法仅用于添加一个 key-value 对。下面是该方法的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex)   </span><br><span class="line">&#123;   </span><br><span class="line">    &#x2F;&#x2F; 获取指定 bucketIndex 索引处的 Entry   </span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; table[bucketIndex];     &#x2F;&#x2F; </span><br><span class="line">    &#x2F;&#x2F; 将新创建的 Entry 放入 bucketIndex 索引处，并让新的 Entry 指向原来的 Entry   </span><br><span class="line">    table[bucketIndex] &#x3D; new Entry&lt;K,V&gt;(hash, key, value, e);   </span><br><span class="line">    &#x2F;&#x2F; 如果 Map 中的 key-value 对的数量超过了极限  </span><br><span class="line">    if (size++ &gt;&#x3D; threshold)   </span><br><span class="line">        &#x2F;&#x2F; 把 table 对象的长度扩充到 2 倍。  </span><br><span class="line">        resize(2 * table.length);    &#x2F;&#x2F; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法的代码很简单，但其中包含了一个非常优雅的设计：系统总是将新添加的 Entry 对象放入 table 数组的 bucketIndex 索引处——如果 bucketIndex 索引处已经有了一个 Entry 对象，那新添加的 Entry 对象指向原有的 Entry 对象（产生一个 Entry 链），如果 bucketIndex 索引处没有 Entry 对象，也就是上面程序①号代码的 e 变量是 null，也就是新放入的 Entry 对象指向 null，也就是没有产生 Entry 链。</p><p>上面程序中还有这样两个变量：</p><pre><code>* size：该变量保存了该 HashMap 中所包含的 key-value 对的数量。* threshold：该变量包含了 HashMap 能容纳的 key-value 对的极限，它的值等于 HashMap 的容量乘以负载因子（load factor）。</code></pre><p>可以看出，当 size++ &gt;= threshold 时，HashMap 会自动调用 resize 方法扩充 HashMap 的容量。每扩充一次，HashMap 的容量就增大一倍。</p><h1 id="HashMap中的构造器"><a href="#HashMap中的构造器" class="headerlink" title="HashMap中的构造器"></a>HashMap中的构造器</h1><p>之前程序中的table实际上就是一个普通数组，，每个数组都有一个固定的长度，这个数组的长度就是 HashMap 的容量。HashMap 包含如下几个构造器：</p><pre><code>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</code></pre><p>当创建一个 HashMap 时，系统会自动创建一个 table 数组来保存 HashMap 中的 Entry，下面是 HashMap 中一个构造器的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line"> public HashMap(int initialCapacity, float loadFactor)   </span><br><span class="line"> &#123;   </span><br><span class="line">     &#x2F;&#x2F; 初始容量不能为负数  </span><br><span class="line">     if (initialCapacity &lt; 0)   </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">        &quot;Illegal initial capacity: &quot; +   </span><br><span class="line">             initialCapacity);   </span><br><span class="line">     &#x2F;&#x2F; 如果初始容量大于最大容量，让出示容量  </span><br><span class="line">     if (initialCapacity &gt; MAXIMUM_CAPACITY)   </span><br><span class="line">         initialCapacity &#x3D; MAXIMUM_CAPACITY;   </span><br><span class="line">     &#x2F;&#x2F; 负载因子必须大于 0 的数值  </span><br><span class="line">     if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor)) &#x2F;&#x2F;标记一 </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">         loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 计算出大于 initialCapacity 的最小的 2 的 n 次方值。  </span><br><span class="line">     int capacity &#x3D; 1;   </span><br><span class="line">     while (capacity &lt; initialCapacity)   </span><br><span class="line">         capacity &lt;&lt;&#x3D; 1;   </span><br><span class="line">     this.loadFactor &#x3D; loadFactor;   </span><br><span class="line">     &#x2F;&#x2F; 设置容量极限等于容量 * 负载因子  </span><br><span class="line">     threshold &#x3D; (int)(capacity * loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 初始化 table 数组  </span><br><span class="line">     table &#x3D; new Entry[capacity];            &#x2F;&#x2F;  </span><br><span class="line">     init();   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面代码中标记一的代码包含了一个简洁的代码实现：找出大于 initialCapacity 的、最小的 2 的 n 次方值，并将其作为 HashMap 的实际容量（由 capacity 变量保存）。例如给定 initialCapacity 为 10，那么该 HashMap 的实际容量就是 16。<br>程序①号代码处可以看到：table 的实质就是一个数组，一个长度为 capacity 的数组。</p><p>对于 HashMap 及其子类而言，它们采用 Hash 算法来决定集合中元素的存储位置。当系统开始初始化 HashMap 时，系统会创建一个长度为 capacity 的 Entry 数组，这个数组里可以存储元素的位置被称为“桶（bucket）”，每个 bucket 都有其指定索引，系统可以根据其索引快速访问该 bucket 里存储的元素。</p><p>无论何时，HashMap 的每个“桶”只存储一个元素（也就是一个 Entry），由于 Entry 对象可以包含一个引用变量（就是 Entry 构造器的的最后一个参数）用于指向下一个 Entry，因此可能出现的情况是：HashMap 的 bucket 中只有一个 Entry，但这个 Entry 指向另一个 Entry ——这就形成了一个 Entry 链。如图所示(图片来源于网络)：</p><p><img src="/images/haspmap.jpg" alt="alt"></p><p>当 HashMap 的每个 bucket 里存储的 Entry 只是单个 Entry ——也就是没有通过指针产生 Entry 链时，此时的 HashMap 具有最好的性能：当程序通过 key 取出对应 value 时，系统只要先计算出该 key 的 hashCode() 返回值，在根据该 hashCode 返回值找出该 key 在 table 数组中的索引，然后取出该索引处的 Entry，最后返回该 key 对应的 value 即可。看 HashMap 类的 get(K key) 方法代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line">public V get(Object key)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 是 null，调用 getForNullKey 取出对应的 value   </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return getForNullKey();   </span><br><span class="line"> &#x2F;&#x2F; 根据该 key 的 hashCode 值计算它的 hash 码  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 直接取出 table 数组中指定索引处的值，  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[indexFor(hash, table.length)];   </span><br><span class="line">     e !&#x3D; null;   </span><br><span class="line">     &#x2F;&#x2F; 搜索该 Entry 链的下一个 Entr   </span><br><span class="line">     e &#x3D; e.next)         &#x2F;&#x2F; ①  </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 如果该 Entry 的 key 与被搜索 key 相同  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">         return e.value;   </span><br><span class="line"> &#125;   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出，如果 HashMap 的每个 bucket 里只有一个 Entry 时，HashMap 可以根据索引、快速地取出该 bucket 里的 Entry；在发生“Hash 冲突”的情况下，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素。</p><p>归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 Hash 算法来决定其存储位置；当需要取出一个 Entry 时，也会根据 Hash 算法找到其存储位置，直接取出该 Entry。由此可见：HashMap 之所以能快速存、取它所包含的 Entry，完全类似于现实生活中母亲从小教我们的：不同的东西要放在不同的位置，需要时才能快速找到它。</p><p>当创建 HashMap 时，有一个默认的负载因子（load factor），其默认值为 0.75，这是时间和空间成本上一种折衷：增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</p><p>掌握了上面知识之后，我们可以在创建 HashMap 时根据实际需要适当地调整 load factor 的值；如果程序比较关心空间开销、内存比较紧张，可以适当地增加负载因子；如果程序比较关心时间开销，内存比较宽裕则可以适当的减少负载因子。通常情况下，程序员无需改变负载因子的值。</p><p>如果开始就知道 HashMap 会保存多个 key-value 对，可以在创建时就使用较大的初始化容量，如果 HashMap 中 Entry 的数量一直不会超过极限容量（capacity * load factor），HashMap 就无需调用 resize() 方法重新分配 table 数组，从而保证较好的性能。当然，开始就将初始容量设置太高可能会浪费空间（系统需要创建一个长度为 capacity 的 Entry 数组），因此创建 HashMap 时初始化容量设置也需要重视起来。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在jdk1.8中对HashMap进行了优化，之后会结合红黑树在一起说，留个待续…</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM类加载机制</title>
      <link href="/Java/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/Java/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  一般的情况下，项目都是前后端分离的，所以这里就涉及到一个很严重的问题，当协议，端口，IP三者有其一不同就会产生跨域，所以需要做跨域支持。</p><a id="more"></a><h1 id="测试跨域的文件"><a href="#测试跨域的文件" class="headerlink" title="测试跨域的文件"></a>测试跨域的文件</h1><p>在这之前，我们先写一个测试接口是否跨域的html ,这样下面的测试比较方便。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;link type&#x3D;&quot;test&#x2F;css&quot; href&#x3D;&quot;css&#x2F;style.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; style&#x3D;&quot;width:600px;height:30px;font-size:14px;&quot; id&#x3D;&quot;urlText&quot; value&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; style&#x3D;&quot;margin: 10px&quot;;  id&#x3D;&quot;cors&quot; value&#x3D;&quot;判断是否可访问&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;http:&#x2F;&#x2F;localhost:9090&#x2F;test&#x2F;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.2.1.min.js&quot;&gt;&lt;&#x2F;script&gt;  </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">$(&quot;#cors&quot;).click(</span><br><span class="line">function()&#123;</span><br><span class="line">var url2 &#x3D; $(&quot;#urlText&quot;).val();</span><br><span class="line">$.post(&#123;</span><br><span class="line">contentType:&#39;application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8&#39;,</span><br><span class="line">url:url2,</span><br><span class="line">data: &quot;&#x2F;rAIeKeSBG1LV XoIq82&#x2F;O&quot;,</span><br><span class="line">success:function(data)&#123;</span><br><span class="line">alert(&quot;success&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>接下来我们来学习下在springboot 项目中怎么实现支持跨域。</p><h1 id="CrossOrigin-注解"><a href="#CrossOrigin-注解" class="headerlink" title="@CrossOrigin 注解"></a>@CrossOrigin 注解</h1><p>这种方法是springboot 自带的，使用比较简单，在需要支持的跨域的接口上加上这个注解就可以了。<br>比如在我们项目的demo 接口加上注解.就表示这个接口支持跨域，其中origins = “*”<br>表示所有的地址都可以访问这个接口，也可以写具体的地址，表示只有这个地址访问才能访问到接口。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@CrossOrigin(origin &#x3D;&quot;*&quot;)</span><br><span class="line">public class Demo &#123;</span><br><span class="line">@RequestMapping(&quot;&#x2F;&quot;)</span><br><span class="line">public String Demo() &#123;</span><br><span class="line">return &quot;Hello Word&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们也来测试一下，启动项目后，在浏览器上运行我们的测试的html文件。<br>发现localhost:9090/test/ 是可以访问的。<br>说明跨域是支持的。大伙可以先将注解去掉测试一下，然后加上注解测试一下进行对比。</p><p>这种方式虽然很简单，但是缺点也不小，需要跨域的接口都需要加上这个注解，这对前后端分离的项目是不友好的，所以这种方式基本上用的很少。</p><h1 id="重写WebMvcConfigurer的addCorsMappings-方法。"><a href="#重写WebMvcConfigurer的addCorsMappings-方法。" class="headerlink" title="重写WebMvcConfigurer的addCorsMappings 方法。"></a>重写WebMvcConfigurer的addCorsMappings 方法。</h1><p>这种方法在实际项目中也用的比较多，是一种全局支持跨域的方法。<br>我们创建一个CorsConfig 类。内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class CorsConfig implements WebMvcConfigurer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">        registry.addMapping(&quot;&#x2F;**&quot;)&#x2F;&#x2F;项目中的所有接口都支持跨域</span><br><span class="line">                .allowedOrigins(&quot;*&quot;)&#x2F;&#x2F;所有地址都可以访问，也可以配置具体地址</span><br><span class="line">                .allowCredentials(true)</span><br><span class="line">                .allowedMethods(&quot;*&quot;)&#x2F;&#x2F;&quot;GET&quot;, &quot;HEAD&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;</span><br><span class="line">                .maxAge(3600);&#x2F;&#x2F; 跨域允许时间</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上@Configuration 表示是配置类，在项目启动的时候会加载。实现WebMvcConfigurer 接口并重写addCorsMappings 方法。代码比较简单，也有注释。</p><p>测试的话，大家可以自行测试，我测试都是通过的和上面一样测试就可以，这里就不占篇幅了。</p><h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>除了上面方法外，也可以使用过滤器。我们创建一个CorsFilter 类，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class CorsFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletResponse response &#x3D; (HttpServletResponse)servletResponse;</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, PUT, GET, OPTIONS, DELETE&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept, client_id, uuid, Authorization&quot;);</span><br><span class="line">        response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;);</span><br><span class="line">        response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中设置response.setHeader(“Access-Control-Allow-Origin”, “*”);表示所有的地址都可以访问项目接口。</p><h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p>接下来我们再介绍一个常用的功能，前后端分离，在访问接口的时候，有的 公司往往会增加一下专属的后缀名才能访问。实际上没有什么太大的作用，能稍微增加一下系统的安全性。这里我就简单是实现一下。真个都非常简单。<br>一样的是实现WebMvcConfigurer 接口，重写configurePathMatch你方法和增加一个dispatcherServlet。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void configurePathMatch(PathMatchConfigurer configurer) &#123;</span><br><span class="line">        configurer.setUseRegisteredSuffixPatternMatch(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean servletRegistrationBean(DispatcherServlet dispatcherServlet) &#123;</span><br><span class="line">        ServletRegistrationBean bean &#x3D; new ServletRegistrationBean(dispatcherServlet);</span><br><span class="line">        bean.addUrlMappings(&quot;*.zlf&quot;);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个功能实现，就只用这个多代码，configurePathMatch方法中设置的configurer.setUseRegisteredSuffixPatternMatch(true); 主要是将index 和index.* 都指向我们controller 中配置的@RequestMapping(“/index”)。</p><p>下面的servletRegistrationBean 方法主要是增加自定义拦截器，只有后缀为“.zlf”的接口才放行。</p><p>这样两步就简单的实现了接口增加自定义的后缀名了。</p><p>到此为止，springboot 支持跨域的方式就差不多了，当然还有其他的实现方式没有研究。这些希望对大家有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Synchronized关键字和Lock</title>
      <link href="/Java/Synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81Lock%EF%BC%8C%E5%B9%B6%E8%A7%A3%E9%87%8A%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/Java/Synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81Lock%EF%BC%8C%E5%B9%B6%E8%A7%A3%E9%87%8A%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>和名字一样简单，非常简单，直接上代码…</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class FoodFactory &#123;</span><br><span class="line"></span><br><span class="line">    public static Food makeFood(String name) &#123;</span><br><span class="line">        if (name.equals(&quot;noodle&quot;)) &#123;</span><br><span class="line">            Food noodle &#x3D; new LanZhouNoodle();</span><br><span class="line">            noodle.addSpicy(&quot;more&quot;);</span><br><span class="line">            return noodle;</span><br><span class="line">        &#125; else if (name.equals(&quot;chicken&quot;)) &#123;</span><br><span class="line">            Food chicken &#x3D; new HuangMenChicken();</span><br><span class="line">            chicken.addCondiment(&quot;potato&quot;);</span><br><span class="line">            return chicken;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，LanZhouNoodle 和 HuangMenChicken 都继承自 Food。<br>简单地说，简单工厂模式通常就是这样，一个工厂类 XxxFactory，里面有一个静态方法，根据我们不同的参数，返回不同的派生自同一个父类（或实现同一接口）的实例对象。<br>我们强调职责单一原则，一个类只提供一种功能，FoodFactory 的功能就是只要负责生产各种 Food。</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>简单工厂模式很简单，如果它能满足我们的需要，我觉得就不要折腾了。之所以需要引入工厂模式，是因为我们往往需要使用两个或两个以上的工厂。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface FoodFactory &#123;</span><br><span class="line">    Food makeFood(String name);</span><br><span class="line">&#125;</span><br><span class="line">public class ChineseFoodFactory implements FoodFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Food makeFood(String name) &#123;</span><br><span class="line">        if (name.equals(&quot;A&quot;)) &#123;</span><br><span class="line">            return new ChineseFoodA();</span><br><span class="line">        &#125; else if (name.equals(&quot;B&quot;)) &#123;</span><br><span class="line">            return new ChineseFoodB();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class AmericanFoodFactory implements FoodFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Food makeFood(String name) &#123;</span><br><span class="line">        if (name.equals(&quot;A&quot;)) &#123;</span><br><span class="line">            return new AmericanFoodA();</span><br><span class="line">        &#125; else if (name.equals(&quot;B&quot;)) &#123;</span><br><span class="line">            return new AmericanFoodB();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，ChineseFoodA、ChineseFoodB、AmericanFoodA、AmericanFoodB 都派生自 Food。</p><p>客户端调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class APP &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 先选择一个具体的工厂</span><br><span class="line">        FoodFactory factory &#x3D; new ChineseFoodFactory();</span><br><span class="line">        &#x2F;&#x2F; 由第一步的工厂产生具体的对象，不同的工厂造出不一样的对象</span><br><span class="line">        Food food &#x3D; factory.makeFood(&quot;A&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然都是调用 makeFood(“A”) 制作 A 类食物，但是，不同的工厂生产出来的完全不一样。</p><p>第一步，我们需要选取合适的工厂，然后第二步基本上和简单工厂一样。</p><p>核心在于，我们需要在第一步选好我们需要的工厂。比如，我们有 LogFactory 接口，实现类有 FileLogFactory 和 KafkaLogFactory，分别对应将日志写入文件和写入 Kafka 中，显然，我们客户端第一步就需要决定到底要实例化 FileLogFactory 还是 KafkaLogFactory，这将决定之后的所有的操作。</p><p>虽然简单，不过我也把所有的构件都画到一张图上，这样看着比较清晰：<br><img src="/images/gcmoshi.png" alt="alt"></p><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>当涉及到产品族的时候，就需要引入抽象工厂模式了。<br>一个经典的例子是造一台电脑。我们先不引入抽象工厂模式，看看怎么实现。<br>因为电脑是由许多的构件组成的，我们将 CPU 和主板进行抽象，然后 CPU 由 CPUFactory 生产，主板由 MainBoardFactory 生产，然后，我们再将 CPU 和主板搭配起来组合在一起，如下图：<br><img src="/images/cxgc1.png" alt="alt"><br>这个时候的客户端调用是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 得到 Intel 的 CPU</span><br><span class="line">CPUFactory cpuFactory &#x3D; new IntelCPUFactory();</span><br><span class="line">CPU cpu &#x3D; intelCPUFactory.makeCPU();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 得到 AMD 的主板</span><br><span class="line">MainBoardFactory mainBoardFactory &#x3D; new AmdMainBoardFactory();</span><br><span class="line">MainBoard mainBoard &#x3D; mainBoardFactory.make();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 组装 CPU 和主板</span><br><span class="line">Computer computer &#x3D; new Computer(cpu, mainBoard);</span><br></pre></td></tr></table></figure><p>单独看 CPU 工厂和主板工厂，它们分别是前面我们说的工厂模式。这种方式也容易扩展，因为要给电脑加硬盘的话，只需要加一个 HardDiskFactory 和相应的实现即可，不需要修改现有的工厂。</p><p>但是，这种方式有一个问题，那就是如果** Intel 家产的 CPU 和 AMD 产的主板不能兼容使用**，那么这代码就容易出错，因为客户端并不知道它们不兼容，也就会错误地出现随意组合。</p><p>-下面就是我们要说的产品族的概念，它代表了组成某个产品的一系列附件的集合：<br><img src="/images/cxgc2.png" alt="alt"><br>当涉及到这种产品族的问题的时候，就需要抽象工厂模式来支持了。我们不再定义 CPU 工厂、主板工厂、硬盘工厂、显示屏工厂等等，我们直接定义电脑工厂，每个电脑工厂负责生产所有的设备，这样能保证肯定不存在兼容问题。<br>客户端调用：<br><img src="/images/cxgc3.png" alt="alt"><br>这个时候，对于客户端来说，不再需要单独挑选 CPU厂商、主板厂商、硬盘厂商等，直接选择一家品牌工厂，品牌工厂会负责生产所有的东西，而且能保证肯定是兼容可用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    &#x2F;&#x2F; 第一步就要选定一个“大厂”</span><br><span class="line">    ComputerFactory cf &#x3D; new AmdFactory();</span><br><span class="line">    &#x2F;&#x2F; 从这个大厂造 CPU</span><br><span class="line">    CPU cpu &#x3D; cf.makeCPU();</span><br><span class="line">    &#x2F;&#x2F; 从这个大厂造主板</span><br><span class="line">    MainBoard board &#x3D; cf.makeMainBoard();</span><br><span class="line">      &#x2F;&#x2F; 从这个大厂造硬盘</span><br><span class="line">      HardDisk hardDisk &#x3D; cf.makeHardDisk();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 将同一个厂子出来的 CPU、主板、硬盘组装在一起</span><br><span class="line">    Computer result &#x3D; new Computer(cpu, board, hardDisk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，抽象工厂的问题也是显而易见的，比如我们要加个显示器，就需要修改所有的工厂，给所有的工厂都加上制造显示器的方法。这有点违反了对修改关闭，对扩展开放这个设计原则。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程之volatile关键字解析</title>
      <link href="/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Bvolatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90/"/>
      <url>/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Bvolatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>和名字一样简单，非常简单，直接上代码…</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class FoodFactory &#123;</span><br><span class="line"></span><br><span class="line">    public static Food makeFood(String name) &#123;</span><br><span class="line">        if (name.equals(&quot;noodle&quot;)) &#123;</span><br><span class="line">            Food noodle &#x3D; new LanZhouNoodle();</span><br><span class="line">            noodle.addSpicy(&quot;more&quot;);</span><br><span class="line">            return noodle;</span><br><span class="line">        &#125; else if (name.equals(&quot;chicken&quot;)) &#123;</span><br><span class="line">            Food chicken &#x3D; new HuangMenChicken();</span><br><span class="line">            chicken.addCondiment(&quot;potato&quot;);</span><br><span class="line">            return chicken;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，LanZhouNoodle 和 HuangMenChicken 都继承自 Food。<br>简单地说，简单工厂模式通常就是这样，一个工厂类 XxxFactory，里面有一个静态方法，根据我们不同的参数，返回不同的派生自同一个父类（或实现同一接口）的实例对象。<br>我们强调职责单一原则，一个类只提供一种功能，FoodFactory 的功能就是只要负责生产各种 Food。</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>简单工厂模式很简单，如果它能满足我们的需要，我觉得就不要折腾了。之所以需要引入工厂模式，是因为我们往往需要使用两个或两个以上的工厂。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface FoodFactory &#123;</span><br><span class="line">    Food makeFood(String name);</span><br><span class="line">&#125;</span><br><span class="line">public class ChineseFoodFactory implements FoodFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Food makeFood(String name) &#123;</span><br><span class="line">        if (name.equals(&quot;A&quot;)) &#123;</span><br><span class="line">            return new ChineseFoodA();</span><br><span class="line">        &#125; else if (name.equals(&quot;B&quot;)) &#123;</span><br><span class="line">            return new ChineseFoodB();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class AmericanFoodFactory implements FoodFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Food makeFood(String name) &#123;</span><br><span class="line">        if (name.equals(&quot;A&quot;)) &#123;</span><br><span class="line">            return new AmericanFoodA();</span><br><span class="line">        &#125; else if (name.equals(&quot;B&quot;)) &#123;</span><br><span class="line">            return new AmericanFoodB();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，ChineseFoodA、ChineseFoodB、AmericanFoodA、AmericanFoodB 都派生自 Food。</p><p>客户端调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class APP &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 先选择一个具体的工厂</span><br><span class="line">        FoodFactory factory &#x3D; new ChineseFoodFactory();</span><br><span class="line">        &#x2F;&#x2F; 由第一步的工厂产生具体的对象，不同的工厂造出不一样的对象</span><br><span class="line">        Food food &#x3D; factory.makeFood(&quot;A&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然都是调用 makeFood(“A”) 制作 A 类食物，但是，不同的工厂生产出来的完全不一样。</p><p>第一步，我们需要选取合适的工厂，然后第二步基本上和简单工厂一样。</p><p>核心在于，我们需要在第一步选好我们需要的工厂。比如，我们有 LogFactory 接口，实现类有 FileLogFactory 和 KafkaLogFactory，分别对应将日志写入文件和写入 Kafka 中，显然，我们客户端第一步就需要决定到底要实例化 FileLogFactory 还是 KafkaLogFactory，这将决定之后的所有的操作。</p><p>虽然简单，不过我也把所有的构件都画到一张图上，这样看着比较清晰：<br><img src="/images/gcmoshi.png" alt="alt"></p><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>当涉及到产品族的时候，就需要引入抽象工厂模式了。<br>一个经典的例子是造一台电脑。我们先不引入抽象工厂模式，看看怎么实现。<br>因为电脑是由许多的构件组成的，我们将 CPU 和主板进行抽象，然后 CPU 由 CPUFactory 生产，主板由 MainBoardFactory 生产，然后，我们再将 CPU 和主板搭配起来组合在一起，如下图：<br><img src="/images/cxgc1.png" alt="alt"><br>这个时候的客户端调用是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 得到 Intel 的 CPU</span><br><span class="line">CPUFactory cpuFactory &#x3D; new IntelCPUFactory();</span><br><span class="line">CPU cpu &#x3D; intelCPUFactory.makeCPU();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 得到 AMD 的主板</span><br><span class="line">MainBoardFactory mainBoardFactory &#x3D; new AmdMainBoardFactory();</span><br><span class="line">MainBoard mainBoard &#x3D; mainBoardFactory.make();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 组装 CPU 和主板</span><br><span class="line">Computer computer &#x3D; new Computer(cpu, mainBoard);</span><br></pre></td></tr></table></figure><p>单独看 CPU 工厂和主板工厂，它们分别是前面我们说的工厂模式。这种方式也容易扩展，因为要给电脑加硬盘的话，只需要加一个 HardDiskFactory 和相应的实现即可，不需要修改现有的工厂。</p><p>但是，这种方式有一个问题，那就是如果** Intel 家产的 CPU 和 AMD 产的主板不能兼容使用**，那么这代码就容易出错，因为客户端并不知道它们不兼容，也就会错误地出现随意组合。</p><p>-下面就是我们要说的产品族的概念，它代表了组成某个产品的一系列附件的集合：<br><img src="/images/cxgc2.png" alt="alt"><br>当涉及到这种产品族的问题的时候，就需要抽象工厂模式来支持了。我们不再定义 CPU 工厂、主板工厂、硬盘工厂、显示屏工厂等等，我们直接定义电脑工厂，每个电脑工厂负责生产所有的设备，这样能保证肯定不存在兼容问题。<br>客户端调用：<br><img src="/images/cxgc3.png" alt="alt"><br>这个时候，对于客户端来说，不再需要单独挑选 CPU厂商、主板厂商、硬盘厂商等，直接选择一家品牌工厂，品牌工厂会负责生产所有的东西，而且能保证肯定是兼容可用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    &#x2F;&#x2F; 第一步就要选定一个“大厂”</span><br><span class="line">    ComputerFactory cf &#x3D; new AmdFactory();</span><br><span class="line">    &#x2F;&#x2F; 从这个大厂造 CPU</span><br><span class="line">    CPU cpu &#x3D; cf.makeCPU();</span><br><span class="line">    &#x2F;&#x2F; 从这个大厂造主板</span><br><span class="line">    MainBoard board &#x3D; cf.makeMainBoard();</span><br><span class="line">      &#x2F;&#x2F; 从这个大厂造硬盘</span><br><span class="line">      HardDisk hardDisk &#x3D; cf.makeHardDisk();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 将同一个厂子出来的 CPU、主板、硬盘组装在一起</span><br><span class="line">    Computer result &#x3D; new Computer(cpu, board, hardDisk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，抽象工厂的问题也是显而易见的，比如我们要加个显示器，就需要修改所有的工厂，给所有的工厂都加上制造显示器的方法。这有点违反了对修改关闭，对扩展开放这个设计原则。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路—设计模式（七）</title>
      <link href="/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p>责任链通常需要先建立一个单向链表，然后调用方只需要调用头部节点就可以了，后面会自动流转下去。比如流程审批就是一个很好的例子，只要终端用户提交申请，根据申请的内容信息，自动建立一条责任链，然后就可以开始流转了</p><p>有这么一个场景，用户参加一个活动可以领取奖品，但是活动需要进行很多的规则校验然后才能放行，比如首先需要校验用户是否是新用户、今日参与人数是否有限额、全场参与人数是否有限额等等。设定的规则都通过后，才能让用户领走奖品。</p><p>如果产品给你这个需求的话，我想大部分人一开始肯定想的就是，用一个 List 来存放所有的规则，然后 foreach 执行一下每个规则就好了。不过，读者也先别急，看看责任链模式和我们说的这个有什么不一样？</p><p>首先，我们要定义流程上节点的基类：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public abstract class RuleHandler &#123;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 后继节点</span><br><span class="line">    protected RuleHandler successor;</span><br><span class="line"></span><br><span class="line">    public abstract void apply(Context context);</span><br><span class="line"></span><br><span class="line">    public void setSuccessor(RuleHandler successor) &#123;</span><br><span class="line">        this.successor &#x3D; successor;</span><br><span class="line">    &#125;</span><br><span class="line">    public RuleHandler getSuccessor() &#123;</span><br><span class="line">        return successor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们需要定义具体的每个节点了。</p><p>校验用户是否是新用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class NewUserRuleHandler extends RuleHandler &#123;</span><br><span class="line"></span><br><span class="line">    public void apply(Context context) &#123;</span><br><span class="line">        if (context.isNewUser()) &#123;</span><br><span class="line">              &#x2F;&#x2F; 如果有后继节点的话，传递下去</span><br><span class="line">            if (this.getSuccessor() !&#x3D; null) &#123;</span><br><span class="line">                this.getSuccessor().apply(context);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new RuntimeException(&quot;该活动仅限新用户参与&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>校验用户所在地区是否可以参与：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class LocationRuleHandler extends RuleHandler &#123;</span><br><span class="line">    public void apply(Context context) &#123;</span><br><span class="line">        boolean allowed &#x3D; activityService.isSupportedLocation(context.getLocation);</span><br><span class="line">          if (allowed) &#123;</span><br><span class="line">            if (this.getSuccessor() !&#x3D; null) &#123;</span><br><span class="line">                this.getSuccessor().apply(context);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else  &#123;</span><br><span class="line">            throw new RuntimeException(&quot;非常抱歉，您所在的地区无法参与本次活动&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>校验奖品是否已领完：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class LimitRuleHandler extends RuleHandler &#123;</span><br><span class="line">    public void apply(Context context) &#123;</span><br><span class="line">          int remainedTimes &#x3D; activityService.queryRemainedTimes(context); &#x2F;&#x2F; 查询剩余奖品</span><br><span class="line">        if (remainedTimes &gt; 0) &#123;</span><br><span class="line">            if (this.getSuccessor() !&#x3D; null) &#123;</span><br><span class="line">                this.getSuccessor().apply(userInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new RuntimeException(&quot;您来得太晚了，奖品被领完了&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码其实很简单，就是先定义好一个链表，然后在通过任意一节点后，如果此节点有后继节点，那么传递下去。</p><h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><p>在含有继承结构的代码中，模板方法模式是非常常用的，这也是在开源代码中大量被使用的。</p><p>通常会有一个抽象类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public abstract class AbstractTemplate &#123;</span><br><span class="line">    &#x2F;&#x2F; 这就是模板方法</span><br><span class="line">      public void templateMethod()&#123;</span><br><span class="line">        init();</span><br><span class="line">        apply(); &#x2F;&#x2F; 这个是重点</span><br><span class="line">        end(); &#x2F;&#x2F; 可以作为钩子方法</span><br><span class="line">    &#125;</span><br><span class="line">    protected void init() &#123;</span><br><span class="line">        System.out.println(&quot;init 抽象层已经实现，子类也可以选择覆写&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">      &#x2F;&#x2F; 留给子类实现</span><br><span class="line">    protected abstract void apply();</span><br><span class="line">    protected void end() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板方法中调用了 3 个方法，其中 apply() 是抽象方法，子类必须实现它，其实模板方法中有几个抽象方法完全是自由的，我们也可以将三个方法都设置为抽象方法，让子类来实现。也就是说，模板方法只负责定义第一步应该要做什么，第二步应该做什么，第三步应该做什么，至于怎么做，由子类来实现。<br>我们写一个实现类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class ConcreteTemplate extends AbstractTemplate &#123;</span><br><span class="line">    public void apply() &#123;</span><br><span class="line">        System.out.println(&quot;子类实现抽象方法 apply&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">      public void end() &#123;</span><br><span class="line">        System.out.println(&quot;我们可以把 method3 当做钩子方法来使用，需要的时候覆写就可以了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    AbstractTemplate t &#x3D; new ConcreteTemplate();</span><br><span class="line">      &#x2F;&#x2F; 调用模板方法</span><br><span class="line">      t.templateMethod();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><p>说一个简单的例子。商品库存中心有个最基本的需求是减库存和补库存，我们看看怎么用状态模式来写。<br>核心在于，我们的关注点不再是 Context 是该进行哪种操作，而是关注在这个 Context 会有哪些操作。</p><p>定义状态接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface State &#123;</span><br><span class="line">   public void doAction(Context context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义减库存的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class DeductState implements State &#123;</span><br><span class="line"></span><br><span class="line">   public void doAction(Context context) &#123;</span><br><span class="line">      System.out.println(&quot;商品卖出，准备减库存&quot;);</span><br><span class="line">      context.setState(this);</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;... 执行减库存的具体操作</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String toString()&#123;</span><br><span class="line">      return &quot;Deduct State&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义补库存状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class RevertState implements State &#123;</span><br><span class="line">    public void doAction(Context context) &#123;</span><br><span class="line">        System.out.println(&quot;给此商品补库存&quot;);</span><br><span class="line">          context.setState(this);</span><br><span class="line"></span><br><span class="line">          &#x2F;&#x2F;... 执行加库存的具体操作</span><br><span class="line">    &#125;</span><br><span class="line">      public String toString() &#123;</span><br><span class="line">        return &quot;Revert State&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面用到了 context.setState(this)，我们来看看怎么定义 Context 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Context &#123;</span><br><span class="line">    private State state;</span><br><span class="line">      private String name;</span><br><span class="line">      public Context(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      public void setState(State state) &#123;</span><br><span class="line">        this.state &#x3D; state;</span><br><span class="line">    &#125;</span><br><span class="line">      public void getState() &#123;</span><br><span class="line">        return this.state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看下客户端调用，大家就一清二楚了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    &#x2F;&#x2F; 我们需要操作的是 iPhone X</span><br><span class="line">    Context context &#x3D; new Context(&quot;iPhone X&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 看看怎么进行补库存操作</span><br><span class="line">      State revertState &#x3D; new RevertState();</span><br><span class="line">      revertState.doAction(context);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 同样的，减库存操作也非常简单</span><br><span class="line">      State deductState &#x3D; new DeductState();</span><br><span class="line">      deductState.doAction(context);</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 如果需要我们可以获取当前的状态</span><br><span class="line">    &#x2F;&#x2F; context.getState().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们不关心当前 context 处于什么状态，那么 Context 就可以不用维护 state 属性了，那样代码会简单很多。<br>不过，商品库存这个例子毕竟只是个例，我们还有很多实例是需要知道当前 context 处于什么状态的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路—设计模式（六）</title>
      <link href="/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>策略模式同样也是最常用的设计模式之一<br>下面设计的场景是，我们需要画一个图形，可选的策略就是用红色笔来画，还是绿色笔来画，或者蓝色笔来画。</p><p>首先，先定义一个策略接口：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface Strategy &#123;</span><br><span class="line">   public void draw(int radius, int x, int y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们定义具体的几个策略：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class RedPen implements Strategy &#123;</span><br><span class="line">   @Override</span><br><span class="line">   public void draw(int radius, int x, int y) &#123;</span><br><span class="line">      System.out.println(&quot;用红色笔画图，radius:&quot; + radius + &quot;, x:&quot; + x + &quot;, y:&quot; + y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class GreenPen implements Strategy &#123;</span><br><span class="line">   @Override</span><br><span class="line">   public void draw(int radius, int x, int y) &#123;</span><br><span class="line">      System.out.println(&quot;用绿色笔画图，radius:&quot; + radius + &quot;, x:&quot; + x + &quot;, y:&quot; + y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class BluePen implements Strategy &#123;</span><br><span class="line">   @Override</span><br><span class="line">   public void draw(int radius, int x, int y) &#123;</span><br><span class="line">      System.out.println(&quot;用蓝色笔画图，radius:&quot; + radius + &quot;, x:&quot; + x + &quot;, y:&quot; + y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用策略的类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Context &#123;</span><br><span class="line">   private Strategy strategy;</span><br><span class="line"></span><br><span class="line">   public Context(Strategy strategy)&#123;</span><br><span class="line">      this.strategy &#x3D; strategy;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public int executeDraw(int radius, int x, int y)&#123;</span><br><span class="line">      return strategy.draw(radius, x, y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Context context &#x3D; new Context(new BluePen()); &#x2F;&#x2F; 使用绿色笔来画</span><br><span class="line">      context.executeDraw(10, 0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放到一张图上，让大家看得清晰些：<br><img src="/images/celv1.png" alt="alt"><br>这个时候，大家有没有联想到结构型模式中的桥梁模式，它们其实非常相似，我把桥梁模式的图拿过来大家对比下：<br><img src="/images/celv2.png" alt="alt"><br>要我说的话，它们非常相似，桥梁模式在左侧加了一层抽象而已。桥梁模式的耦合更低，结构更复杂一些。</p><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式相对简单。无外乎两个操作，观察者订阅自己关心的主题和主题有数据变化后通知观察者们。</p><p>首先，需要定义主题，每个主题需要持有观察者列表的引用，用于在数据变更的时候通知各个观察者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Subject &#123;</span><br><span class="line"></span><br><span class="line">   private List&lt;Observer&gt; observers &#x3D; new ArrayList&lt;Observer&gt;();</span><br><span class="line">   private int state;</span><br><span class="line"></span><br><span class="line">   public int getState() &#123;</span><br><span class="line">      return state;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setState(int state) &#123;</span><br><span class="line">      this.state &#x3D; state;</span><br><span class="line">      &#x2F;&#x2F; 数据已变更，通知观察者们</span><br><span class="line">      notifyAllObservers();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void attach(Observer observer)&#123;</span><br><span class="line">      observers.add(observer);        </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 通知观察者们</span><br><span class="line">   public void notifyAllObservers()&#123;</span><br><span class="line">      for (Observer observer : observers) &#123;</span><br><span class="line">         observer.update();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义观察者接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public abstract class Observer &#123;</span><br><span class="line">   protected Subject subject;</span><br><span class="line">   public abstract void update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实如果只有一个观察者类的话，接口都不用定义了，不过，通常场景下，既然用到了观察者模式，我们就是希望一个事件出来了，会有多个不同的类需要处理相应的信息。比如，订单修改成功事件，我们希望发短信的类得到通知、发邮件的类得到通知、处理物流信息的类得到通知等。</p><p>我们来定义具体的几个观察者类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class BinaryObserver extends Observer &#123;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 在构造方法中进行订阅主题</span><br><span class="line">    public BinaryObserver(Subject subject) &#123;</span><br><span class="line">        this.subject &#x3D; subject;</span><br><span class="line">        &#x2F;&#x2F; 通常在构造方法中将 this 发布出去的操作一定要小心</span><br><span class="line">        this.subject.attach(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 该方法由主题类在数据变更的时候进行调用</span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        String result &#x3D; Integer.toBinaryString(subject.getState());</span><br><span class="line">        System.out.println(&quot;订阅的数据发生变化，新的数据处理为二进制值为：&quot; + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class HexaObserver extends Observer &#123;</span><br><span class="line"></span><br><span class="line">    public HexaObserver(Subject subject) &#123;</span><br><span class="line">        this.subject &#x3D; subject;</span><br><span class="line">        this.subject.attach(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">          String result &#x3D; Integer.toHexString(subject.getState()).toUpperCase();</span><br><span class="line">        System.out.println(&quot;订阅的数据发生变化，新的数据处理为十六进制值为：&quot; + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端使用也非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    &#x2F;&#x2F; 先定义一个主题</span><br><span class="line">      Subject subject1 &#x3D; new Subject();</span><br><span class="line">      &#x2F;&#x2F; 定义观察者</span><br><span class="line">      new BinaryObserver(subject1);</span><br><span class="line">      new HexaObserver(subject1);</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 模拟数据变更，这个时候，观察者们的 update 方法将会被调用</span><br><span class="line">      subject.setState(11);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际生产过程中，观察者模式往往用消息中间件来实现</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路—设计模式（五）</title>
      <link href="/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h1><p>要把装饰模式说清楚明白，不是件容易的事情。 Java IO 中的几个类是典型的装饰模式的应用。</p><p>首先，我们先看一个简单的图，看这个图的时候，了解下层次结构就可以了：</p><a id="more"></a><p><img src="/images/zhuangshi.png" alt="alt"><br>我们来说说装饰模式的出发点，从图中可以看到，接口 Component其实已经有了 ConcreteComponentA 和 ConcreteComponentB 两个实现类了，但是，如果我们要增强这两个实现类的话，我们就可以采用装饰模式，用具体的装饰器来装饰实现类，以达到增强的目的。<br>从名字来简单解释下装饰器。既然说是装饰，那么往往就是添加小功能这种，而且，我们要满足可以添加多个小功能。最简单的，代理模式就可以实现功能的增强，但是代理不容易实现多个功能的增强，当然你可以说用代理包装代理的方式，但是那样的话代码就复杂了。</p><p>首先明白一些简单的概念，从图中我们看到，所有的具体装饰者们 ConcreteDecorator</p><p>都可以作为 Component 来使用，因为它们都实现了 Component 中的所有接口。它们和 Component 实现类 ConcreteComponent 的区别是，它们只是装饰者，起装饰作用，也就是即使它们看上去牛逼轰轰，但是它们都只是在具体的实现中加了层皮来装饰而已。</p><p>下面来看看一个例子，先把装饰模式弄清楚，然后再介绍下 java io 中的装饰模式的应用。</p><p>最近大街上流行起来了“快乐柠檬”，我们把快乐柠檬的饮料分为三类：红茶、绿茶、咖啡，在这三大类的基础上，又增加了许多的口味，什么金桔柠檬红茶、金桔柠檬珍珠绿茶、芒果红茶、芒果绿茶、芒果珍珠红茶、烤珍珠红茶、烤珍珠芒果绿茶、椰香胚芽咖啡、焦糖可可咖啡等等，每家店都有很长的菜单，但是仔细看下，其实原料也没几样，但是可以搭配出很多组合，如果顾客需要，很多没出现在菜单中的饮料他们也是可以做的。</p><p>在这个例子中，红茶、绿茶、咖啡是最基础的饮料，其他的像金桔柠檬、芒果、珍珠、椰果、焦糖等都属于装饰用的。当然，在开发中，我们确实可以像门店一样，开发这些类：LemonBlackTea、LemonGreenTea、MangoBlackTea、MangoLemonGreenTea……但是，很快我们就发现，这样子干肯定是不行的，这会导致我们需要组合出所有的可能，而且如果客人需要在红茶中加双份柠檬怎么办？三份柠檬怎么办？万一有个变态要四份柠檬，所以这种做法是给自己找加班的。</p><p>不说废话了，上代码。</p><p>首先，定义饮料抽象基类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public abstract class Beverage &#123;</span><br><span class="line">      &#x2F;&#x2F; 返回描述</span><br><span class="line">      public abstract String getDescription();</span><br><span class="line">      &#x2F;&#x2F; 返回价格</span><br><span class="line">      public abstract double cost();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是三个基础饮料实现类，红茶、绿茶和咖啡：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class BlackTea extends Beverage &#123;</span><br><span class="line">      public String getDescription() &#123;</span><br><span class="line">        return &quot;红茶&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">      public double cost() &#123;</span><br><span class="line">        return 10;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class GreenTea extends Beverage &#123;</span><br><span class="line">    public String getDescription() &#123;</span><br><span class="line">        return &quot;绿茶&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">      public double cost() &#123;</span><br><span class="line">        return 11;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...&#x2F;&#x2F; 咖啡省略</span><br></pre></td></tr></table></figure><p>定义调料，也就是装饰者的基类，此类必须继承自 Beverage：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 调料</span><br><span class="line">public abstract class Condiment extends Beverage &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们来定义柠檬、芒果等具体的调料，它们属于装饰者，毫无疑问，这些调料肯定都需要继承 Condiment 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Lemon extends Condiment &#123;</span><br><span class="line">    private Beverage bevarage;</span><br><span class="line">      &#x2F;&#x2F; 这里很关键，需要传入具体的饮料，如需要传入没有被装饰的红茶或绿茶，</span><br><span class="line">      &#x2F;&#x2F; 当然也可以传入已经装饰好的芒果绿茶，这样可以做芒果柠檬绿茶</span><br><span class="line">      public Lemon(Beverage bevarage) &#123;</span><br><span class="line">        this.bevarage &#x3D; bevarage;</span><br><span class="line">    &#125;</span><br><span class="line">      public String getDescription() &#123;</span><br><span class="line">        &#x2F;&#x2F; 装饰</span><br><span class="line">        return bevarage.getDescription() + &quot;, 加柠檬&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">      public double cost() &#123;</span><br><span class="line">          &#x2F;&#x2F; 装饰</span><br><span class="line">        return beverage.cost() + 2; &#x2F;&#x2F; 加柠檬需要 2 元</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Mango extends Condiment &#123;</span><br><span class="line">    private Beverage bevarage;</span><br><span class="line">      public Mango(Beverage bevarage) &#123;</span><br><span class="line">        this.bevarage &#x3D; bevarage;</span><br><span class="line">    &#125;</span><br><span class="line">      public String getDescription() &#123;</span><br><span class="line">        return bevarage.getDescription() + &quot;, 加芒果&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">      public double cost() &#123;</span><br><span class="line">        return beverage.cost() + 3; &#x2F;&#x2F; 加芒果需要 3 元</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...&#x2F;&#x2F; 给每一种调料都加一个类</span><br></pre></td></tr></table></figure><p>看客户端调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">      &#x2F;&#x2F; 首先，我们需要一个基础饮料，红茶、绿茶或咖啡</span><br><span class="line">    Beverage beverage &#x3D; new GreenTea();</span><br><span class="line">      &#x2F;&#x2F; 开始装饰</span><br><span class="line">      beverage &#x3D; new Lemon(beverage); &#x2F;&#x2F; 先加一份柠檬</span><br><span class="line">      beverage &#x3D; new Mongo(beverage); &#x2F;&#x2F; 再加一份芒果</span><br><span class="line"></span><br><span class="line">      System.out.println(beverage.getDescription() + &quot; 价格：￥&quot; + beverage.cost());</span><br><span class="line">      &#x2F;&#x2F;&quot;绿茶, 加柠檬, 加芒果 价格：￥16&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们需要芒果珍珠双份柠檬红茶：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Beverage beverage &#x3D; new Mongo(new Pearl(new Lemon(new Lemon(new BlackTea()))));</span><br></pre></td></tr></table></figure><p>是不是很变态？</p><p>看看下图可能会清晰一些：<br><img src="/images/zhuangshi2.png" alt="alt"><br>到这里，大家应该已经清楚装饰模式了吧。<br>下面，我们再来说说 java IO 中的装饰模式。看下图 InputStream 派生出来的部分类<br><img src="/images/zhuangshi3.png" alt="alt"><br>我们知道 InputStream 代表了输入流，具体的输入来源可以是文件（FileInputStream）、管道（PipedInputStream）、数组（ByteArrayInputStream）等，这些就像前面奶茶的例子中的红茶、绿茶，属于基础输入流。</p><p>FilterInputStream 承接了装饰模式的关键节点，其实现类是一系列装饰器，比如 BufferedInputStream 代表用缓冲来装饰，也就使得输入流具有了缓冲的功能，LineNumberInputStream 代表用行号来装饰，在操作的时候就可以取得行号了，DataInputStream 的装饰，使得我们可以从输入流转换为 java 中的基本类型值。</p><h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><p>门英文是 Flyweight Pattern，不知道是谁最先翻译的这个词，感觉这翻译真的不好理解，我们试着强行关联起来吧。Flyweight 是轻量级的意思，享元分开来说就是 共享 元器件，也就是复用已经生成的对象，这种做法当然也就是轻量级的了。</p><p>复用对象最简单的方式是，用一个 HashMap 来存放每次新生成的对象。每次需要一个对象的时候，先到 HashMap 中看看有没有，如果没有，再生成新的对象，然后将这个对象放入 HashMap 中。<br>门面模式的优点显而易见，客户端不再需要关注实例化时应该使用哪个实现类，直接调用门面提供的方法就可以了，因为门面类提供的方法的方法名对于客户端来说已经很友好了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路—设计模式（四）</title>
      <link href="/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="桥梁模式"><a href="#桥梁模式" class="headerlink" title="桥梁模式"></a>桥梁模式</h1><p>理解桥梁模式，其实就是理解代码抽象和解耦。</p><p>我们首先需要一个桥梁，它是一个接口，定义提供的接口方法。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface DrawAPI &#123;</span><br><span class="line">   public void draw(int radius, int x, int y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是一系列实现类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class RedPen implements DrawAPI &#123;</span><br><span class="line">   @Override</span><br><span class="line">   public void draw(int radius, int x, int y) &#123;</span><br><span class="line">      System.out.println(&quot;用红色笔画图，radius:&quot; + radius + &quot;, x:&quot; + x + &quot;, y:&quot; + y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class GreenPen implements DrawAPI &#123;</span><br><span class="line">   @Override</span><br><span class="line">   public void draw(int radius, int x, int y) &#123;</span><br><span class="line">      System.out.println(&quot;用绿色笔画图，radius:&quot; + radius + &quot;, x:&quot; + x + &quot;, y:&quot; + y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class BluePen implements DrawAPI &#123;</span><br><span class="line">   @Override</span><br><span class="line">   public void draw(int radius, int x, int y) &#123;</span><br><span class="line">      System.out.println(&quot;用蓝色笔画图，radius:&quot; + radius + &quot;, x:&quot; + x + &quot;, y:&quot; + y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个抽象类，此类的实现类都需要使用 DrawAPI：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public abstract class Shape &#123;</span><br><span class="line">   protected DrawAPI drawAPI;</span><br><span class="line"></span><br><span class="line">   protected Shape(DrawAPI drawAPI)&#123;</span><br><span class="line">      this.drawAPI &#x3D; drawAPI;</span><br><span class="line">   &#125;</span><br><span class="line">   public abstract void draw();    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义抽象类的子类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 圆形</span><br><span class="line">public class Circle extends Shape &#123;</span><br><span class="line">   private int radius;</span><br><span class="line"></span><br><span class="line">   public Circle(int radius, DrawAPI drawAPI) &#123;</span><br><span class="line">      super(drawAPI);</span><br><span class="line">      this.radius &#x3D; radius;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void draw() &#123;</span><br><span class="line">      drawAPI.draw(radius, 0, 0);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 长方形</span><br><span class="line">public class Rectangle extends Shape &#123;</span><br><span class="line">    private int x;</span><br><span class="line">      private int y;</span><br><span class="line"></span><br><span class="line">      public Rectangle(int x, int y, DrawAPI drawAPI) &#123;</span><br><span class="line">        super(drawAPI);</span><br><span class="line">          this.x &#x3D; x;</span><br><span class="line">          this.y &#x3D; y;</span><br><span class="line">    &#125;</span><br><span class="line">      public void draw() &#123;</span><br><span class="line">      drawAPI.draw(0, x, y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们来看客户端演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Shape greenCircle &#x3D; new Circle(10, new GreenPen());</span><br><span class="line">      Shape redRectangle &#x3D; new Rectangle(4, 8, new RedPen());</span><br><span class="line"></span><br><span class="line">      greenCircle.draw();</span><br><span class="line">      redRectangle.draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能大家看上面一步步还不是特别清晰，我把所有的东西整合到一张图上：<br><img src="/images/qiaoliang.png" alt="alt"><br>桥梁模式的优点也是显而易见的，就是非常容易进行扩展。</p><h1 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h1><p>门面模式（也叫外观模式，Facade Pattern）在许多源码中有使用，比如 slf4j 就可以理解为是门面模式的应用。这是一个简单的设计模式，我们直接上代码再说吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface Shape &#123;</span><br><span class="line">   void draw();</span><br><span class="line">&#125;</span><br><span class="line">public class Circle implements Shape &#123;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void draw() &#123;</span><br><span class="line">      System.out.println(&quot;Circle::draw()&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Rectangle implements Shape &#123;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void draw() &#123;</span><br><span class="line">      System.out.println(&quot;Rectangle::draw()&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    &#x2F;&#x2F; 画一个圆形</span><br><span class="line">      Shape circle &#x3D; new Circle();</span><br><span class="line">      circle.draw();</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 画一个长方形</span><br><span class="line">      Shape rectangle &#x3D; new Rectangle();</span><br><span class="line">      rectangle.draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是我们常写的代码，我们需要画圆就要先实例化圆，画长方形就需要先实例化一个长方形，然后再调用相应的 draw() 方法。</p><p>下面，我们看看怎么用门面模式来让客户端调用更加友好一些。</p><p>我们先定义一个门面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class ShapeMaker &#123;</span><br><span class="line">   private Shape circle;</span><br><span class="line">   private Shape rectangle;</span><br><span class="line">   private Shape square;</span><br><span class="line"></span><br><span class="line">   public ShapeMaker() &#123;</span><br><span class="line">      circle &#x3D; new Circle();</span><br><span class="line">      rectangle &#x3D; new Rectangle();</span><br><span class="line">      square &#x3D; new Square();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 下面定义一堆方法，具体应该调用什么方法，由这个门面来决定</span><br><span class="line">   *&#x2F;</span><br><span class="line"></span><br><span class="line">   public void drawCircle()&#123;</span><br><span class="line">      circle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">   public void drawRectangle()&#123;</span><br><span class="line">      rectangle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">   public void drawSquare()&#123;</span><br><span class="line">      square.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看现在客户端怎么调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">  ShapeMaker shapeMaker &#x3D; new ShapeMaker();</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 客户端调用现在更加清晰了</span><br><span class="line">  shapeMaker.drawCircle();</span><br><span class="line">  shapeMaker.drawRectangle();</span><br><span class="line">  shapeMaker.drawSquare();        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>门面模式的优点显而易见，客户端不再需要关注实例化时应该使用哪个实现类，直接调用门面提供的方法就可以了，因为门面类提供的方法的方法名对于客户端来说已经很友好了。</p><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>组合模式用于表示具有层次结构的数据，使得我们对单个对象和组合对象的访问具有一致性。<br>直接看一个例子吧，每个员工都有姓名、部门、薪水这些属性，同时还有下属员工集合（虽然可能集合为空），而下属员工和自己的结构是一样的，也有姓名、部门这些属性，同时也有他们的下属员工集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Employee &#123;</span><br><span class="line">   private String name;</span><br><span class="line">   private String dept;</span><br><span class="line">   private int salary;</span><br><span class="line">   private List&lt;Employee&gt; subordinates; &#x2F;&#x2F; 下属</span><br><span class="line"></span><br><span class="line">   public Employee(String name,String dept, int sal) &#123;</span><br><span class="line">      this.name &#x3D; name;</span><br><span class="line">      this.dept &#x3D; dept;</span><br><span class="line">      this.salary &#x3D; sal;</span><br><span class="line">      subordinates &#x3D; new ArrayList&lt;Employee&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void add(Employee e) &#123;</span><br><span class="line">      subordinates.add(e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void remove(Employee e) &#123;</span><br><span class="line">      subordinates.remove(e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public List&lt;Employee&gt; getSubordinates()&#123;</span><br><span class="line">     return subordinates;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String toString()&#123;</span><br><span class="line">      return (&quot;Employee :[ Name : &quot; + name + &quot;, dept : &quot; + dept + &quot;, salary :&quot; + salary+&quot; ]&quot;);</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常，这种类需要定义 add(node)、remove(node)、getChildren() 这些方法。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路—设计模式（三）</title>
      <link href="/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理模式也是最为常用的设计模式之一，用一个代理来隐藏具体实现类的实现细节，通常还用于在真实的实现的前后添加一部分逻辑。<br>既然说是代理，那就要对客户端隐藏真实实现，由代理来负责客户端的所有请求。当然，代理只是个代理，它不会完成实际的业务逻辑，而是一层皮而已，但是对于客户端来说，它必须表现得就是客户端需要的真实实现。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface FoodService &#123;</span><br><span class="line">    Food makeChicken();</span><br><span class="line">    Food makeNoodle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class FoodServiceImpl implements FoodService &#123;</span><br><span class="line">    public Food makeChicken() &#123;</span><br><span class="line">          Food f &#x3D; new Chicken()</span><br><span class="line">        f.setChicken(&quot;1kg&quot;);</span><br><span class="line">          f.setSpicy(&quot;1g&quot;);</span><br><span class="line">          f.setSalt(&quot;3g&quot;);</span><br><span class="line">        return f;</span><br><span class="line">    &#125;</span><br><span class="line">    public Food makeNoodle() &#123;</span><br><span class="line">        Food f &#x3D; new Noodle();</span><br><span class="line">        f.setNoodle(&quot;500g&quot;);</span><br><span class="line">        f.setSalt(&quot;5g&quot;);</span><br><span class="line">        return f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 代理要表现得“就像是”真实实现类，所以需要实现 FoodService</span><br><span class="line">public class FoodServiceProxy implements FoodService &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 内部一定要有一个真实的实现类，当然也可以通过构造方法注入</span><br><span class="line">    private FoodService foodService &#x3D; new FoodServiceImpl();</span><br><span class="line"></span><br><span class="line">    public Food makeChicken() &#123;</span><br><span class="line">        System.out.println(&quot;我们马上要开始制作鸡肉了&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果我们定义这句为核心代码的话，那么，核心代码是真实实现类做的，</span><br><span class="line">        &#x2F;&#x2F; 代理只是在核心代码前后做些“无足轻重”的事情</span><br><span class="line">        Food food &#x3D; foodService.makeChicken();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;鸡肉制作完成啦，加点胡椒粉&quot;); &#x2F;&#x2F; 增强</span><br><span class="line">          food.addCondiment(&quot;pepper&quot;);</span><br><span class="line"></span><br><span class="line">        return food;</span><br><span class="line">    &#125;</span><br><span class="line">    public Food makeNoodle() &#123;</span><br><span class="line">        System.out.println(&quot;准备制作拉面~&quot;);</span><br><span class="line">        Food food &#x3D; foodService.makeNoodle();</span><br><span class="line">        System.out.println(&quot;制作完成啦&quot;)</span><br><span class="line">        return food;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用，注意，我们要用代理来实例化接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 这里用代理类来实例化</span><br><span class="line">FoodService foodService &#x3D; new FoodServiceProxy();</span><br><span class="line">foodService.makeChicken();</span><br></pre></td></tr></table></figure><p><img src="/images/daili.png" alt="alt"><br>代理模式说白了就是做 “方法包装” 或做 “方法增强”。在面向切面编程中，其实就是动态代理的过程。比如 Spring 中，我们自己不定义代理类，但是 Spring 会帮我们动态来定义代理，然后把我们定义在 @Before、@After、@Around 中的代码逻辑动态添加到代理中。</p><p>说到动态代理，又可以展开说 …… Spring 中实现动态代理有两种，一种是如果我们的类定义了接口，如 UserService 接口和 UserServiceImpl 实现，那么采用 JDK 的动态代理，感兴趣的读者可以去看看 java.lang.reflect.Proxy 类的源码；另一种是我们自己没有定义接口的，Spring 会采用 CGLIB 进行动态代理，它是一个 jar 包，性能还不错。</p><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>说完代理模式，说适配器模式，是因为它们很相似，这里可以做个比较。<br>适配器模式做的就是，有一个接口需要实现，但是我们现成的对象都不满足，需要加一层适配器来进行适配<br>适配器模式总体来说分三种：默认适配器模式、对象适配器模式、类适配器模式。先不急着分清楚这几个，先看看例子再说。</p><h2 id="默认适配器模式"><a href="#默认适配器模式" class="headerlink" title="默认适配器模式"></a>默认适配器模式</h2><p>首先，我们先看看最简单的适配器模式默认适配器模式(Default Adapter)是怎么样的。<br>我们用 Appache commons-io 包中的 FileAlterationListener 做例子，此接口定义了很多的方法，用于对文件或文件夹进行监控，一旦发生了对应的操作，就会触发相应的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface FileAlterationListener &#123;</span><br><span class="line">    void onStart(final FileAlterationObserver observer);</span><br><span class="line">    void onDirectoryCreate(final File directory);</span><br><span class="line">    void onDirectoryChange(final File directory);</span><br><span class="line">    void onDirectoryDelete(final File directory);</span><br><span class="line">    void onFileCreate(final File file);</span><br><span class="line">    void onFileChange(final File file);</span><br><span class="line">    void onFileDelete(final File file);</span><br><span class="line">    void onStop(final FileAlterationObserver observer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此接口的一大问题是抽象方法太多了，如果我们要用这个接口，意味着我们要实现每一个抽象方法，如果我们只是想要监控文件夹中的文件创建和文件删除事件，可是我们还是不得不实现所有的方法，很明显，这不是我们想要的。</p><p>所以，我们需要下面的一个适配器，它用于实现上面的接口，但是所有的方法都是空方法，这样，我们就可以转而定义自己的类来继承下面这个类即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class FileAlterationListenerAdaptor implements FileAlterationListener &#123;</span><br><span class="line"></span><br><span class="line">    public void onStart(final FileAlterationObserver observer) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onDirectoryCreate(final File directory) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onDirectoryChange(final File directory) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onDirectoryDelete(final File directory) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onFileCreate(final File file) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onFileChange(final File file) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onFileDelete(final File file) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onStop(final FileAlterationObserver observer) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如我们可以定义以下类，我们仅仅需要实现我们想实现的方法就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class FileMonitor extends FileAlterationListenerAdaptor &#123;</span><br><span class="line">    public void onFileCreate(final File file) &#123;</span><br><span class="line">        &#x2F;&#x2F; 文件创建</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onFileDelete(final File file) &#123;</span><br><span class="line">        &#x2F;&#x2F; 文件删除</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，上面说的只是适配器模式的其中一种，也是最简单的一种，无需多言。下面，再介绍“正统的”适配器模式。</p><h2 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h2><p>来看一个《Head First 设计模式》中的一个例子，我稍微修改了一下，看看怎么将鸡适配成鸭，这样鸡也能当鸭来用。因为，现在鸭这个接口，我们没有合适的实现类可以用，所以需要适配器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface Duck &#123;</span><br><span class="line">    public void quack(); &#x2F;&#x2F; 鸭的呱呱叫</span><br><span class="line">      public void fly(); &#x2F;&#x2F; 飞</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Cock &#123;</span><br><span class="line">    public void gobble(); &#x2F;&#x2F; 鸡的咕咕叫</span><br><span class="line">      public void fly(); &#x2F;&#x2F; 飞</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class WildCock implements Cock &#123;</span><br><span class="line">    public void gobble() &#123;</span><br><span class="line">        System.out.println(&quot;咕咕叫&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">      public void fly() &#123;</span><br><span class="line">        System.out.println(&quot;鸡也会飞哦&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鸭接口有 fly() 和 quare() 两个方法，鸡 Cock 如果要冒充鸭，fly() 方法是现成的，但是鸡不会鸭的呱呱叫，没有 quack() 方法。这个时候就需要适配了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 毫无疑问，首先，这个适配器肯定需要 implements Duck，这样才能当做鸭来用</span><br><span class="line">public class CockAdapter implements Duck &#123;</span><br><span class="line"></span><br><span class="line">    Cock cock;</span><br><span class="line">    &#x2F;&#x2F; 构造方法中需要一个鸡的实例，此类就是将这只鸡适配成鸭来用</span><br><span class="line">      public CockAdapter(Cock cock) &#123;</span><br><span class="line">        this.cock &#x3D; cock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 实现鸭的呱呱叫方法</span><br><span class="line">      @Override</span><br><span class="line">      public void quack() &#123;</span><br><span class="line">        &#x2F;&#x2F; 内部其实是一只鸡的咕咕叫</span><br><span class="line">        cock.gobble();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      @Override</span><br><span class="line">      public void fly() &#123;</span><br><span class="line">        cock.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用很简单了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    &#x2F;&#x2F; 有一只野鸡</span><br><span class="line">      Cock wildCock &#x3D; new WildCock();</span><br><span class="line">      &#x2F;&#x2F; 成功将野鸡适配成鸭</span><br><span class="line">      Duck duck &#x3D; new CockAdapter(wildCock);</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，大家也就知道了适配器模式是怎么回事了。无非是我们需要一只鸭，但是我们只有一只鸡，这个时候就需要定义一个适配器，由这个适配器来充当鸭，但是适配器里面的方法还是由鸡来实现的。</p><p>我们用一个图来简单说明下：<br><img src="/images/shipeiqi.png" alt="alt"><br>上图应该还是很容易理解的，我就不做更多的解释了。下面，我们看看类适配模式怎么样的。</p><h2 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h2><p><img src="/images/shipeiqi2.png" alt="alt"><br>看到这个图，大家应该很容易理解的吧，通过继承的方法，适配器自动获得了所需要的大部分方法。这个时候，客户端使用更加简单，直接 Target t = new SomeAdapter(); 就可以了。</p><h2 id="适配器模式总结"><a href="#适配器模式总结" class="headerlink" title="适配器模式总结"></a>适配器模式总结</h2><p>类适配和对象适配的异同</p><p>一个采用继承，一个采用组合；</p><p>类适配属于静态实现，对象适配属于组合的动态实现，对象适配需要多实例化一个对象。</p><p>总体来说，对象适配用得比较多。</p><p>适配器模式和代理模式的异同<br>比较这两种模式，其实是比较对象适配器模式和代理模式，在代码结构上，它们很相似，都需要一个具体的实现类的实例。但是它们的目的不一样，代理模式做的是增强原方法的活；适配器做的是适配的活，为的是提供“把鸡包装成鸭，然后当做鸭来使用”，而鸡和鸭它们之间原本没有继承关系。<br><img src="/images/shipeiqi3.png" alt="alt"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路—设计模式（二）</title>
      <link href="/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式是最为常用的设计模式之一，同时也是大多数人理解错的最多的一种设计模式<br>饿汉模式：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Singleton &#123;</span><br><span class="line">    &#x2F;&#x2F; 首先，将 new Singleton() 堵死</span><br><span class="line">    private Singleton() &#123;&#125;;</span><br><span class="line">    &#x2F;&#x2F; 创建私有静态实例，意味着这个类第一次使用的时候就会进行创建</span><br><span class="line">    private static Singleton instance &#x3D; new Singleton();</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 瞎写一个静态方法。这里想说的是，如果我们只是要调用 Singleton.getDate(...)，</span><br><span class="line">    &#x2F;&#x2F; 本来是不想要生成 Singleton 实例的，不过没办法，已经生成了</span><br><span class="line">    public static Date getDate(String mode) &#123;return new Date();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多人都能说出饿汉模式的缺点，可是我觉得生产过程中，很少碰到这种情况：你定义了一个单例的类，不需要其实例，可是你却把一个或几个你会用到的静态方法塞到这个类中。<br>饱汉模式最容易出错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Singleton &#123;</span><br><span class="line">    &#x2F;&#x2F; 首先，也是先堵死 new Singleton() 这条路</span><br><span class="line">    private Singleton() &#123;&#125;</span><br><span class="line">    &#x2F;&#x2F; 和饿汉模式相比，这边不需要先实例化出来，注意这里的 volatile，它是必须的</span><br><span class="line">    private static volatile Singleton instance &#x3D; null;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        if (instance &#x3D;&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F; 加锁</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                &#x2F;&#x2F; 这一次判断也是必须的，不然会有并发问题</span><br><span class="line">                if (instance &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    instance &#x3D; new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重检查，指的是两次检查 instance 是否为 null，volatile 在这里是需要的。</p><h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>经常碰见的 XxxBuilder 的类，通常都是建造者模式的产物。建造者模式其实有很多的变种，但是对于客户端来说，我们的使用通常都是一个模式的<br>套路就是先 new 一个 Builder，然后可以链式地调用一堆方法，最后再调用一次 build() 方法，我们需要的对象就有了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class User &#123;</span><br><span class="line">    &#x2F;&#x2F; 下面是“一堆”的属性</span><br><span class="line">    private String name;</span><br><span class="line">    private String password;</span><br><span class="line">    private String nickName;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 构造方法私有化，不然客户端就会直接调用构造方法了</span><br><span class="line">    private User(String name, String password, String nickName, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">        this.nickName &#x3D; nickName;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 静态方法，用于生成一个 Builder，这个不一定要有，不过写这个方法是一个很好的习惯，</span><br><span class="line">    &#x2F;&#x2F; 有些代码要求别人写 new User.UserBuilder().a()...build() 看上去就没那么好</span><br><span class="line">    public static UserBuilder builder() &#123;</span><br><span class="line">        return new UserBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class UserBuilder &#123;</span><br><span class="line">        &#x2F;&#x2F; 下面是和 User 一模一样的一堆属性</span><br><span class="line">        private String  name;</span><br><span class="line">        private String password;</span><br><span class="line">        private String nickName;</span><br><span class="line">        private int age;</span><br><span class="line"></span><br><span class="line">        private UserBuilder() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 链式调用设置各个属性值，返回 this，即 UserBuilder</span><br><span class="line">        public UserBuilder name(String name) &#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public UserBuilder password(String password) &#123;</span><br><span class="line">            this.password &#x3D; password;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public UserBuilder nickName(String nickName) &#123;</span><br><span class="line">            this.nickName &#x3D; nickName;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public UserBuilder age(int age) &#123;</span><br><span class="line">            this.age &#x3D; age;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; build() 方法负责将 UserBuilder 中设置好的属性“复制”到 User 中。</span><br><span class="line">        &#x2F;&#x2F; 当然，可以在 “复制” 之前做点检验</span><br><span class="line">        public User build() &#123;</span><br><span class="line">            if (name &#x3D;&#x3D; null || password &#x3D;&#x3D; null) &#123;</span><br><span class="line">                throw new RuntimeException(&quot;用户名和密码必填&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (age &lt;&#x3D; 0 || age &gt;&#x3D; 150) &#123;</span><br><span class="line">                throw new RuntimeException(&quot;年龄不合法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 还可以做赋予”默认值“的功能</span><br><span class="line">              if (nickName &#x3D;&#x3D; null) &#123;</span><br><span class="line">                nickName &#x3D; name;</span><br><span class="line">            &#125;</span><br><span class="line">            return new User(name, password, nickName, age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心是：先把所有的属性都设置给 Builder，然后 build() 方法的时候，将这些属性复制给实际产生的对象。</p><p>看看客户端的调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class APP &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        User d &#x3D; User.builder()</span><br><span class="line">                .name(&quot;foo&quot;)</span><br><span class="line">                .password(&quot;pAss12345&quot;)</span><br><span class="line">                .age(25)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说实话，建造者模式的链式写法很吸引人，但是，多写了很多“无用”的 builder 的代码，感觉这个模式没什么用。不过，当属性很多，而且有些必填，有些选填的时候，这个模式会使代码清晰很多。我们可以在 Builder 的构造方法中强制让调用者提供必填字段，还有，在 build() 方法中校验各个参数比在 User 的构造方法中校验，代码要优雅一些。</p><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>这是我要说的创建型模式的最后一个设计模式了。<br>原型模式很简单：有一个原型实例，基于这个原型实例产生新的实例，也就是“克隆”了。<br>Object 类中有一个 clone() 方法，它用于生成一个新的对象，当然，如果我们要调用这个方法，java 要求我们的类必须先实现 Cloneable 接口，此接口没有定义任何方法，但是不这么做的话，在 clone() 的时候，会抛出 CloneNotSupportedException 异常<br>java 的克隆是浅克隆，碰到对象引用的时候，克隆出来的对象和原对象中的引用将指向同一个对象。通常实现深克隆的方法是将对象进行序列化，然后再进行反序列化。</p><p>原型模式了解到这里我觉得就够了，各种变着法子说这种代码或那种代码是原型模式，没什么意义。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路—设计模式（一）</title>
      <link href="/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/Java/%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>和名字一样简单，非常简单，直接上代码…</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class FoodFactory &#123;</span><br><span class="line"></span><br><span class="line">    public static Food makeFood(String name) &#123;</span><br><span class="line">        if (name.equals(&quot;noodle&quot;)) &#123;</span><br><span class="line">            Food noodle &#x3D; new LanZhouNoodle();</span><br><span class="line">            noodle.addSpicy(&quot;more&quot;);</span><br><span class="line">            return noodle;</span><br><span class="line">        &#125; else if (name.equals(&quot;chicken&quot;)) &#123;</span><br><span class="line">            Food chicken &#x3D; new HuangMenChicken();</span><br><span class="line">            chicken.addCondiment(&quot;potato&quot;);</span><br><span class="line">            return chicken;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，LanZhouNoodle 和 HuangMenChicken 都继承自 Food。<br>简单地说，简单工厂模式通常就是这样，一个工厂类 XxxFactory，里面有一个静态方法，根据我们不同的参数，返回不同的派生自同一个父类（或实现同一接口）的实例对象。<br>我们强调职责单一原则，一个类只提供一种功能，FoodFactory 的功能就是只要负责生产各种 Food。</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>简单工厂模式很简单，如果它能满足我们的需要，我觉得就不要折腾了。之所以需要引入工厂模式，是因为我们往往需要使用两个或两个以上的工厂。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface FoodFactory &#123;</span><br><span class="line">    Food makeFood(String name);</span><br><span class="line">&#125;</span><br><span class="line">public class ChineseFoodFactory implements FoodFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Food makeFood(String name) &#123;</span><br><span class="line">        if (name.equals(&quot;A&quot;)) &#123;</span><br><span class="line">            return new ChineseFoodA();</span><br><span class="line">        &#125; else if (name.equals(&quot;B&quot;)) &#123;</span><br><span class="line">            return new ChineseFoodB();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class AmericanFoodFactory implements FoodFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Food makeFood(String name) &#123;</span><br><span class="line">        if (name.equals(&quot;A&quot;)) &#123;</span><br><span class="line">            return new AmericanFoodA();</span><br><span class="line">        &#125; else if (name.equals(&quot;B&quot;)) &#123;</span><br><span class="line">            return new AmericanFoodB();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，ChineseFoodA、ChineseFoodB、AmericanFoodA、AmericanFoodB 都派生自 Food。</p><p>客户端调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class APP &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 先选择一个具体的工厂</span><br><span class="line">        FoodFactory factory &#x3D; new ChineseFoodFactory();</span><br><span class="line">        &#x2F;&#x2F; 由第一步的工厂产生具体的对象，不同的工厂造出不一样的对象</span><br><span class="line">        Food food &#x3D; factory.makeFood(&quot;A&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然都是调用 makeFood(“A”) 制作 A 类食物，但是，不同的工厂生产出来的完全不一样。</p><p>第一步，我们需要选取合适的工厂，然后第二步基本上和简单工厂一样。</p><p>核心在于，我们需要在第一步选好我们需要的工厂。比如，我们有 LogFactory 接口，实现类有 FileLogFactory 和 KafkaLogFactory，分别对应将日志写入文件和写入 Kafka 中，显然，我们客户端第一步就需要决定到底要实例化 FileLogFactory 还是 KafkaLogFactory，这将决定之后的所有的操作。</p><p>虽然简单，不过我也把所有的构件都画到一张图上，这样看着比较清晰：<br><img src="/images/gcmoshi.png" alt="alt"></p><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>当涉及到产品族的时候，就需要引入抽象工厂模式了。<br>一个经典的例子是造一台电脑。我们先不引入抽象工厂模式，看看怎么实现。<br>因为电脑是由许多的构件组成的，我们将 CPU 和主板进行抽象，然后 CPU 由 CPUFactory 生产，主板由 MainBoardFactory 生产，然后，我们再将 CPU 和主板搭配起来组合在一起，如下图：<br><img src="/images/cxgc1.png" alt="alt"><br>这个时候的客户端调用是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 得到 Intel 的 CPU</span><br><span class="line">CPUFactory cpuFactory &#x3D; new IntelCPUFactory();</span><br><span class="line">CPU cpu &#x3D; intelCPUFactory.makeCPU();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 得到 AMD 的主板</span><br><span class="line">MainBoardFactory mainBoardFactory &#x3D; new AmdMainBoardFactory();</span><br><span class="line">MainBoard mainBoard &#x3D; mainBoardFactory.make();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 组装 CPU 和主板</span><br><span class="line">Computer computer &#x3D; new Computer(cpu, mainBoard);</span><br></pre></td></tr></table></figure><p>单独看 CPU 工厂和主板工厂，它们分别是前面我们说的工厂模式。这种方式也容易扩展，因为要给电脑加硬盘的话，只需要加一个 HardDiskFactory 和相应的实现即可，不需要修改现有的工厂。</p><p>但是，这种方式有一个问题，那就是如果** Intel 家产的 CPU 和 AMD 产的主板不能兼容使用**，那么这代码就容易出错，因为客户端并不知道它们不兼容，也就会错误地出现随意组合。</p><p>-下面就是我们要说的产品族的概念，它代表了组成某个产品的一系列附件的集合：<br><img src="/images/cxgc2.png" alt="alt"><br>当涉及到这种产品族的问题的时候，就需要抽象工厂模式来支持了。我们不再定义 CPU 工厂、主板工厂、硬盘工厂、显示屏工厂等等，我们直接定义电脑工厂，每个电脑工厂负责生产所有的设备，这样能保证肯定不存在兼容问题。<br>客户端调用：<br><img src="/images/cxgc3.png" alt="alt"><br>这个时候，对于客户端来说，不再需要单独挑选 CPU厂商、主板厂商、硬盘厂商等，直接选择一家品牌工厂，品牌工厂会负责生产所有的东西，而且能保证肯定是兼容可用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    &#x2F;&#x2F; 第一步就要选定一个“大厂”</span><br><span class="line">    ComputerFactory cf &#x3D; new AmdFactory();</span><br><span class="line">    &#x2F;&#x2F; 从这个大厂造 CPU</span><br><span class="line">    CPU cpu &#x3D; cf.makeCPU();</span><br><span class="line">    &#x2F;&#x2F; 从这个大厂造主板</span><br><span class="line">    MainBoard board &#x3D; cf.makeMainBoard();</span><br><span class="line">      &#x2F;&#x2F; 从这个大厂造硬盘</span><br><span class="line">      HardDisk hardDisk &#x3D; cf.makeHardDisk();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 将同一个厂子出来的 CPU、主板、硬盘组装在一起</span><br><span class="line">    Computer result &#x3D; new Computer(cpu, board, hardDisk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，抽象工厂的问题也是显而易见的，比如我们要加个显示器，就需要修改所有的工厂，给所有的工厂都加上制造显示器的方法。这有点违反了对修改关闭，对扩展开放这个设计原则。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内功修炼-思维的进阶之设计模式</title>
      <link href="/Java/%E5%86%85%E5%8A%9F%E4%BF%AE%E7%82%BC-%E6%80%9D%E7%BB%B4%E7%9A%84%E8%BF%9B%E9%98%B6/"/>
      <url>/Java/%E5%86%85%E5%8A%9F%E4%BF%AE%E7%82%BC-%E6%80%9D%E7%BB%B4%E7%9A%84%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关于设计模式，是对开发人员一种思维上的修炼。旨在让代码易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因。<br>接触编程以来，只有在大四准备面试的时候认真刷过一段设计模式，可是当时时间仓促，导致至今也是半吊子水平.理解的并不深刻。。<br>正值四月末，借着这篇文章正式拉开五月设计模式深入学习之路。</p><a id="more"></a><h1 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h1><p>总体来说设计模式分为三大类：</p><p>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p><p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><p>其实还有两类：并发型模式和线程池模式。用一个图片来整体描述一下：<br><img src="/images/shejimoshi.jpg" alt="alt"></p><h1 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h1><p>1、开闭原则（Open Close Principle）</p><p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><p>2、里氏代换原则（Liskov Substitution Principle）</p><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p><p>3、依赖倒转原则（Dependence Inversion Principle）</p><p>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。</p><p>4、接口隔离原则（Interface Segregation Principle）</p><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p><p>5、迪米特法则（最少知道原则）（Demeter Principle）</p><p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><p>6、合成复用原则（Composite Reuse Principle）</p><p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p><h1 id="Java中的23种设计模式"><a href="#Java中的23种设计模式" class="headerlink" title="Java中的23种设计模式"></a>Java中的23种设计模式</h1><p>本人主要语言为Java，接下来将详细整理java中的设计模式。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法归总-3(完结)</title>
      <link href="/Java/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%BD%92%E6%80%BB-3(%E5%AE%8C%E7%BB%93)/"/>
      <url>/Java/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%BD%92%E6%80%BB-3(%E5%AE%8C%E7%BB%93)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>排序的整理(完结篇!)</p><a id="more"></a><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>下面的演示图源于网络，个人觉得很清晰就一起收藏了</p><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O(nlog( r )m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。基数排序是用空间换时间的经典算法。<br>演示：<br><img src="/images/jishu.png" alt="alt"></p><p>基数排序的基本思想是：<br>将所有待比较的数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序，这样从最低位排序一直到最高位排序完成以后，数列就变为了一个有序序列。<br>这样说可能过于抽象，我们通过详细步骤来分析一下：<br>我们假设有一个待排序数组[53，3，542，748，14，214]，那么如何使用基数排序对其进行排序呢？<br>首先我们有这样的十个一维数组，在基数排序中也叫桶。<br><img src="/images/jishu1.png" alt="alt"><br>那么第一轮排序开始，我们依次遍历每个元素，并得到元素的个位数。拿到的第一个元素为53，其个位数为3，所以将53放入编号为3的桶中，第二个元素3的个位数也是3，所以也放在编号为3的桶中，而第三个元素542的个位数为2，所以将542放入编号为2的桶中，以此类推。<br>所以结果为：<br><img src="/images/jishu2.png" alt="alt"><br>那么第一轮排序开始，我们依次遍历每个元素，并得到元素的个位数。拿到的第一个元素为53，其个位数为3，所以将53放入编号为3的桶中，第二个元素3的个位数也是3，所以也放在编号为3的桶中，而第三个元素542的个位数为2，所以将542放入编号为2的桶中，以此类推。<br>所以结果为：<br><img src="/images/jishu3.png" alt="alt"><br>然后同样按照桶的顺序将数据从中取出并放入原数组，此时原数组变为[3，14，214，542，748，53]。<br>接下来又进行第三轮排序，以元素的百位数进行区分，结果为：<br><img src="/images/jishu4.png" alt="alt"><br>按顺序取出数据后，原数组变为[3，14，53，214，542，748]。这时的数组已经完成排序。<br>从中我们也可以知道，基数排序的排序轮数取决于数组元素中最大位数的元素。<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public static void raixSort(int[] arr) &#123;</span><br><span class="line">&#x2F;&#x2F; 第一轮(针对每个元素的个位进行排序处理)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义一个二维数组，模拟桶，每个桶就是一个一维数组</span><br><span class="line">&#x2F;&#x2F; 为了防止放入数据的时候桶溢出，我们应该尽量将桶的容量设置得大一些</span><br><span class="line">int[][] bucket &#x3D; new int[10][arr.length];</span><br><span class="line">&#x2F;&#x2F; 记录每个桶中实际存放的元素个数</span><br><span class="line">&#x2F;&#x2F; 定义一个一维数组来记录每个桶中每次放入的元素个数</span><br><span class="line">int[] bucketElementCounts &#x3D; new int[10];</span><br><span class="line"></span><br><span class="line">for (int j &#x3D; 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">&#x2F;&#x2F; 取出每个元素的个位</span><br><span class="line">int digitOfElement &#x3D; arr[j] % 10;</span><br><span class="line">&#x2F;&#x2F; 将元素放入对应的桶中</span><br><span class="line">&#x2F;&#x2F; bucketElementCounts[digitOfElement]就是桶中的元素个数，初始为0，放在第一位</span><br><span class="line">bucket[digitOfElement][bucketElementCounts[digitOfElement]] &#x3D; arr[j];</span><br><span class="line">&#x2F;&#x2F; 将桶中的元素个数++</span><br><span class="line">&#x2F;&#x2F; 这样接下来的元素就可以排在前面的元素后面</span><br><span class="line">bucketElementCounts[digitOfElement]++;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 按照桶的顺序取出数据并放回原数组</span><br><span class="line">int index &#x3D; 0;</span><br><span class="line">for (int k &#x3D; 0; k &lt; bucket.length; k++) &#123;</span><br><span class="line">&#x2F;&#x2F; 如果桶中有数据，才取出放回原数组</span><br><span class="line">if (bucketElementCounts[k] !&#x3D; 0) &#123;</span><br><span class="line">&#x2F;&#x2F; 说明桶中有数据，对该桶进行遍历</span><br><span class="line">for (int l &#x3D; 0; l &lt; bucketElementCounts[k]; l++) &#123;</span><br><span class="line">&#x2F;&#x2F; 取出元素放回原数组</span><br><span class="line">arr[index++] &#x3D; bucket[k][l];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 第一轮处理后，需要将每个bucketElementCounts[k]置0</span><br><span class="line">bucketElementCounts[k] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;第一轮:&quot; + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ----------------------------</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第二轮(针对每个元素的十位进行排序处理)</span><br><span class="line">for (int j &#x3D; 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">&#x2F;&#x2F; 取出每个元素的十位</span><br><span class="line">int digitOfElement &#x3D; arr[j] &#x2F; 10 % 10;</span><br><span class="line">&#x2F;&#x2F; 将元素放入对应的桶中</span><br><span class="line">&#x2F;&#x2F; bucketElementCounts[digitOfElement]就是桶中的元素个数，初始为0，放在第一位</span><br><span class="line">bucket[digitOfElement][bucketElementCounts[digitOfElement]] &#x3D; arr[j];</span><br><span class="line">&#x2F;&#x2F; 将桶中的元素个数++</span><br><span class="line">&#x2F;&#x2F; 这样接下来的元素就可以排在前面的元素后面</span><br><span class="line">bucketElementCounts[digitOfElement]++;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 按照桶的顺序取出数据并放回原数组</span><br><span class="line">index &#x3D; 0;</span><br><span class="line">for (int k &#x3D; 0; k &lt; bucket.length; k++) &#123;</span><br><span class="line">&#x2F;&#x2F; 如果桶中有数据，才取出放回原数组</span><br><span class="line">if (bucketElementCounts[k] !&#x3D; 0) &#123;</span><br><span class="line">&#x2F;&#x2F; 说明桶中有数据，对该桶进行遍历</span><br><span class="line">for (int l &#x3D; 0; l &lt; bucketElementCounts[k]; l++) &#123;</span><br><span class="line">&#x2F;&#x2F; 取出元素放回原数组</span><br><span class="line">arr[index++] &#x3D; bucket[k][l];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 第二轮处理后，需要将每个bucketElementCounts[k]置0</span><br><span class="line">bucketElementCounts[k] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;第二轮:&quot; + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ----------------------------</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第三轮(针对每个元素的百位进行排序处理)</span><br><span class="line">for (int j &#x3D; 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">&#x2F;&#x2F; 取出每个元素的百位</span><br><span class="line">int digitOfElement &#x3D; arr[j] &#x2F; 100 % 10;</span><br><span class="line">&#x2F;&#x2F; 将元素放入对应的桶中</span><br><span class="line">&#x2F;&#x2F; bucketElementCounts[digitOfElement]就是桶中的元素个数，初始为0，放在第一位</span><br><span class="line">bucket[digitOfElement][bucketElementCounts[digitOfElement]] &#x3D; arr[j];</span><br><span class="line">&#x2F;&#x2F; 将桶中的元素个数++</span><br><span class="line">&#x2F;&#x2F; 这样接下来的元素就可以排在前面的元素后面</span><br><span class="line">bucketElementCounts[digitOfElement]++;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 按照桶的顺序取出数据并放回原数组</span><br><span class="line">index &#x3D; 0;</span><br><span class="line">for (int k &#x3D; 0; k &lt; bucket.length; k++) &#123;</span><br><span class="line">&#x2F;&#x2F; 如果桶中有数据，才取出放回原数组</span><br><span class="line">if (bucketElementCounts[k] !&#x3D; 0) &#123;</span><br><span class="line">&#x2F;&#x2F; 说明桶中有数据，对该桶进行遍历</span><br><span class="line">for (int l &#x3D; 0; l &lt; bucketElementCounts[k]; l++) &#123;</span><br><span class="line">&#x2F;&#x2F; 取出元素放回原数组</span><br><span class="line">arr[index++] &#x3D; bucket[k][l];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 第三轮处理后，需要将每个bucketElementCounts[k]置0</span><br><span class="line">bucketElementCounts[k] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;第三轮:&quot; + Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，基数排序就完成了。大家不要看到代码很多就怕了、烦了，觉得好难，其实也不能说一点难度都没有吧，只是要去理解这个过程，所以对于排序过程的分析我写了很多，也是为了能让你们更加理解，掌握了过程之后，相信理解这些代码也不是难事了。<br>其它：<br>这里说一说基数排序的一些其它内容，为什么单独只说基数排序呢？我们在前面提到了，基数排序是用空间换时间的经典算法，所以基数排序对于元素排序是非常快的。</p><p>测试一下速度:<br>case1(八十万个数据)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int[] arr &#x3D; new int[800000];</span><br><span class="line">for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i] &#x3D; (int) (Math.random() * 8000000);</span><br><span class="line">&#125;</span><br><span class="line">Date date &#x3D; new Date();</span><br><span class="line">SimpleDateFormat format &#x3D; new SimpleDateFormat(&quot;HH:mm:ss&quot;);</span><br><span class="line">String dateStr &#x3D; format.format(date);</span><br><span class="line">System.out.println(&quot;排序前的时间是:&quot; + dateStr);</span><br><span class="line">raixSort(arr);</span><br><span class="line">Date date2 &#x3D; new Date();</span><br><span class="line">String dateStr2 &#x3D; format.format(date2);</span><br><span class="line">System.out.println(&quot;排序前的时间是:&quot; + dateStr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">排序前的时间是:17:37:21</span><br><span class="line">排序前的时间是:17:37:21</span><br></pre></td></tr></table></figure><p>一秒钟时间不到就完成排序了。</p><p>case2(八千万个数据)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int[] arr &#x3D; new int[80000000];</span><br><span class="line">for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i] &#x3D; (int) (Math.random() * 8000000);</span><br><span class="line">&#125;</span><br><span class="line">Date date &#x3D; new Date();</span><br><span class="line">SimpleDateFormat format &#x3D; new SimpleDateFormat(&quot;HH:mm:ss&quot;);</span><br><span class="line">String dateStr &#x3D; format.format(date);</span><br><span class="line">System.out.println(&quot;排序前的时间是:&quot; + dateStr);</span><br><span class="line">raixSort(arr);</span><br><span class="line">Date date2 &#x3D; new Date();</span><br><span class="line">String dateStr2 &#x3D; format.format(date2);</span><br><span class="line">System.out.println(&quot;排序前的时间是:&quot; + dateStr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">排序前的时间是:17:41:07</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at com.itcast.sort.RadixSortDemo.raixSort(RadixSortDemo.java:42)</span><br><span class="line">at com.itcast.sort.RadixSortDemo.main(RadixSortDemo.java:22)</span><br></pre></td></tr></table></figure><p>堆内存溢出…所以在对大量数据进行排序的时候，基数排序显然不是一个好的选择，因为提升排序效率的条件是牺牲大量的内存空间，当数据足够多时，内存空间就不够用了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法归总-2</title>
      <link href="/Java/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%BD%92%E6%80%BB-2/"/>
      <url>/Java/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%BD%92%E6%80%BB-2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继续整理常用排序算法…</p><a id="more"></a><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>下面的演示图源于网络，个人觉得很清晰就一起收藏了</p><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>传统的插入排序算法在某些场景中存在着一些问题，例如[2，3，4，5，1]这样的一个数组，当我们对其进行插入排序的时候，发现要插入的数字是1，而要想将1插入到最前面，需要经过四个步骤，分别将5、4、3、2后移。所以得出结论：如果较小的数是我们需要进行插入的数，那效率就会比较低。鉴于这种场景的缺陷，希尔排序诞生了，它是插入排序的一种更高效的版本。<br>先看看希尔排序的概念：<br>希尔排序(Shell’s Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因D.L.Shell于1959年提出而得名。<br>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。<br>演示：<br><img src="/images/xier.gif" alt="alt"></p><p>动画如果没有看懂，我这里再贴几张静态图：<br><img src="/images/xier.jpeg" alt="alt"><br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void ShellSort() &#123;</span><br><span class="line">int[] arr &#x3D; &#123; 3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48 &#125;;</span><br><span class="line">for (int gap &#x3D; arr.length &#x2F; 2; gap &gt; 0; gap &#x2F;&#x3D; 2) &#123;</span><br><span class="line">&#x2F;&#x2F; 对数组元素进行分组</span><br><span class="line">for (int i &#x3D; gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">&#x2F;&#x2F; 遍历各组中的元素</span><br><span class="line">for (int j &#x3D; i - gap; j &gt;&#x3D; 0; j -&#x3D; gap) &#123;</span><br><span class="line">&#x2F;&#x2F; 交换元素</span><br><span class="line">if (arr[j] &gt; arr[j + gap]) &#123;</span><br><span class="line">int temp &#x3D; arr[j];</span><br><span class="line">arr[j] &#x3D; arr[j + gap];</span><br><span class="line">arr[j + gap] &#x3D; temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在上面的程序段中，数组长度为15，所以在第一轮，数组被分为了15 / 2 = 7个小组，然后分别对每个小组的元素进行遍历。在第一轮中小组之间的元素间隔都为7，所以分成的小组数其实也就是元素之间的间隔。接着就可以对每个小组的元素进行比较，然后进行交换，接下来以此类推。</p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序（Quicksort）是对冒泡排序的一种改进。<br>快速排序由C. A. R. Hoare在1960年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<br>演示：<br><img src="/images/kuaisu.gif" alt="alt"></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public static void quickSort(int[] arr, int left, int right) &#123;</span><br><span class="line">int l &#x3D; left;&#x2F;&#x2F; 左下标</span><br><span class="line">int r &#x3D; right;&#x2F;&#x2F; 右下标</span><br><span class="line">int pivot &#x3D; arr[(left + right) &#x2F; 2];&#x2F;&#x2F; 找到中间的值</span><br><span class="line">&#x2F;&#x2F; 将比pivot小的值放在其左边，比pivot大的值放在其右边</span><br><span class="line">while (l &lt; r) &#123;</span><br><span class="line">&#x2F;&#x2F; 在pivot左边寻找，直至找到大于等于pivot的值才退出</span><br><span class="line">while (arr[l] &lt; pivot) &#123;</span><br><span class="line">l +&#x3D; 1;&#x2F;&#x2F; 将l右移一位</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 在pivot右边寻找，直至找到小于等于pivot的值才退出</span><br><span class="line">while (arr[r] &gt; pivot) &#123;</span><br><span class="line">r -&#x3D; 1;&#x2F;&#x2F; 将r左移一位</span><br><span class="line">&#125;</span><br><span class="line">if (l &gt;&#x3D; r) &#123;</span><br><span class="line">&#x2F;&#x2F; 左右下标重合，寻找完毕，退出循环</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 交换元素</span><br><span class="line">int temp &#x3D; arr[l];</span><br><span class="line">arr[l] &#x3D; arr[r];</span><br><span class="line">arr[r] &#x3D; temp;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;倘若发现值相等的情况，则没有比较的必要，直接移动下标即可</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果交换完后，发现arr[l]&#x3D;&#x3D;pivot，此时应将r左移一位</span><br><span class="line">if (arr[l] &#x3D;&#x3D; pivot) &#123;</span><br><span class="line">r -&#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 如果交换完后，发现arr[r]&#x3D;&#x3D;pivot，此时应将l右移一位</span><br><span class="line">if (arr[r] &#x3D;&#x3D; pivot) &#123;</span><br><span class="line">l +&#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 如果l&#x3D;&#x3D;r，要把这两个下标错开，否则会出现无限递归，导致栈溢出的情况</span><br><span class="line">if (l &#x3D;&#x3D; r) &#123;</span><br><span class="line">l +&#x3D; 1;</span><br><span class="line">r -&#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 向左递归</span><br><span class="line">if (left &lt; r) &#123;</span><br><span class="line">quickSort(arr, left, r);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 向右递归</span><br><span class="line">if (right &gt; l) &#123;</span><br><span class="line">quickSort(arr, l, right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速排序的实现原理很简单，就是将原数组分成两部分，然后以中间值为标准，比它小的就放其左边，比它大的就放其右边，然后在左右两边又以相同的方式继续排序。<br>所以在代码实现过程中，首先要创建两个移动的变量，一个从最左边开始往右移动，一个从最右边开始往左移动，通过这两个变量来遍历左右两部分的元素。当发现左边有大于中间数的元素，右边有小于中间数的元素，此时就进行交换。当两个变量重合也就是相等的时候遍历结束，然后左右两部分作递归处理。</p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。<br>演示：<br><img src="/images/guibing.gif" alt="alt"></p><p>归并排序使用了一种分治思想，分治思想的意思就是’分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单地直接求解。<br>通过这个动图来看的话，相信很多人都一脸懵，没关系，我们通过静态图来分析一下：<br><img src="/images/guibing.png" alt="alt"><br>假设现在有一个待排序的序列，[5，2，4，7，1，3，2，2]，那么我们就需要将该序列进行分治，先将其分成两份：[5，2，4，7]和[1，3，2，2]，再将这两份分别分成两份：[5，2]和[4，7]；[1，3]和[2，2]，最后将这四部分再次分别分为两份，最后就将整个序列分为了八份。需要注意的是，在分的过程中，不需要遵循任何规则，关键在于归并，归并的过程中便实现了元素的排序。<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public static void mergeSort(int[] arr, int left, int right, int[] temp) &#123;</span><br><span class="line">&#x2F;&#x2F; 分解</span><br><span class="line">if (left &lt; right) &#123;</span><br><span class="line">int mid &#x3D; (left + right) &#x2F; 2;&#x2F;&#x2F; 中间索引</span><br><span class="line">&#x2F;&#x2F; 向左递归进行分解</span><br><span class="line">mergeSort(arr, left, mid, temp);</span><br><span class="line">&#x2F;&#x2F; 向右递归进行分解</span><br><span class="line">mergeSort(arr, mid + 1, right, temp);&#x2F;&#x2F; mid + 1，中间位置的后一个位置才是右边序列的开始位置</span><br><span class="line">&#x2F;&#x2F; 每分解一轮便合并一轮</span><br><span class="line">merge(arr, left, right, mid, temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 合并的方法</span><br><span class="line"> * </span><br><span class="line"> * @param arr   待排序的数组</span><br><span class="line"> * @param left  左边有序序列的初始索引</span><br><span class="line"> * @param right 中间索引</span><br><span class="line"> * @param mid   右边有序序列的初始索引</span><br><span class="line"> * @param temp  做中转的数组</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void merge(int[] arr, int left, int right, int mid, int[] temp) &#123;</span><br><span class="line">int i &#x3D; left; &#x2F;&#x2F; 初始化i，左边有序序列的初始索引</span><br><span class="line">int j &#x3D; mid + 1;&#x2F;&#x2F; 初始化j，右边有序序列的初始索引(右边有序序列的初始位置即为中间位置的后一个位置)</span><br><span class="line">int t &#x3D; 0;&#x2F;&#x2F; 指向temp数组的当前索引，初始为0</span><br><span class="line">&#x2F;&#x2F; 先把左右两边的数据(已经有序)按规则填充到temp数组</span><br><span class="line">&#x2F;&#x2F; 直到左右两边的有序序列，有一边处理完成为止</span><br><span class="line">while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; right) &#123;</span><br><span class="line">&#x2F;&#x2F; 如果左边有序序列的当前元素小于或等于右边有序序列的当前元素，就将左边的元素填充到temp数组中</span><br><span class="line">if (arr[i] &lt;&#x3D; arr[j]) &#123;</span><br><span class="line">temp[t] &#x3D; arr[i];</span><br><span class="line">t++;&#x2F;&#x2F; 索引后移</span><br><span class="line">i++;&#x2F;&#x2F; i后移</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#x2F;&#x2F; 反之，将右边有序序列的当前元素填充到temp数组中</span><br><span class="line">temp[t] &#x3D; arr[j];</span><br><span class="line">t++;&#x2F;&#x2F; 索引后移</span><br><span class="line">j++;&#x2F;&#x2F; j后移</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 把有剩余数据的一边的元素填充到temp中</span><br><span class="line">while (i &lt;&#x3D; mid) &#123;</span><br><span class="line">&#x2F;&#x2F; 此时说明左边序列还有剩余元素</span><br><span class="line">&#x2F;&#x2F; 全部填充到temp数组</span><br><span class="line">temp[t] &#x3D; arr[i];</span><br><span class="line">t++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">while (j &lt;&#x3D; right) &#123;</span><br><span class="line">&#x2F;&#x2F; 此时说明左边序列还有剩余元素</span><br><span class="line">&#x2F;&#x2F; 全部填充到temp数组</span><br><span class="line">temp[t] &#x3D; arr[j];</span><br><span class="line">t++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 将temp数组的元素复制到原数组</span><br><span class="line">t &#x3D; 0;</span><br><span class="line">int tempLeft &#x3D; left;</span><br><span class="line">while (tempLeft &lt;&#x3D; right) &#123;</span><br><span class="line">arr[tempLeft] &#x3D; temp[t];</span><br><span class="line">t++;</span><br><span class="line">tempLeft++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来分析一下吧，对于该排序算法，有两个部分组成，分解和合并。首先讲讲分解，在前面也说到了，我们需要将待排序的序列不停地进行分解，通过两个索引变量控制，一个初始索引，一个结尾索引。只有当两索引重合才结束分解。此时序列被分解成了十五个小份，这样分解工作就完成了。接下来是合并，合并操作也是最麻烦的，也是通过两个索引变量i，j。开始i在左边序列的第一个位置，j在右边序列的第一个位置，然后就是寻找左右两个序列中的最小值，放到新序列中，这时可能会出现一边的元素都放置完毕了，而另外一边还存在元素，此时只需将剩余的元素按顺序放进新序列即可，因为这时左右两边的序列已经是有序的了，最后将新序列复制到旧序列。这里也特别需要注意，因为合并的过程是分步的，而并非一次合并完成，所以数组的索引是在不断变化的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法归总-1</title>
      <link href="/Java/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%BD%92%E6%80%BB-1/"/>
      <url>/Java/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%BD%92%E6%80%BB-1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不多BB,整理一下程序员必备技能——排序~</p><a id="more"></a><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>下面的演示图源于网络，个人觉得很清晰就一起收藏了</p><h1 id="可爱的冒泡排序"><a href="#可爱的冒泡排序" class="headerlink" title="可爱的冒泡排序"></a>可爱的冒泡排序</h1><p>冒泡排序（Bubble Sort），是一种较简单的排序算法。<br>它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成。<br>这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。<br>演示：<br><img src="/images/maopao.gif" alt="alt"></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void bubbleSort() &#123;</span><br><span class="line">int[] arr &#x3D; &#123; 3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48 &#125;;</span><br><span class="line">&#x2F;&#x2F; 统计比较次数</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line">&#x2F;&#x2F; 第一轮比较</span><br><span class="line">for (int i &#x3D; 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">&#x2F;&#x2F; 第二轮比较</span><br><span class="line">for (int j &#x3D; 0; j &lt; arr.length - 1 - i; j++) &#123;</span><br><span class="line">if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">&#x2F;&#x2F; 交换位置</span><br><span class="line">int temp &#x3D; arr[j];</span><br><span class="line">arr[j] &#x3D; arr[j + 1];</span><br><span class="line">arr[j + 1] &#x3D; temp;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">System.out.println(&quot;一共比较了:&quot; + count + &quot;次&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们首先在开始循环时定义了一个boolean变量为true，然后如果元素之间进行了交换，就将值置为false。所以，我们就可以通过这个boolean变量来判断是否有元素进行了交换。如果boolean变量为true，则证明没有元素进行交换，那么久说明此时的数组元素已经完成排序，那么跳出外层循环即可，否则就继续排序。</p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择排序是不稳定的排序方法。<br>演示：<br><img src="/images/xuanze.gif" alt="alt"></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void SelectionSort() &#123;</span><br><span class="line">int[] arr &#x3D; &#123; 3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48 &#125;;</span><br><span class="line">for (int i &#x3D; 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">int index &#x3D; i;</span><br><span class="line">for (int j &#x3D; 1 + i; j &lt; arr.length; j++) &#123;</span><br><span class="line">if (arr[j] &lt; arr[index]) &#123;</span><br><span class="line">index &#x3D; j;&#x2F;&#x2F; 保存最小元素的下标</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 此时已经找到最小元素的下标</span><br><span class="line">&#x2F;&#x2F; 将最小元素与前面的元素交换</span><br><span class="line">int temp &#x3D; arr[index];</span><br><span class="line">arr[index] &#x3D; arr[i];</span><br><span class="line">arr[i] &#x3D; temp;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现也非常的简单，首先在外循环里定义了一个index变量存储i的值，这是为了避免重复地比较，因为在每一轮的比较结束后，前i个元素是已经排好序的，所以无需再次比较，只需从i开始即可。后面的比较都是基于index位置的元素进行比较，倘若比较完后index位置的元素是最小值，那就无需交换，不动即可。而如果找到了比index位置的元素更小的元素，那就将该元素的索引赋值给index，然后继续比较，直到比较完成，比较完成之后得到的index即为数组中的最小值，那此时只需要将index位置的元素和i位置的元素交换即可。</p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>插入排序（Insertion sort）是一种简单直观且稳定的排序算法。如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法,插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。<br>插入排序的基本思想是：每步将一个待排序的记录，按其关键码值的大小插入到前面已经排序的数组中的适当位置上，直到全部插入完为止。<br>演示：<br><img src="/images/charu.gif" alt="alt"></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void InsertionSort() &#123;</span><br><span class="line">int[] arr &#x3D; &#123; 3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48 &#125;;</span><br><span class="line">for (int i &#x3D; 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">&#x2F;&#x2F; 定义待插入的数</span><br><span class="line">int insertValue &#x3D; arr[i];</span><br><span class="line">&#x2F;&#x2F; 找到待插入数的前一个数的下标</span><br><span class="line">int insertIndex &#x3D; i - 1;</span><br><span class="line">while (insertIndex &gt;&#x3D; 0 &amp;&amp; insertValue &lt; arr[insertIndex]) &#123;</span><br><span class="line">arr[insertIndex + 1] &#x3D; arr[insertIndex];</span><br><span class="line">insertIndex--;</span><br><span class="line">&#125;</span><br><span class="line">arr[insertIndex + 1] &#x3D; insertValue;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在这里，因为数组元素我们并不确定，所以只能将数组的第一个元素看成是一个有序的序列，所以从数组的第二个元素开始才是我们需要去寻找插入位置的元素。所以外层循环从1开始，然后将arr[i]，也就是当前的第二个元素先保存起来，然后找到待插入元素的前一个元素下标，也就是i-1，此时通过一个while循环去比较。<br>当insertIndex小于0时应该退出循环，因为此时已经与前面的所有元素比较完毕。在比较的过程中，如果待插入元素小于前一个元素，就将前一个元素后移，也就是将前一个元素的值直接赋值给待插入元素位置。因为在最开始已经将待插入元素进行了保存，所以只需将待插入元素的值赋值给它的前一个元素即可。因为在while循环中insertIndex执行了自减操作，所以它的前一个元素下标应为insertIndex + 1。而如果待插入的元素值大于前一个元素，那么就不会进入while循环，这样insertIndex + 1之后的位置仍然是自己所在的位置，所以赋值后值不改变，后面的操作以此类推。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt单点登录详细整理</title>
      <link href="/%E9%80%9A%E4%BF%A1/jwt%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E8%AF%A6%E7%BB%86%E6%95%B4%E7%90%86/"/>
      <url>/%E9%80%9A%E4%BF%A1/jwt%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E8%AF%A6%E7%BB%86%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作以来接触过两次sso单点登录，一次基于spring security，最近的一次基于jwt。感觉最大的问题就是有时候编程思路不太清晰就开始动手coding，总是蒙蒙的。参与了两次关于登录流程的设计，实在是不应该对这里再糊里糊涂了。痛定思痛，详细整理一下普通的会话管理和基于jwt的单点登录。(由于涉及到工作内容，以下就不用之前的源码展示了)</p><p>补充：下文会话管理部分图片为手绘，jwt相关图片来源于网络。</p><a id="more"></a><h1 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h1><p>在说jwt之前先说一下常用的会话管理  </p><ul><li><p>基于server-session的管理方式</p></li><li><p>cookie-based的管理方式</p></li><li><p>token-based的管理方式</p><ul><li><p><strong>基于server-session的管理</strong></p></li><li><p>(1).服务端session是用户第一次访问应用时，服务器就会创建的对象，代表用户的一次会话过程，服务器为每一个session都分配一个唯一的sessionid，以保证每个用户都有一个不同的session对象。</p></li><li><p>(2).服务器在创建完session后，会把sessionid通过cookie返回给用户所在的浏览器，这样当用户第二次及以后向服务器发送请求的时候，就会通过cookie把sessionid传回给服务器，以便服务器能够根据sessionid找到与该用户对应的session对象。</p></li><li><p>(3).session通常有失效时间的设定，比如2个小时。当失效时间到，服务器会销毁之前的session，并创建新的session返回给用户。但是只要用户在失效时间内，有发送新的请求给服务器，通常服务器都会把他对应的session的失效时间根据当前的请求时间再延长2个小时。</p></li><li><p>(4).session在一开始并不具备会话管理的作用。它只有在用户登录认证成功之后，并且往session对象里面放入了用户登录成功的凭证，才能用来管理会话。管理会话的逻辑也很简单，只要拿到用户的session对象，看它里面有没有登录成功的凭证，就能判断这个用户是否已经登录。当用户主动退出的时候，会把它的session对象里的登录凭证清掉。所以在用户登录前或退出后或者session对象失效时，肯定都是拿不到需要的登录凭证的。</p><p>以上过程可简单使用流程图描述如下：<br><img src="/images/server-session.png" alt="alt"></p><p>该种会话管理方式的优点:个人理解主要就是安全性比较高，因为在浏览器端与服务器端保持会话状态的媒介始终只是一个sessionid串，只要这个串够随机，攻击者就不能轻易冒充他人的sessionid进行操作；除非通过CSRF或http劫持的方式，才有可能冒充别人进行操作；即使冒充成功，也必须被冒充的用户session里面包含有效的登录凭证才行。<br>当然结合这两次的相关开发经验，此种方式也暴露了相当一部分缺点：</p><ul><li>(1).这种方式将会话信息存储在web服务器里面，所以在用户同时在线量比较多时，这些会话信息会占据比较多的内存。</li><li>(2).当应用采用集群部署的时候，会遇到多台web服务器之间如何做session共享的问题。因为session是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建session的服务器，这样他就拿不到之前已经放入到session中的登录凭证之类的信息了</li><li>(3).多个应用要共享session时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好cookie跨域的处理。</li></ul><p>针对问题1和问题2，可以采用redis这种中间服务器来管理session的增删改查，一来减轻web服务器的负担，二来解决不同web服务器共享session的问题。针对问题3，我个人所在的项目是通过生成token来实现的，在跳转系统时将token作为参数传给其它系统(同样需要跨域！！！但无需增加处理逻辑)，然后解析，借此实现多个应用共享同一用户不同系统登陆状态。至于其他方面我这里并不知道什么太好的处理…也欢迎各位同行指点探讨。</p></li><li><p><strong>cookie-based的管理方式</strong></p><p>当用户登录成功之后，把登录凭证写到cookie里面，并给cookie设置有效期，后续请求直接验证存有登录凭证的cookie是否存在以及凭证是否有效，即可判断用户的登录状态。使用该种方式相比于第一种方式减轻了服务器的处理逻辑和复杂程度。使用它来实现会话管理的整体流程如下：</p></li><li><p>(1).用户发起登录请求，服务端根据传入的用户密码之类的身份信息，验证用户是否满足登录条件，如果满足，就根据用户信息创建一个登录凭证，这个登录凭证简单来说就是一个对象，最简单的形式可以只包含用户id，凭证创建时间和过期时间三个值。</p></li><li><p>(2).服务端把上一步创建好的登录凭证，先对它做数字签名，然后再用对称加密算法做加密处理，将签名、加密后的字串，写入cookie。cookie的名字必须固定（如ticket），因为后面再获取的时候，还得根据这个名字来获取cookie值。这一步添加数字签名的目的是防止登录凭证里的信息被篡改，因为一旦信息被篡改，那么下一步做签名验证的时候肯定会失败。做加密的目的，是防止cookie被别人截取的时候，无法轻易读到其中的用户信息。</p></li><li><p>(3).用户登录后发起后续请求，服务端根据上一步存登录凭证的cookie名字，获取到相关的cookie值。然后先做解密处理，再做数字签名的认证，如果这两步都失败，说明这个登录凭证非法；如果这两步成功，接着就可以拿到原始存入的登录凭证了。然后用这个凭证的过期时间和当前时间做对比，判断凭证是否过期，如果过期，就需要用户再重新登录；如果未过期，则允许请求继续。</p><p>以上过程可简单使用流程图描述如下：<br><img src="/images/cookie-based.png" alt="alt"></p><p>这种方式最大的优点就是实现了服务端的无状态化，彻底移除了服务端对会话的管理的逻辑，服务端只需要负责创建和验证登录cookie即可，无需保持用户的状态信息。对于第一种方式的第二个问题，用户会话信息共享的问题，它也能很好解决：因为如果只是同一个应用做集群部署，由于验证登录凭证的代码都是一样的，所以不管是哪个服务器处理用户请求，总能拿到cookie中的登录凭证来进行验证；如果是不同的应用，只要每个应用都包含相同的登录逻辑，那么他们也是能轻易实现会话共享的，不过这种情况下，登录逻辑里面数字签名以及加密解密要用到的密钥文件或者密钥串，需要在不同的应用里面共享，总而言之，就是需要算法完全保持一致。</p><p>这种方式由于把登录凭证直接存放客户端，并且需要cookie传来传去，所以它的缺点也比较明显：</p><p>cookie有大小限制，存储不了太多数据，所以要是登录凭证存的消息过多，导致加密签名后的串太长，就会引发别的问题，比- (1).如其它业务场景需要cookie的时候，就有可能没那么多空间可用了；所以用的时候得谨慎，得观察实际的登录cookie的大小；比如太长，就要考虑是非是数字签名的算法太严格，导致签名后的串太长，那就适当调整签名逻辑；比如如果一开始用4096位的RSA算法做数字签名，可以考虑换成1024、2048位；</p></li><li><p>(2).每次传送cookie，增加了请求的数量，对访问性能也有影响；</p></li><li><p>(3).也有跨域问题，毕竟还是要用cookie。</p></li><li><p><strong>token-based的管理方式</strong></p><p>这种方式从流程和实现上来说，跟cookie-based的方式没有太多区别，只不过cookie-based里面写到cookie里面的ticket在这种方式下称为token，这个token在返回给客户端之后，后续请求都必须通过url参数或者是http header的形式，主动带上token，这样服务端接收到请求之后就能直接从http header或者url里面取到token进行验证：</p><p>流程如下：<br><img src="/images/token-based.png" alt="alt"></p><p>token可以存于localStorage或者sessionStorage里面，然后每发ajax请求的时候，都把token拿出来放到ajax请求的header里即可。不过如果是非接口的请求，比如直接通过点击链接请求一个页面这种，是无法自动带上token的。所以这种方式也仅限于走纯接口的web应用。</p><p>这种方式用在web应用里也有跨域的问题，比如应用如果部署在a.com，api服务部署在b.com，从a.com里面发出ajax请求到b.com，默认情况下是会报跨域错误的，这种问题可以用CORS（跨域资源共享）的方式来快速解决。这里就是我之前提到的第一种方式缺点三的解决。</p><p>这种方式跟cookie-based的方式同样都还有的一个问题就是ticket或者token刷新的问题。有的产品里面，你肯定不希望用户登录后，操作了半个小时，结果ticket或者token到了过期时间，然后用户又得去重新登录的情况出现。这个时候就得考虑ticket或token的自动刷新的问题，简单来说，可以在验证ticket或token有效之后，自动把ticket或token的失效时间延长，然后把它再返回给客户端；客户端如果检测到服务器有返回新的ticket或token，就替换原来的ticket或token。</p></li></ul></li></ul><p><strong>三种方式小结</strong>  </p><p>在web应用里面，会话管理的安全性始终是最重要的安全问题，这个对用户的影响极大。</p><p>首先从会话管理凭证来说，第一种方式的会话凭证仅仅是一个sessionid，所以只要这个sessionid足够随机，而不是一个自增的数字id值，那么其它人就不可能轻易地冒充别人的sessionid进行操作；第二种方式的凭证ticket以及第三种方式的凭证token都是一个在服务端做了数字签名，和加密处理的串，所以只要密钥不泄露，别人也无法轻易地拿到这个串中的有效信息并对它进行篡改。总之，这三种会话管理方式的凭证本身是比较安全的。</p><p>然后从客户端和服务端的http过程来说，当别人截获到客户端请求中的会话凭证，就能拿这个凭证冒充原用户，做一些非法操作，而服务器也认不出来。这种安全问题，可以简单采用https来解决，虽然可能还有http劫持这种更高程度的威胁存在，但是从代码能做的防范，确实也就是这个层次了。</p><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h2 id="JWT介绍"><a href="#JWT介绍" class="headerlink" title="JWT介绍"></a>JWT介绍</h2><p>JSON Web Token（JWT）是一个开放标准（RFC 7519），它定义了一种紧凑和自包含的方式，用于在各方之间作为JSON对象安全地传输信息。作为标准，它没有提供技术实现，但是大部分的语言平台都有按照它规定的内容提供了自己的技术实现，所以实际在用的时候，只要根据自己当前项目的技术平台，到官网上选用合适的实现库即可。</p><p>使用JWT来传输数据，实际上传输的是一个字符串，这个字符串就是所谓的json web token字符串。所以广义上，JWT是一个标准的名称；狭义上，JWT指的就是用来传递的那个token字符串。这个串有两个特点： </p><ol><li>紧凑：指的是这个串很小，能通过url 参数，http请求提交的数据以及http header的方式来传递； </li><li>自包含：这个串可以包含很多信息，比如用户的id、角色等，别人拿到这个串，就能拿到这些关键的业务信息，从而避免再通过数据库查询等方式才能得到它们。</li></ol><p>通常一个JWT是长这个样子的：<br><img src="/images/jwt1.png" alt="alt"></p><h2 id="JWT的数据结构"><a href="#JWT的数据结构" class="headerlink" title="JWT的数据结构"></a>JWT的数据结构</h2><p>一个JWT实际上是由三个部分组成：header（头部）、payload（载荷）和signature（签名）。这三个部分在JWT里面分别对应英文句号分隔出来的三个串：<br><img src="/images/jwt2.png" alt="alt"></p><p>先来看header部分的结构以及它的生成方法。header部分是由下面格式的json结构生成出来：<br><img src="/images/jwt3.png" alt="alt"></p><p>这个json中的typ属性，用来标识整个token字符串是一个JWT字符串；它的alg属性，用来说明这个JWT签发的时候所使用的签名和摘要算法。typ跟alg属性的全称其实是type跟algorithm，分别是类型跟算法的意思。之所以都用三个字母来表示，也是基于JWT最终字串大小的考虑，同时也是跟JWT这个名称保持一致，这样就都是三个字符了…typ跟alg是JWT中标准中规定的属性名称，虽然在签发JWT的时候，也可以把这两个名称换掉，但是如果随意更换了这个名称，就有可能在JWT验证的时候碰到问题，因为拿到JWT的人，默认会根据typ和alg去拿JWT中的header信息，当你改了名称之后，显然别人是拿不到header信息的，他又不知道你把这两个名字换成了什么。JWT作为标准的意义在于统一各方对同一个事情的处理方式，各个使用方都按它约定好的格式和方法来签发和验证token，这样即使运行的平台不一样，也能够保证token进行正确的传递。</p><p>一般签发JWT的时候，header对应的json结构只需要typ和alg属性就够了。JWT的header部分是把前面的json结构，经过Base64Url编码之后生成出来的：<br><img src="/images/jwt5.png" alt="alt"></p><p>再来看payload部分的结构和生成过程。payload部分是由下面类似格式的json结构生成出来：<br><img src="/images/jwt6.png" alt="alt"></p><p>payload的json结构并不像header那么简单，payload用来承载要传递的数据，它的json结构实际上是对JWT要传递的数据的一组声明，这些声明被JWT标准称为claims，它的一个“属性值对”其实就是一个claim，每一个claim的都代表特定的含义和作用。比如上面结构中的sub代表这个token的所有人，存储的是所有人的ID；name表示这个所有人的名字；admin表示所有人是否管理员的角色。当后面对JWT进行验证的时候，这些claim都能发挥特定的作用。</p><p>根据JWT的标准，这些claims可以分为以下三种类型： </p><p>1.Reserved claims（保留），它的含义就像是编程语言的保留字一样，属于JWT标准里面规定的一些claim。JWT标准里面定好的claim有：</p><p>iss(Issuser)：代表这个JWT的签发主体；<br>sub(Subject)：代表这个JWT的主体，即它的所有人；<br>aud(Audience)：代表这个JWT的接收对象；<br>exp(Expiration time)：是一个时间戳，代表这个JWT的过期时间；<br>nbf(Not Before)：是一个时间戳，代表这个JWT生效的开始时间，意味着在这个时间之前验证JWT是会失败的；<br>iat(Issued at)：是一个时间戳，代表这个JWT的签发时间；<br>jti(JWT ID)：是JWT的唯一标识。</p><p>2.Public claims(这部分不常用，网上也没有特别详细的介绍)</p><p>3.Private claims，这个指的就是自定义的claim。比如前面那个结构举例中的admin和name都属于自定的claim。这些claim跟JWT标准规定的claim区别在于：JWT规定的claim，JWT的接收方在拿到JWT之后，都知道怎么对这些标准的claim进行验证；而private claims不会验证，除非明确告诉接收方要对这些claim进行验证以及规则才行。</p><p>按照JWT标准的说明：保留的claims都是可选的，在生成payload不强制用上面的那些claim，你可以完全按照自己的想法来定义payload的结构，不过这样搞根本没必要：第一是，如果把JWT用于认证， 那么JWT标准内规定的几个claim就足够用了，甚至只需要其中一两个就可以了，假如想往JWT里多存一些用户业务信息，比如角色和用户名等，这倒是用自定义的claim来添加；第二是，JWT标准里面针对它自己规定的claim都提供了有详细的验证规则描述，每个实现库都会参照这个描述来提供JWT的验证实现，所以如果是自定义的claim名称，那么你用到的实现库就不会主动去验证这些claim。</p><p>最后也是把这个json结构做base64url编码之后，就能生成payload部分的串：<br><img src="/images/jwt7.png" alt="alt"></p><p>最后看signature部分的生成过程。签名是把header和payload对应的json结构进行base64url编码之后得到的两个串用英文句点号拼接起来，然后根据header里面alg指定的签名算法生成出来的。算法不同，签名结果不同，但是不同的算法最终要解决的问题是一样的。以alg: HS256为例来说明前面的签名如何来得到。按照前面alg可用值的说明，HS256其实包含的是两种算法：HMAC算法和SHA256算法，前者用于生成摘要，后者用于对摘要进行数字签名。</p><p>以上就是一个JWT包含的全部内容以及它的签发过程。</p><h2 id="JWT的验证过程"><a href="#JWT的验证过程" class="headerlink" title="JWT的验证过程"></a>JWT的验证过程</h2><p>这个部分介绍JWT的验证规则，主要包括签名验证和payload里面各个标准claim的验证逻辑介绍。只有验证成功的JWT，才能当做有效的凭证来使用。</p><p>先说签名验证。当接收方接收到一个JWT的时候，首先要对这个JWT的完整性进行验证，这个就是签名认证。它验证的方法其实很简单，只要把header做base64url解码，就能知道JWT用的什么算法做的签名，然后用这个算法，再次用同样的逻辑对header和payload做一次签名，并比较这个签名是否与JWT本身包含的第三个部分的串是否完全相同，只要不同，就可以认为这个JWT是一个被篡改过的串，自然就属于验证失败了。接收方生成签名的时候必须使用跟JWT发送方相同的密钥，意味着要做好密钥的安全传递或共享。</p><p>再来看payload的claim验证，拿前面标准的claim来一一说明：</p><p>iss(Issuser)：如果签发的时候这个claim的值是“a.com”，验证的时候如果这个claim的值不是“a.com”就属于验证失败；<br>sub(Subject)：如果签发的时候这个claim的值是“liuyunzhuge”，验证的时候如果这个claim的值不是“liuyunzhuge”就属于验证失败；<br>(Audience)：如果签发的时候这个claim的值是“[‘b.com’,’c.com’]”，验证的时候这个claim的值至少要包含b.com，c.com的其中一个才能验证通过；<br>exp(Expiration time)：如果验证的时候超过了这个claim指定的时间，就属于验证失败；<br>nbf(Not Before)：如果验证的时候小于这个claim指定的时间，就属于验证失败；<br>iat(Issued at)：它可以用来做一些maxAge之类的验证，假如验证时间与这个claim指定的时间相差的时间大于通过maxAge指定的一个值，就属于验证失败；<br>jti(JWT ID)：如果签发的时候这个claim的值是“1”，验证的时候如果这个claim的值不是“1”就属于验证失败；<br>需要注意的是，在验证一个JWT的时候，签名认证是每个实现库都会自动做的，但是payload的认证是由使用者来决定的。因为JWT里面可能不会包含任何一个标准的claim，所以它不会自动去验证这些claim。</p><p>以登录认证来说，在签发JWT的时候，完全可以只用sub跟exp两个claim，用sub存储用户的id，用exp存储它本次登录之后的过期时间，然后在验证的时候仅验证exp这个claim，以实现会话的有效期管理。</p><h2 id="JWT-amp-SSO"><a href="#JWT-amp-SSO" class="headerlink" title="JWT&amp;SSO"></a>JWT&amp;SSO</h2><p>场景一：用户发起对业务系统的第一次访问，假设他第一次访问的是系统A的some/page这个页面，它最终成功访问到这个页面的过程是：<br><img src="/images/sso1.png" alt="alt"></p><p>在这个过程里面，我认为理解的关键点在于：</p><ul><li><p>它用到了两个cookie(jwt和sid)和三次重定向来完成会话的创建和会话的传递；</p></li><li><p>jwt的cookie是写在systemA.com这个域下的，所以每次重定向到systemA.com的时候，jwt这个cookie只要有就会带过去；</p></li><li><p>sid的cookie是写在cas.com这个域下的，所以每次重定向到cas.com的时候，sid这个cookie只要有就会带过去；</p></li><li><p>在验证jwt的时候，如何知道当前用户已经创建了sso的会话？<br>因为jwt的payload里面存储了之前创建的sso会话的sessionid，所以当cas拿到jwt，就相当于拿到了sessionid，然后用这个sessionid去判断有没有的对应的session对象即可。</p></li></ul><p>场景二：用户登录之后，继续访问系统A的其它页面，如some/page2，它的处理过程是：<br><img src="/images/sso2.png" alt="alt"></p><p>从这一步可以看出，即使登录之后，也要每次跟CAS校验jwt的有效性以及会话的有效性，其实jwt的有效性也可以放在业务系统里面处理的，但是会话的有效性就必须到CAS那边才能完成了。当CAS拿到jwt里面的sessionid之后，就能到session缓存服务器里面去验证该sessionid对应的session对象是否存在，不存在，就说明会话已经销毁了（退出）。</p><p>场景三：用户登录了系统A之后，再去访问其他系统如系统B的资源，比如系统B的some/page，它最终能访问到系统B的some/page的流程是：<br><img src="/images/sso3.png" alt="alt"></p><p>这个过程的关键在于第一次重定向的时候，它会把sid这个cookie带回给CAS服务器，所以CAS服务器能够判断出会话是否已经建立，如果已经建立就跳过登录页的逻辑。</p><p>场景四：用户继续访问系统B的其它资源，如系统B的some/page2：<br><img src="/images/sso4.png" alt="alt"></p><p>这个场景的逻辑跟场景二完全一致。</p><p>场景五：退出登录，假如它从系统B发起退出，最终的流程是：<br><img src="/images/sso5.png" alt="alt"></p><p>最重要的是要清除sid的cookie，jwt的cookie可能业务系统都有创建，所以不可能在退出的时候还挨个去清除那些系统的cookie，只要sid一清除，那么即使那些jwt的cookie在下次访问的时候还会被传递到业务系统的服务端，由于jwt里面的sid已经无效，所以最后还是会被重定向到CAS登录页进行处理。</p><p>方案总结<br>以上方案两个关键的前提：</p><p>整个会话管理其实还是基于服务端的session来做的，只不过这个session只存在于CAS服务里面；<br>CAS之所以信任业务系统的jwt，是因为这个jwt是CAS签发的，理论上只要认证通过，就可以认为这个jwt是合法的。<br>jwt本身是不可伪造，不可篡改的，但是不代表非法用户冒充正常用法发起请求，所以常规的几个安全策略在实际项目中都应该使用：</p><ul><li>使用https</li><li>使用http-only的cookie，针对sid和jwt</li><li>管理好密钥</li><li>防范CSRF攻击。<br>尤其是CSRF攻击形式，很多都是钻代码的漏洞发生的，所以一旦出现CSRF漏洞，并且被人利用，那么别人就能用获得的jwt，冒充正常用户访问所有业务系统，这个安全问题的后果还是很严重的。考虑到这一点，为了在即使有漏洞的情况将损害减至最小，可以在jwt里面加入一个系统标识，添加一个验证，只有传过来的jwt内的系统标识与发起jwt验证请求的服务一致的情况下，才允许验证通过。这样的话，一个非法用户拿到某个系统的jwt，就不能用来访问其它业务系统了。</li></ul><p>在业务系统跟CAS发起attach/validate请求的时候，也可以在CAS端做些处理，因为这个请求，在一次SSO过程中，一个系统只应该发一次，所以只要之前已经给这个系统签发过jwt了，那么后续 同一系统的attach/validate请求都可以忽略掉。</p><p>总的来说，这个方案的好处有：</p><ul><li><p>完全分布式，跨平台，CAS以及业务系统均可采用不同的语言来开发；</p></li><li><p>业务系统如系统A和系统B，可实现服务端无状态</p></li><li><p>假如是自己来实现，那么可以轻易的在CAS里面集成用户注册服务以及第三方登录服务，如微信登录等。<br>它的缺陷是：</p></li><li><p>第一次登录某个系统，需要三次重定向；</p></li><li><p>登录后的后续请求，每次都需要跟CAS进行会话验证，所以CAS的性能负载会比较大</p></li><li><p>登陆后的后续请求，每次都跟CAS交互，也会增加请求响应时间，影响用户体验。</p></li></ul><h1 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h1><p><strong>JWT数据结构</strong>参考自<a href="https://blog.csdn.net/weixin_42139757/article/details/80689234" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42139757/article/details/80689234</a><br><strong>JWT&amp;SSO</strong>参考自<a href="https://blog.csdn.net/weixin_41282397/article/details/85049850" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41282397/article/details/85049850</a></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>自己还差得多，文章若有不足还希望看到的问题多多指教！</p>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度优先搜索与广度优先搜索</title>
      <link href="/Java/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
      <url>/Java/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>（1）图的表示方法：邻接矩阵（二维数组）、邻接表（链表数组【链表的链表】）。</p><p>（2）图的搜索方法：深度优先搜索（DFS）和广度优先搜索（BFS）。</p><a id="more"></a><h1 id="图的深度优先搜索"><a href="#图的深度优先搜索" class="headerlink" title="图的深度优先搜索"></a>图的深度优先搜索</h1><p>（1）用栈记录下一步的走向。访问一个顶点的过程中要做三件事：</p><pre><code>       ①访问顶点       ②顶点入栈，以便记住它       ③标记顶点，以便不会再访问它（2）访问规则：        a.如果可能，访问一个邻接的未访问顶点，标记它，并入栈。        b.当不能执行a时（没有邻接的未访问顶点），如果栈不为空，就从栈中弹出一个顶点。        c.如果不能执行规则a和b，就完成了整个搜索过程。（3）实现：基于以上规则，循环执行，直到栈为空。每次循环各种，它做四件事：       ①用peek()方法检查栈顶的顶点。       ②试图找到这个顶点还未访问的邻接点。       ③如果没有找到，出栈。       ④如果找到这样的顶点，访问并入栈。</code></pre><p><img src="/images/dfs.jpg" alt="alt"></p><p>比如，采用dfs遍历上图，从A点出发，遍历结果（入栈顺序）为：ABCDE。</p><h1 id="图的广度优先搜索"><a href="#图的广度优先搜索" class="headerlink" title="图的广度优先搜索"></a>图的广度优先搜索</h1><p> （1）用队列记录下一步的走向。深度优先搜素表现的好像是尽快远离起点似的，相反，广度优先搜索中，算法好像要尽可能靠近起始点。</p><pre><code>（2）访问规则：        a.访问下一个未访问的邻接点（如果存在），这个顶点必须是当前顶点的邻接点，标记它，并入队列。        b.如果因为已经没有未访问顶点而不能执行规则a，那么从队列头取一个顶点（如果存在），并使其成为当前顶点。        c.如果因为队列为空而不能执行规则b，则完成了整个搜索过程。（3）实现：基于以上规则，对下图做bfs遍历，其队列的变化如下表所示：</code></pre><p><img src="/images/bfs.jpg" alt="alt"></p><p><img src="/images/bfs1.jpg" alt="alt"><br>   从而，遍历的结果（入队顺序）为ABCDEFGHI。如果采用bfs遍历3中的图，结果为：ABDCE。</p><pre><code>（4）特性：广度优先搜索首先找到与起始点相距一条边的所有顶点，然后是与起始点相距两条边的顶点，以此类推。如果要寻找起始顶点到指定顶点的最短距离，那么这个属性非常有用。首先执行BFS，当找到指定顶点时，就可以说这条路径是到这个顶点的最短路径。如果有更短的路径，BFS算法就应该已经找到它了。</code></pre><h1 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h1><p>DFS、BFS的代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Graph &#123;</span><br><span class="line">private final int MAX_VERTS &#x3D; 20;</span><br><span class="line">private Vertex vertexList[];&#x2F;&#x2F; 顶点数组</span><br><span class="line">private int adjMat[][];&#x2F;&#x2F; 邻接矩阵</span><br><span class="line">private int nVerts;&#x2F;&#x2F; 当前顶点总数</span><br><span class="line">private StackX theStack;</span><br><span class="line">private Queue theQueue;</span><br><span class="line"> </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Graph theGraph &#x3D; new Graph();</span><br><span class="line">theGraph.addVertex(&#39;A&#39;);</span><br><span class="line">theGraph.addVertex(&#39;B&#39;);</span><br><span class="line">theGraph.addVertex(&#39;C&#39;);</span><br><span class="line">theGraph.addVertex(&#39;D&#39;);</span><br><span class="line">theGraph.addVertex(&#39;E&#39;);</span><br><span class="line"> </span><br><span class="line">theGraph.addEdge(0, 1);</span><br><span class="line">theGraph.addEdge(1, 2);</span><br><span class="line">theGraph.addEdge(0, 3);</span><br><span class="line">theGraph.addEdge(3, 4);</span><br><span class="line"> </span><br><span class="line">System.out.print(&quot;visits:&quot;);</span><br><span class="line">&#x2F;&#x2F; theGraph.dfs();</span><br><span class="line">theGraph.bfs();</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public Graph() &#123;&#x2F;&#x2F; 构造图</span><br><span class="line">vertexList &#x3D; new Vertex[MAX_VERTS];</span><br><span class="line"> </span><br><span class="line">adjMat &#x3D; new int[MAX_VERTS][MAX_VERTS];</span><br><span class="line">nVerts &#x3D; 0;</span><br><span class="line">for (int i &#x3D; 0; i &lt; MAX_VERTS; i++) &#123;</span><br><span class="line">for (int j &#x3D; 0; j &lt; MAX_VERTS; j++) &#123;</span><br><span class="line">adjMat[i][j] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">theStack &#x3D; new StackX();</span><br><span class="line">theQueue &#x3D; new Queue();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void addVertex(char lab) &#123;&#x2F;&#x2F; 添加顶点</span><br><span class="line">vertexList[nVerts++] &#x3D; new Vertex(lab);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void addEdge(int start, int end) &#123;&#x2F;&#x2F; 添加边</span><br><span class="line">adjMat[start][end] &#x3D; 1;</span><br><span class="line">adjMat[end][start] &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void displayVertex(int v) &#123;&#x2F;&#x2F; 打印数组中v位置下的顶点名</span><br><span class="line">System.out.print(vertexList[v].lable);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public int getAdjUnvisitedVertex(int v) &#123;&#x2F;&#x2F; 获取和v邻接的未访问的顶点</span><br><span class="line">for (int i &#x3D; 0; i &lt; nVerts; i++) &#123;</span><br><span class="line">if (adjMat[v][i] &#x3D;&#x3D; 1 &amp;&amp; vertexList[i].wasVisited &#x3D;&#x3D; false) &#123;</span><br><span class="line">return i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void dfs() &#123;&#x2F;&#x2F; 深度优先搜索</span><br><span class="line">vertexList[0].wasVisited &#x3D; true;</span><br><span class="line">displayVertex(0);</span><br><span class="line">theStack.push(0);</span><br><span class="line"> </span><br><span class="line">while (!theStack.isEmpty()) &#123;</span><br><span class="line">int v &#x3D; getAdjUnvisitedVertex(theStack.peek());</span><br><span class="line">if (v &#x3D;&#x3D; -1) &#123;</span><br><span class="line">theStack.pop();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">vertexList[v].wasVisited &#x3D; true;</span><br><span class="line">displayVertex(v);</span><br><span class="line">theStack.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">for (int i &#x3D; 0; i &lt; nVerts; i++) &#123;</span><br><span class="line">vertexList[i].wasVisited &#x3D; false;&#x2F;&#x2F; 重置，防止后边再次使用dfs</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void bfs() &#123;&#x2F;&#x2F; 广度优先搜索</span><br><span class="line">vertexList[0].wasVisited &#x3D; true;</span><br><span class="line">displayVertex(0);</span><br><span class="line">theQueue.insert(0);</span><br><span class="line">int v2;</span><br><span class="line"> </span><br><span class="line">while (!theQueue.isEmpty()) &#123;</span><br><span class="line">int v1 &#x3D; theQueue.remove();</span><br><span class="line"> </span><br><span class="line">while ((v2 &#x3D; getAdjUnvisitedVertex(v1)) !&#x3D; -1) &#123;</span><br><span class="line">vertexList[v2].wasVisited &#x3D; true;</span><br><span class="line">displayVertex(v2);</span><br><span class="line">theQueue.insert(v2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">for (int j &#x3D; 0; j &lt; nVerts; j++) &#123;</span><br><span class="line">vertexList[j].wasVisited &#x3D; false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class StackX &#123;&#x2F;&#x2F; 自定义栈</span><br><span class="line">private final int SIZE &#x3D; 20;</span><br><span class="line">private int[] st;</span><br><span class="line">private int top;</span><br><span class="line"> </span><br><span class="line">public StackX() &#123;</span><br><span class="line">st &#x3D; new int[SIZE];</span><br><span class="line">top &#x3D; -1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void push(int j) &#123;</span><br><span class="line">st[++top] &#x3D; j;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public int pop() &#123;</span><br><span class="line">if (top &#x3D;&#x3D; 0) &#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">return st[--top];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public int peek() &#123;</span><br><span class="line">return st[top];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public boolean isEmpty() &#123;</span><br><span class="line">return (top &#x3D;&#x3D; -1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Queue &#123;</span><br><span class="line">private final int SIZE &#x3D; 20;</span><br><span class="line">private int[] queArray;</span><br><span class="line">private int front;</span><br><span class="line">private int rear;</span><br><span class="line"> </span><br><span class="line">public Queue() &#123;</span><br><span class="line">queArray &#x3D; new int[SIZE];</span><br><span class="line">front &#x3D; 0;</span><br><span class="line">rear &#x3D; -1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void insert(int j) &#123;&#x2F;&#x2F; 入队</span><br><span class="line">if (rear &#x3D;&#x3D; SIZE - 1) &#123;</span><br><span class="line">rear &#x3D; -1;</span><br><span class="line">&#125;</span><br><span class="line">queArray[++rear] &#x3D; j;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public int remove() &#123;&#x2F;&#x2F; 出队</span><br><span class="line">if (!isEmpty()) &#123;</span><br><span class="line">return queArray[front++];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public boolean isEmpty() &#123;</span><br><span class="line">return (rear + 1 &#x3D;&#x3D; front);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Vertex &#123;</span><br><span class="line">public char lable;&#x2F;&#x2F; 名字</span><br><span class="line">public boolean wasVisited;</span><br><span class="line"> </span><br><span class="line">public Vertex(char lab) &#123;</span><br><span class="line">lable &#x3D; lab;</span><br><span class="line">wasVisited &#x3D; false;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p>visits:ABDCE</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java集合之HashMap源码分析</title>
      <link href="/Java/java%E9%9B%86%E5%90%88%E4%B9%8BHashMap/"/>
      <url>/Java/java%E9%9B%86%E5%90%88%E4%B9%8BHashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HashMap 作为一种非常非常常用的数据结构，几乎每天都要见面，今天就安排他一下!</p><a id="more"></a><h1 id="HashMap存储的实现"><a href="#HashMap存储的实现" class="headerlink" title="HashMap存储的实现"></a>HashMap存储的实现</h1><p>当我们新new一个HashMap，并将多个key-value放入HashMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String , String&gt; map &#x3D; new HashMap&lt;String , String&gt;();</span><br><span class="line">map.put(&quot;王思聪&quot; , &quot;有钱&quot;);</span><br><span class="line">map.put(&quot;姚明&quot; , &quot;个子高&quot;);   </span><br><span class="line">map.put(&quot;SZ&quot; , &quot;很帅&quot;);</span><br></pre></td></tr></table></figure><p>HashMap 采用一种所谓的“Hash 算法”来决定每个元素的存储位置。</p><p>当程序执行 map.put(“王思聪” , “有钱”); 时，系统将调用”王思聪”的 hashCode() 方法得到其 hashCode 值——每个 Java 对象都有 hashCode() 方法，都可通过该方法获得它的 hashCode 值。得到这个对象的 hashCode 值之后，系统会根据该 hashCode 值来决定该元素的存储位置。</p><p>我们可以看 HashMap 类的 put(K key , V value) 方法的源代码(在 JDK 安装目录下可以找到一个 src.zip 压缩文件，该文件里包含了 Java 基础类库的所有源文件。注释为我手动标注…)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 为 null，调用 putForNullKey 方法进行处理  </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return putForNullKey(value);   </span><br><span class="line"> &#x2F;&#x2F; 根据 key 的 keyCode 计算 Hash 值  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 搜索指定 hash 值在对应 table 中的索引  </span><br><span class="line">     int i &#x3D; indexFor(hash, table.length);  </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next)   </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 找到指定 key 与需要放入的 key 相等（hash 值相同  </span><br><span class="line">     &#x2F;&#x2F; 通过 equals 比较放回 true）  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">     &#123;   </span><br><span class="line">         V oldValue &#x3D; e.value;   </span><br><span class="line">         e.value &#x3D; value;   </span><br><span class="line">         e.recordAccess(this);   </span><br><span class="line">         return oldValue;   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;   </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry   </span><br><span class="line"> modCount++;   </span><br><span class="line"> &#x2F;&#x2F; 将 key、value 添加到 i 索引处  </span><br><span class="line"> addEntry(hash, key, value, i);   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面程序中用到了一个重要的内部接口：Map.Entry，每个 Map.Entry 其实就是一个 key-value 对。从上面程序中可以看出：当系统决定存储 HashMap 中的 key-value 对时，仅仅只是根据 key 来计算并决定每个 Entry 的存储位置。我们完全可以把 Map 集合中的 value 当成 key 的附属，当系统决定了 key 的存储位置之后，value 随之保存在那里即可。</p><h1 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h1><p>在上面的源代码中提供了一个根据hashcode()返回值计算hash码的方法，继续查看其源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static int hash(int h)   </span><br><span class="line">&#123;   </span><br><span class="line">    h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);   </span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到hashcode()方法为一个仅与参数自身有关的方法，对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用 hash(int h) 方法所计算得到的 Hash 码值总是相同的。接下来程序会调用 indexFor(int h, int length) 方法来计算该对象应该保存在 table 数组的哪个索引处。indexFor(int h, int length) 方法的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length)   </span><br><span class="line">&#123;   </span><br><span class="line">    return h &amp; (length-1);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法非常巧妙，它总是通过 h &amp;(table.length -1) 来得到该对象的保存位置——而 HashMap 底层数组的长度总是 2 的 n 次方，这一点可参看后面关于 HashMap 构造器的介绍。</p><p>当 length 总是 2 的倍数时，h &amp; (length-1) 将是一个非常巧妙的设计：假设 h=5,length=16, 那么 h &amp; length - 1 将得到 5；如果 h=6,length=16, 那么 h &amp; length - 1 将得到 6 ……如果 h=15,length=16, 那么 h &amp; length - 1 将得到 15；但是当 h=16 时 , length=16 时，那么 h &amp; length - 1 将得到 0 了；当 h=17 时 , length=16 时，那么 h &amp; length - 1 将得到 1 了……这样保证计算得到的索引值总是位于 table 数组的索引之内。</p><p>根据上面 put 方法的源代码可以看出，当程序试图将一个 key-value 对放入 HashMap 中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但 key 不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部——具体说明继续看 addEntry() 方法的说明。</p><p>当向 HashMap 中添加 key-value 对，由其 key 的 hashCode() 返回值决定该 key-value 对（就是 Entry 对象）的存储位置。当两个 Entry 对象的 key 的 hashCode() 返回值相同时，将由 key 通过 eqauls() 比较值决定是采用覆盖行为（返回 true），还是产生 Entry 链（返回 false）。</p><p>上面程序中还调用了 addEntry(hash, key, value, i); 代码，其中 addEntry 是 HashMap 提供的一个包访问权限的方法，该方法仅用于添加一个 key-value 对。下面是该方法的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex)   </span><br><span class="line">&#123;   </span><br><span class="line">    &#x2F;&#x2F; 获取指定 bucketIndex 索引处的 Entry   </span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; table[bucketIndex];     &#x2F;&#x2F; </span><br><span class="line">    &#x2F;&#x2F; 将新创建的 Entry 放入 bucketIndex 索引处，并让新的 Entry 指向原来的 Entry   </span><br><span class="line">    table[bucketIndex] &#x3D; new Entry&lt;K,V&gt;(hash, key, value, e);   </span><br><span class="line">    &#x2F;&#x2F; 如果 Map 中的 key-value 对的数量超过了极限  </span><br><span class="line">    if (size++ &gt;&#x3D; threshold)   </span><br><span class="line">        &#x2F;&#x2F; 把 table 对象的长度扩充到 2 倍。  </span><br><span class="line">        resize(2 * table.length);    &#x2F;&#x2F; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法的代码很简单，但其中包含了一个非常优雅的设计：系统总是将新添加的 Entry 对象放入 table 数组的 bucketIndex 索引处——如果 bucketIndex 索引处已经有了一个 Entry 对象，那新添加的 Entry 对象指向原有的 Entry 对象（产生一个 Entry 链），如果 bucketIndex 索引处没有 Entry 对象，也就是上面程序①号代码的 e 变量是 null，也就是新放入的 Entry 对象指向 null，也就是没有产生 Entry 链。</p><p>上面程序中还有这样两个变量：</p><pre><code>* size：该变量保存了该 HashMap 中所包含的 key-value 对的数量。* threshold：该变量包含了 HashMap 能容纳的 key-value 对的极限，它的值等于 HashMap 的容量乘以负载因子（load factor）。</code></pre><p>可以看出，当 size++ &gt;= threshold 时，HashMap 会自动调用 resize 方法扩充 HashMap 的容量。每扩充一次，HashMap 的容量就增大一倍。</p><h1 id="HashMap中的构造器"><a href="#HashMap中的构造器" class="headerlink" title="HashMap中的构造器"></a>HashMap中的构造器</h1><p>之前程序中的table实际上就是一个普通数组，，每个数组都有一个固定的长度，这个数组的长度就是 HashMap 的容量。HashMap 包含如下几个构造器：</p><pre><code>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</code></pre><p>当创建一个 HashMap 时，系统会自动创建一个 table 数组来保存 HashMap 中的 Entry，下面是 HashMap 中一个构造器的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line"> public HashMap(int initialCapacity, float loadFactor)   </span><br><span class="line"> &#123;   </span><br><span class="line">     &#x2F;&#x2F; 初始容量不能为负数  </span><br><span class="line">     if (initialCapacity &lt; 0)   </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">        &quot;Illegal initial capacity: &quot; +   </span><br><span class="line">             initialCapacity);   </span><br><span class="line">     &#x2F;&#x2F; 如果初始容量大于最大容量，让出示容量  </span><br><span class="line">     if (initialCapacity &gt; MAXIMUM_CAPACITY)   </span><br><span class="line">         initialCapacity &#x3D; MAXIMUM_CAPACITY;   </span><br><span class="line">     &#x2F;&#x2F; 负载因子必须大于 0 的数值  </span><br><span class="line">     if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor)) &#x2F;&#x2F;标记一 </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">         loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 计算出大于 initialCapacity 的最小的 2 的 n 次方值。  </span><br><span class="line">     int capacity &#x3D; 1;   </span><br><span class="line">     while (capacity &lt; initialCapacity)   </span><br><span class="line">         capacity &lt;&lt;&#x3D; 1;   </span><br><span class="line">     this.loadFactor &#x3D; loadFactor;   </span><br><span class="line">     &#x2F;&#x2F; 设置容量极限等于容量 * 负载因子  </span><br><span class="line">     threshold &#x3D; (int)(capacity * loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 初始化 table 数组  </span><br><span class="line">     table &#x3D; new Entry[capacity];            &#x2F;&#x2F;  </span><br><span class="line">     init();   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面代码中标记一的代码包含了一个简洁的代码实现：找出大于 initialCapacity 的、最小的 2 的 n 次方值，并将其作为 HashMap 的实际容量（由 capacity 变量保存）。例如给定 initialCapacity 为 10，那么该 HashMap 的实际容量就是 16。<br>程序①号代码处可以看到：table 的实质就是一个数组，一个长度为 capacity 的数组。</p><p>对于 HashMap 及其子类而言，它们采用 Hash 算法来决定集合中元素的存储位置。当系统开始初始化 HashMap 时，系统会创建一个长度为 capacity 的 Entry 数组，这个数组里可以存储元素的位置被称为“桶（bucket）”，每个 bucket 都有其指定索引，系统可以根据其索引快速访问该 bucket 里存储的元素。</p><p>无论何时，HashMap 的每个“桶”只存储一个元素（也就是一个 Entry），由于 Entry 对象可以包含一个引用变量（就是 Entry 构造器的的最后一个参数）用于指向下一个 Entry，因此可能出现的情况是：HashMap 的 bucket 中只有一个 Entry，但这个 Entry 指向另一个 Entry ——这就形成了一个 Entry 链。如图所示(图片来源于网络)：</p><p><img src="/images/haspmap.jpg" alt="alt"></p><p>当 HashMap 的每个 bucket 里存储的 Entry 只是单个 Entry ——也就是没有通过指针产生 Entry 链时，此时的 HashMap 具有最好的性能：当程序通过 key 取出对应 value 时，系统只要先计算出该 key 的 hashCode() 返回值，在根据该 hashCode 返回值找出该 key 在 table 数组中的索引，然后取出该索引处的 Entry，最后返回该 key 对应的 value 即可。看 HashMap 类的 get(K key) 方法代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line">public V get(Object key)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 是 null，调用 getForNullKey 取出对应的 value   </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return getForNullKey();   </span><br><span class="line"> &#x2F;&#x2F; 根据该 key 的 hashCode 值计算它的 hash 码  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 直接取出 table 数组中指定索引处的值，  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[indexFor(hash, table.length)];   </span><br><span class="line">     e !&#x3D; null;   </span><br><span class="line">     &#x2F;&#x2F; 搜索该 Entry 链的下一个 Entr   </span><br><span class="line">     e &#x3D; e.next)         &#x2F;&#x2F; ①  </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 如果该 Entry 的 key 与被搜索 key 相同  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">         return e.value;   </span><br><span class="line"> &#125;   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出，如果 HashMap 的每个 bucket 里只有一个 Entry 时，HashMap 可以根据索引、快速地取出该 bucket 里的 Entry；在发生“Hash 冲突”的情况下，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素。</p><p>归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 Hash 算法来决定其存储位置；当需要取出一个 Entry 时，也会根据 Hash 算法找到其存储位置，直接取出该 Entry。由此可见：HashMap 之所以能快速存、取它所包含的 Entry，完全类似于现实生活中母亲从小教我们的：不同的东西要放在不同的位置，需要时才能快速找到它。</p><p>当创建 HashMap 时，有一个默认的负载因子（load factor），其默认值为 0.75，这是时间和空间成本上一种折衷：增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</p><p>掌握了上面知识之后，我们可以在创建 HashMap 时根据实际需要适当地调整 load factor 的值；如果程序比较关心空间开销、内存比较紧张，可以适当地增加负载因子；如果程序比较关心时间开销，内存比较宽裕则可以适当的减少负载因子。通常情况下，程序员无需改变负载因子的值。</p><p>如果开始就知道 HashMap 会保存多个 key-value 对，可以在创建时就使用较大的初始化容量，如果 HashMap 中 Entry 的数量一直不会超过极限容量（capacity * load factor），HashMap 就无需调用 resize() 方法重新分配 table 数组，从而保证较好的性能。当然，开始就将初始容量设置太高可能会浪费空间（系统需要创建一个长度为 capacity 的 Entry 数组），因此创建 HashMap 时初始化容量设置也需要重视起来。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在jdk1.8中对HashMap进行了优化，之后会结合红黑树在一起说，留个待续…</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅实现属性的动态注入</title>
      <link href="/Java/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%AE%9E%E7%8E%B0%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8A%A8%E6%80%81%E6%B3%A8%E5%85%A5/"/>
      <url>/Java/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%AE%9E%E7%8E%B0%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8A%A8%E6%80%81%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是在实际开发中遇到的一个问题。从数据库查询返回的 List&lt; Map&lt; String, Object&gt;&gt; 的集合。并且返回的列名是中文的，项目也没有使用mybatis 直接使用的jdbcTemplate. 并且字段还超级多，这样将数据转换的时候如果一个一个的注入就会让代码臭长臭长的，所以才有了动态注入。<br>我这里我整个思路都贴出来。</p><a id="more"></a><h1 id="实例类Entry"><a href="#实例类Entry" class="headerlink" title="实例类Entry"></a>实例类Entry</h1><p>我们先建一个entry类。用于对象存储。<br>我这里 创建一个BaseDateBean 的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Setter</span><br><span class="line">@Getter</span><br><span class="line">public class BaseDateBean &#123;</span><br><span class="line"></span><br><span class="line">    private String  attribute1;</span><br><span class="line">    private String  attribute2;</span><br><span class="line">    private String  attribute3;</span><br><span class="line">    private String  attribute4;</span><br><span class="line">    private String  attribute5;</span><br><span class="line">    private String  attribute6;</span><br><span class="line">    private String  attribute7;</span><br><span class="line">    private String  attribute8;</span><br><span class="line">    private String  attribute9;</span><br><span class="line">    private String  attribute10;</span><br><span class="line">    private String  attribute11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例就不列很多了，比如有100个，所以如果一个一个的set注入就很low了。</p><h1 id="创建map映射"><a href="#创建map映射" class="headerlink" title="创建map映射"></a>创建map映射</h1><p>在创建好实体类后，还得创建一个静态的map 集合，将数据库的列名和我们实体类的属性名做一个一一对应。这里创建的这个map 集合是我个人愚见。没有想到更好的办法就先这样处理的。<br>我们创建一个BaseDataMap类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public  class BaseDataMap&#123;</span><br><span class="line">    private BaseDataMap()&#123;&#125;</span><br><span class="line">    public static final Map&lt;String,String&gt; cnEnMap&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">    static&#123;</span><br><span class="line">        cnEnMap.put(&quot;属性1&quot;,&quot;attribute1&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性2&quot;,&quot;attribute2&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性3&quot;,&quot;attribute3&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性4&quot;,&quot;attribute4&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性5&quot;,&quot;attribute5&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性6&quot;,&quot;attribute6&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性7&quot;,&quot;attribute7&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性8&quot;,&quot;attribute8&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性9&quot;,&quot;attribute9&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性10&quot;,&quot;attribute10&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性11&quot;,&quot;attribute11&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到就是一个动态的map。</p><h1 id="映射类"><a href="#映射类" class="headerlink" title="映射类"></a>映射类</h1><p>接下来就是核心代码了。我们创建一个ReflectHelper类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class ReflectHelper &#123;</span><br><span class="line"></span><br><span class="line">    private Class cls;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 传过来的对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Object obj;</span><br><span class="line">    private Hashtable&lt;String, Method&gt; getMethods &#x3D; null;</span><br><span class="line">    private Hashtable&lt;String, Method&gt; setMethods &#x3D; null;</span><br><span class="line">    public ReflectHelper(Object o) &#123;</span><br><span class="line">        obj &#x3D; o;</span><br><span class="line">        initMethods();</span><br><span class="line">    &#125;</span><br><span class="line">    public void initMethods() &#123;</span><br><span class="line">        getMethods &#x3D; new Hashtable&lt;&gt;();</span><br><span class="line">        setMethods &#x3D; new Hashtable&lt;&gt;();</span><br><span class="line">        cls &#x3D; obj.getClass();</span><br><span class="line">        Method[] methods &#x3D; cls.getMethods();</span><br><span class="line">        &#x2F;&#x2F; 定义正则表达式，从方法中过滤出getter &#x2F; setter 函数.</span><br><span class="line">        String gs &#x3D; &quot;get(\\w )&quot;;</span><br><span class="line">        Pattern getM &#x3D; Pattern.compile(gs);</span><br><span class="line">        String ss &#x3D; &quot;set(\\w )&quot;;</span><br><span class="line">        Pattern setM &#x3D; Pattern.compile(ss);</span><br><span class="line">        &#x2F;&#x2F; 把方法中的&quot;set&quot; 或者 &quot;get&quot; 去掉,$1匹配第一个</span><br><span class="line">        String rapl &#x3D; &quot;$1&quot;;</span><br><span class="line">        String param;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; methods.length;   i) &#123;</span><br><span class="line">            Method m &#x3D; methods[i];</span><br><span class="line">            String methodName &#x3D; m.getName();</span><br><span class="line">            if (Pattern.matches(gs, methodName)) &#123;</span><br><span class="line">                param &#x3D; getM.matcher(methodName).replaceAll(rapl).toLowerCase();</span><br><span class="line">                getMethods.put(param, m);</span><br><span class="line">            &#125; else if (Pattern.matches(ss, methodName)) &#123;</span><br><span class="line">                param &#x3D; setM.matcher(methodName).replaceAll(rapl).toLowerCase();</span><br><span class="line">                setMethods.put(param, m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean setMethodValue(String property,Object object) &#123;</span><br><span class="line">        Method m &#x3D; setMethods.get(property.toLowerCase());</span><br><span class="line">        if (m !&#x3D; null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F; 调用目标类的setter函数</span><br><span class="line">                m.invoke(obj, object);</span><br><span class="line">                return true;</span><br><span class="line">            &#125; catch (Exception ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以看到其实也就两个方法setMethodValue 和initMethods 。<br>initMethods 方法是在实例化 ReflectHelper 这个类的时候执行的，主要的工作就是找到我们需要动态注入实例类的get 和set 方法。而setMethodValue 方法就是给这个属性赋值的。</p><h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><p> 现在准备工作做好了，怎么使用呢?<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;BaseDateBean&gt; getBaseDateBean(List&lt;Map&lt;String, Object&gt;&gt; mapList)&#123;</span><br><span class="line">       List&lt;BaseDateBean&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">       if(mapList&#x3D;&#x3D;null||mapList.isEmpty())&#123;</span><br><span class="line">           return list;</span><br><span class="line">       &#125;</span><br><span class="line">       BaseDateBean baseDateBean;</span><br><span class="line">       for(Map&lt;String, Object&gt; map:mapList)&#123;</span><br><span class="line">           baseDateBean&#x3D;new BaseDateBean();</span><br><span class="line">           for(Map.Entry&lt;String, Object&gt; entry : map.entrySet())&#123;</span><br><span class="line">               String mapKey &#x3D; entry.getKey();</span><br><span class="line">               log.info(mapKey);</span><br><span class="line">               ReflectHelper reflectHelper &#x3D; new ReflectHelper(baseDateBean);</span><br><span class="line">               log.info(BaseDataMap.cnEnMap.get(mapKey));</span><br><span class="line">               String value&#x3D;entry.getValue()&#x3D;&#x3D;null?ConstantPool.SEPARATORNULL:entry.getValue().toString();</span><br><span class="line">               log.info(value);</span><br><span class="line">               if(entry.getValue()!&#x3D;null)&#123;</span><br><span class="line">                   reflectHelper.setMethodValue(BaseDataMap.cnEnMap.get(mapKey),String.valueOf(entry.getValue()));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           list.add(baseDateBean);</span><br><span class="line">       &#125;</span><br><span class="line">       return list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br> 遍历list 集合中的map，动态的将属性值注入到实体类中。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 动态注入 </tag>
            
            <tag> 映射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 优雅的实现CORS跨域</title>
      <link href="/%E6%A1%86%E6%9E%B6/Spring%20Boot%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0CORS%E8%B7%A8%E5%9F%9F/"/>
      <url>/%E6%A1%86%E6%9E%B6/Spring%20Boot%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0CORS%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  一般的情况下，项目都是前后端分离的，所以这里就涉及到一个很严重的问题，当协议，端口，IP三者有其一不同就会产生跨域，所以需要做跨域支持。</p><a id="more"></a><h1 id="测试跨域的文件"><a href="#测试跨域的文件" class="headerlink" title="测试跨域的文件"></a>测试跨域的文件</h1><p>在这之前，我们先写一个测试接口是否跨域的html ,这样下面的测试比较方便。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;link type&#x3D;&quot;test&#x2F;css&quot; href&#x3D;&quot;css&#x2F;style.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; style&#x3D;&quot;width:600px;height:30px;font-size:14px;&quot; id&#x3D;&quot;urlText&quot; value&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; style&#x3D;&quot;margin: 10px&quot;;  id&#x3D;&quot;cors&quot; value&#x3D;&quot;判断是否可访问&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;http:&#x2F;&#x2F;localhost:9090&#x2F;test&#x2F;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.2.1.min.js&quot;&gt;&lt;&#x2F;script&gt;  </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">$(&quot;#cors&quot;).click(</span><br><span class="line">function()&#123;</span><br><span class="line">var url2 &#x3D; $(&quot;#urlText&quot;).val();</span><br><span class="line">$.post(&#123;</span><br><span class="line">contentType:&#39;application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8&#39;,</span><br><span class="line">url:url2,</span><br><span class="line">data: &quot;&#x2F;rAIeKeSBG1LV XoIq82&#x2F;O&quot;,</span><br><span class="line">success:function(data)&#123;</span><br><span class="line">alert(&quot;success&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>接下来我们来学习下在springboot 项目中怎么实现支持跨域。</p><h1 id="CrossOrigin-注解"><a href="#CrossOrigin-注解" class="headerlink" title="@CrossOrigin 注解"></a>@CrossOrigin 注解</h1><p>这种方法是springboot 自带的，使用比较简单，在需要支持的跨域的接口上加上这个注解就可以了。<br>比如在我们项目的demo 接口加上注解.就表示这个接口支持跨域，其中origins = “*”<br>表示所有的地址都可以访问这个接口，也可以写具体的地址，表示只有这个地址访问才能访问到接口。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@CrossOrigin(origin &#x3D;&quot;*&quot;)</span><br><span class="line">public class Demo &#123;</span><br><span class="line">@RequestMapping(&quot;&#x2F;&quot;)</span><br><span class="line">public String Demo() &#123;</span><br><span class="line">return &quot;Hello Word&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们也来测试一下，启动项目后，在浏览器上运行我们的测试的html文件。<br>发现localhost:9090/test/ 是可以访问的。<br>说明跨域是支持的。大伙可以先将注解去掉测试一下，然后加上注解测试一下进行对比。</p><p>这种方式虽然很简单，但是缺点也不小，需要跨域的接口都需要加上这个注解，这对前后端分离的项目是不友好的，所以这种方式基本上用的很少。</p><h1 id="重写WebMvcConfigurer的addCorsMappings-方法。"><a href="#重写WebMvcConfigurer的addCorsMappings-方法。" class="headerlink" title="重写WebMvcConfigurer的addCorsMappings 方法。"></a>重写WebMvcConfigurer的addCorsMappings 方法。</h1><p>这种方法在实际项目中也用的比较多，是一种全局支持跨域的方法。<br>我们创建一个CorsConfig 类。内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class CorsConfig implements WebMvcConfigurer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">        registry.addMapping(&quot;&#x2F;**&quot;)&#x2F;&#x2F;项目中的所有接口都支持跨域</span><br><span class="line">                .allowedOrigins(&quot;*&quot;)&#x2F;&#x2F;所有地址都可以访问，也可以配置具体地址</span><br><span class="line">                .allowCredentials(true)</span><br><span class="line">                .allowedMethods(&quot;*&quot;)&#x2F;&#x2F;&quot;GET&quot;, &quot;HEAD&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;</span><br><span class="line">                .maxAge(3600);&#x2F;&#x2F; 跨域允许时间</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上@Configuration 表示是配置类，在项目启动的时候会加载。实现WebMvcConfigurer 接口并重写addCorsMappings 方法。代码比较简单，也有注释。</p><p>测试的话，大家可以自行测试，我测试都是通过的和上面一样测试就可以，这里就不占篇幅了。</p><h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>除了上面方法外，也可以使用过滤器。我们创建一个CorsFilter 类，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class CorsFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletResponse response &#x3D; (HttpServletResponse)servletResponse;</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, PUT, GET, OPTIONS, DELETE&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept, client_id, uuid, Authorization&quot;);</span><br><span class="line">        response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;);</span><br><span class="line">        response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中设置response.setHeader(“Access-Control-Allow-Origin”, “*”);表示所有的地址都可以访问项目接口。</p><h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p>接下来我们再介绍一个常用的功能，前后端分离，在访问接口的时候，有的 公司往往会增加一下专属的后缀名才能访问。实际上没有什么太大的作用，能稍微增加一下系统的安全性。这里我就简单是实现一下。真个都非常简单。<br>一样的是实现WebMvcConfigurer 接口，重写configurePathMatch你方法和增加一个dispatcherServlet。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void configurePathMatch(PathMatchConfigurer configurer) &#123;</span><br><span class="line">        configurer.setUseRegisteredSuffixPatternMatch(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean servletRegistrationBean(DispatcherServlet dispatcherServlet) &#123;</span><br><span class="line">        ServletRegistrationBean bean &#x3D; new ServletRegistrationBean(dispatcherServlet);</span><br><span class="line">        bean.addUrlMappings(&quot;*.zlf&quot;);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个功能实现，就只用这个多代码，configurePathMatch方法中设置的configurer.setUseRegisteredSuffixPatternMatch(true); 主要是将index 和index.* 都指向我们controller 中配置的@RequestMapping(“/index”)。</p><p>下面的servletRegistrationBean 方法主要是增加自定义拦截器，只有后缀为“.zlf”的接口才放行。</p><p>这样两步就简单的实现了接口增加自定义的后缀名了。</p><p>到此为止，springboot 支持跨域的方式就差不多了，当然还有其他的实现方式没有研究。这些希望对大家有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/hello-world/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/hello-world/</url>
      
        <content type="html"><![CDATA[<p>谈谈建站之路…</p><a id="more"></a><h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><h3 id="坐井观天"><a href="#坐井观天" class="headerlink" title="坐井观天"></a>坐井观天</h3><p>&ensp;&ensp;转眼毕业已经半年有余，主要的工作状态就好像每天都很忙又感觉不知道自己在忙什么。眨眼一晃半年多就这么过来了，这段时间认识了很多很多人，经历了很多很多事，就像做梦一样。刚好这次赶上疫情(看到的你记得戴口罩，保护好自己)，在家的时间比较多，总结了一下:emm,生活真的好难，好像还是代码简单，那我想尽力把简单的事做好,不然连做自己都做不到，更没什么资格去承担什么责任。</p><h3 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h3><p>&ensp;&ensp;主要写一些自己在工作以及在平时学习上的总结，这段儿会陆续整理之前想总结一直没下手的,今天先简单整理了两个…不定时更新</p><h3 id="总得有个标题吧"><a href="#总得有个标题吧" class="headerlink" title="总得有个标题吧"></a>总得有个标题吧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello word , hello world！</span><br></pre></td></tr></table></figure><p><img src="/images/hello-word.jpg" alt="alt"></p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
