<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jwt单点登录详细整理</title>
      <link href="/%E9%80%9A%E4%BF%A1/jwt%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E8%AF%A6%E7%BB%86%E6%95%B4%E7%90%86/"/>
      <url>/%E9%80%9A%E4%BF%A1/jwt%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E8%AF%A6%E7%BB%86%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作以来接触过两次sso单点登录，一次基于spring security，最近的一次基于jwt。感觉最大的问题就是有时候编程思路不太清晰就开始动手coding，总是蒙蒙的。参与了两次关于登录流程的设计，实在是不应该对这里再糊里糊涂了。痛定思痛，详细整理一下普通的会话管理和基于jwt的单点登录。(由于涉及到工作内容，以下就不用之前的源码展示了)</p><p>补充：下文会话管理部分图片为手绘，jwt相关图片来源于网络。</p><a id="more"></a><h1 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h1><p>在说jwt之前先说一下常用的会话管理  </p><ul><li><p>基于server-session的管理方式</p></li><li><p>cookie-based的管理方式</p></li><li><p>token-based的管理方式</p><ul><li><p><strong>基于server-session的管理</strong></p></li><li><p>(1).服务端session是用户第一次访问应用时，服务器就会创建的对象，代表用户的一次会话过程，服务器为每一个session都分配一个唯一的sessionid，以保证每个用户都有一个不同的session对象。</p></li><li><p>(2).服务器在创建完session后，会把sessionid通过cookie返回给用户所在的浏览器，这样当用户第二次及以后向服务器发送请求的时候，就会通过cookie把sessionid传回给服务器，以便服务器能够根据sessionid找到与该用户对应的session对象。</p></li><li><p>(3).session通常有失效时间的设定，比如2个小时。当失效时间到，服务器会销毁之前的session，并创建新的session返回给用户。但是只要用户在失效时间内，有发送新的请求给服务器，通常服务器都会把他对应的session的失效时间根据当前的请求时间再延长2个小时。</p></li><li><p>(4).session在一开始并不具备会话管理的作用。它只有在用户登录认证成功之后，并且往session对象里面放入了用户登录成功的凭证，才能用来管理会话。管理会话的逻辑也很简单，只要拿到用户的session对象，看它里面有没有登录成功的凭证，就能判断这个用户是否已经登录。当用户主动退出的时候，会把它的session对象里的登录凭证清掉。所以在用户登录前或退出后或者session对象失效时，肯定都是拿不到需要的登录凭证的。</p><p>以上过程可简单使用流程图描述如下：<br><img src="/images/server-session.png" alt="alt"></p><p>该种会话管理方式的优点:个人理解主要就是安全性比较高，因为在浏览器端与服务器端保持会话状态的媒介始终只是一个sessionid串，只要这个串够随机，攻击者就不能轻易冒充他人的sessionid进行操作；除非通过CSRF或http劫持的方式，才有可能冒充别人进行操作；即使冒充成功，也必须被冒充的用户session里面包含有效的登录凭证才行。<br>当然结合这两次的相关开发经验，此种方式也暴露了相当一部分缺点：</p><ul><li>(1).这种方式将会话信息存储在web服务器里面，所以在用户同时在线量比较多时，这些会话信息会占据比较多的内存。</li><li>(2).当应用采用集群部署的时候，会遇到多台web服务器之间如何做session共享的问题。因为session是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建session的服务器，这样他就拿不到之前已经放入到session中的登录凭证之类的信息了</li><li>(3).多个应用要共享session时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好cookie跨域的处理。</li></ul><p>针对问题1和问题2，可以采用redis这种中间服务器来管理session的增删改查，一来减轻web服务器的负担，二来解决不同web服务器共享session的问题。针对问题3，我个人所在的项目是通过生成token来实现的，在跳转系统时将token作为参数传给其它系统(同样需要跨域！！！但无需增加处理逻辑)，然后解析，借此实现多个应用共享同一用户不同系统登陆状态。至于其他方面我这里并不知道什么太好的处理…也欢迎各位同行指点探讨。</p></li><li><p><strong>cookie-based的管理方式</strong></p><p>当用户登录成功之后，把登录凭证写到cookie里面，并给cookie设置有效期，后续请求直接验证存有登录凭证的cookie是否存在以及凭证是否有效，即可判断用户的登录状态。使用该种方式相比于第一种方式减轻了服务器的处理逻辑和复杂程度。使用它来实现会话管理的整体流程如下：</p></li><li><p>(1).用户发起登录请求，服务端根据传入的用户密码之类的身份信息，验证用户是否满足登录条件，如果满足，就根据用户信息创建一个登录凭证，这个登录凭证简单来说就是一个对象，最简单的形式可以只包含用户id，凭证创建时间和过期时间三个值。</p></li><li><p>(2).服务端把上一步创建好的登录凭证，先对它做数字签名，然后再用对称加密算法做加密处理，将签名、加密后的字串，写入cookie。cookie的名字必须固定（如ticket），因为后面再获取的时候，还得根据这个名字来获取cookie值。这一步添加数字签名的目的是防止登录凭证里的信息被篡改，因为一旦信息被篡改，那么下一步做签名验证的时候肯定会失败。做加密的目的，是防止cookie被别人截取的时候，无法轻易读到其中的用户信息。</p></li><li><p>(3).用户登录后发起后续请求，服务端根据上一步存登录凭证的cookie名字，获取到相关的cookie值。然后先做解密处理，再做数字签名的认证，如果这两步都失败，说明这个登录凭证非法；如果这两步成功，接着就可以拿到原始存入的登录凭证了。然后用这个凭证的过期时间和当前时间做对比，判断凭证是否过期，如果过期，就需要用户再重新登录；如果未过期，则允许请求继续。</p><p>以上过程可简单使用流程图描述如下：<br><img src="/images/cookie-based.png" alt="alt"></p><p>这种方式最大的优点就是实现了服务端的无状态化，彻底移除了服务端对会话的管理的逻辑，服务端只需要负责创建和验证登录cookie即可，无需保持用户的状态信息。对于第一种方式的第二个问题，用户会话信息共享的问题，它也能很好解决：因为如果只是同一个应用做集群部署，由于验证登录凭证的代码都是一样的，所以不管是哪个服务器处理用户请求，总能拿到cookie中的登录凭证来进行验证；如果是不同的应用，只要每个应用都包含相同的登录逻辑，那么他们也是能轻易实现会话共享的，不过这种情况下，登录逻辑里面数字签名以及加密解密要用到的密钥文件或者密钥串，需要在不同的应用里面共享，总而言之，就是需要算法完全保持一致。</p><p>这种方式由于把登录凭证直接存放客户端，并且需要cookie传来传去，所以它的缺点也比较明显：</p><p>cookie有大小限制，存储不了太多数据，所以要是登录凭证存的消息过多，导致加密签名后的串太长，就会引发别的问题，比- (1).如其它业务场景需要cookie的时候，就有可能没那么多空间可用了；所以用的时候得谨慎，得观察实际的登录cookie的大小；比如太长，就要考虑是非是数字签名的算法太严格，导致签名后的串太长，那就适当调整签名逻辑；比如如果一开始用4096位的RSA算法做数字签名，可以考虑换成1024、2048位；</p></li><li><p>(2).每次传送cookie，增加了请求的数量，对访问性能也有影响；</p></li><li><p>(3).也有跨域问题，毕竟还是要用cookie。</p></li><li><p><strong>token-based的管理方式</strong></p><p>这种方式从流程和实现上来说，跟cookie-based的方式没有太多区别，只不过cookie-based里面写到cookie里面的ticket在这种方式下称为token，这个token在返回给客户端之后，后续请求都必须通过url参数或者是http header的形式，主动带上token，这样服务端接收到请求之后就能直接从http header或者url里面取到token进行验证：</p><p>流程如下：<br><img src="/images/token-based.png" alt="alt"></p><p>token可以存于localStorage或者sessionStorage里面，然后每发ajax请求的时候，都把token拿出来放到ajax请求的header里即可。不过如果是非接口的请求，比如直接通过点击链接请求一个页面这种，是无法自动带上token的。所以这种方式也仅限于走纯接口的web应用。</p><p>这种方式用在web应用里也有跨域的问题，比如应用如果部署在a.com，api服务部署在b.com，从a.com里面发出ajax请求到b.com，默认情况下是会报跨域错误的，这种问题可以用CORS（跨域资源共享）的方式来快速解决。这里就是我之前提到的第一种方式缺点三的解决。</p><p>这种方式跟cookie-based的方式同样都还有的一个问题就是ticket或者token刷新的问题。有的产品里面，你肯定不希望用户登录后，操作了半个小时，结果ticket或者token到了过期时间，然后用户又得去重新登录的情况出现。这个时候就得考虑ticket或token的自动刷新的问题，简单来说，可以在验证ticket或token有效之后，自动把ticket或token的失效时间延长，然后把它再返回给客户端；客户端如果检测到服务器有返回新的ticket或token，就替换原来的ticket或token。</p></li></ul></li></ul><p><strong>三种方式小结</strong>  </p><p>在web应用里面，会话管理的安全性始终是最重要的安全问题，这个对用户的影响极大。</p><p>首先从会话管理凭证来说，第一种方式的会话凭证仅仅是一个sessionid，所以只要这个sessionid足够随机，而不是一个自增的数字id值，那么其它人就不可能轻易地冒充别人的sessionid进行操作；第二种方式的凭证ticket以及第三种方式的凭证token都是一个在服务端做了数字签名，和加密处理的串，所以只要密钥不泄露，别人也无法轻易地拿到这个串中的有效信息并对它进行篡改。总之，这三种会话管理方式的凭证本身是比较安全的。</p><p>然后从客户端和服务端的http过程来说，当别人截获到客户端请求中的会话凭证，就能拿这个凭证冒充原用户，做一些非法操作，而服务器也认不出来。这种安全问题，可以简单采用https来解决，虽然可能还有http劫持这种更高程度的威胁存在，但是从代码能做的防范，确实也就是这个层次了。</p><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h2 id="JWT介绍"><a href="#JWT介绍" class="headerlink" title="JWT介绍"></a>JWT介绍</h2><p>JSON Web Token（JWT）是一个开放标准（RFC 7519），它定义了一种紧凑和自包含的方式，用于在各方之间作为JSON对象安全地传输信息。作为标准，它没有提供技术实现，但是大部分的语言平台都有按照它规定的内容提供了自己的技术实现，所以实际在用的时候，只要根据自己当前项目的技术平台，到官网上选用合适的实现库即可。</p><p>使用JWT来传输数据，实际上传输的是一个字符串，这个字符串就是所谓的json web token字符串。所以广义上，JWT是一个标准的名称；狭义上，JWT指的就是用来传递的那个token字符串。这个串有两个特点： </p><ol><li>紧凑：指的是这个串很小，能通过url 参数，http请求提交的数据以及http header的方式来传递； </li><li>自包含：这个串可以包含很多信息，比如用户的id、角色等，别人拿到这个串，就能拿到这些关键的业务信息，从而避免再通过数据库查询等方式才能得到它们。</li></ol><p>通常一个JWT是长这个样子的：<br><img src="/images/jwt1.png" alt="alt"></p><h2 id="JWT的数据结构"><a href="#JWT的数据结构" class="headerlink" title="JWT的数据结构"></a>JWT的数据结构</h2><p>一个JWT实际上是由三个部分组成：header（头部）、payload（载荷）和signature（签名）。这三个部分在JWT里面分别对应英文句号分隔出来的三个串：<br><img src="/images/jwt2.png" alt="alt"></p><p>先来看header部分的结构以及它的生成方法。header部分是由下面格式的json结构生成出来：<br><img src="/images/jwt3.png" alt="alt"></p><p>这个json中的typ属性，用来标识整个token字符串是一个JWT字符串；它的alg属性，用来说明这个JWT签发的时候所使用的签名和摘要算法。typ跟alg属性的全称其实是type跟algorithm，分别是类型跟算法的意思。之所以都用三个字母来表示，也是基于JWT最终字串大小的考虑，同时也是跟JWT这个名称保持一致，这样就都是三个字符了…typ跟alg是JWT中标准中规定的属性名称，虽然在签发JWT的时候，也可以把这两个名称换掉，但是如果随意更换了这个名称，就有可能在JWT验证的时候碰到问题，因为拿到JWT的人，默认会根据typ和alg去拿JWT中的header信息，当你改了名称之后，显然别人是拿不到header信息的，他又不知道你把这两个名字换成了什么。JWT作为标准的意义在于统一各方对同一个事情的处理方式，各个使用方都按它约定好的格式和方法来签发和验证token，这样即使运行的平台不一样，也能够保证token进行正确的传递。</p><p>一般签发JWT的时候，header对应的json结构只需要typ和alg属性就够了。JWT的header部分是把前面的json结构，经过Base64Url编码之后生成出来的：<br><img src="/images/jwt5.png" alt="alt"></p><p>再来看payload部分的结构和生成过程。payload部分是由下面类似格式的json结构生成出来：<br><img src="/images/jwt6.png" alt="alt"></p><p>payload的json结构并不像header那么简单，payload用来承载要传递的数据，它的json结构实际上是对JWT要传递的数据的一组声明，这些声明被JWT标准称为claims，它的一个“属性值对”其实就是一个claim，每一个claim的都代表特定的含义和作用。比如上面结构中的sub代表这个token的所有人，存储的是所有人的ID；name表示这个所有人的名字；admin表示所有人是否管理员的角色。当后面对JWT进行验证的时候，这些claim都能发挥特定的作用。</p><p>根据JWT的标准，这些claims可以分为以下三种类型： </p><p>1.Reserved claims（保留），它的含义就像是编程语言的保留字一样，属于JWT标准里面规定的一些claim。JWT标准里面定好的claim有：</p><p>iss(Issuser)：代表这个JWT的签发主体；<br>sub(Subject)：代表这个JWT的主体，即它的所有人；<br>aud(Audience)：代表这个JWT的接收对象；<br>exp(Expiration time)：是一个时间戳，代表这个JWT的过期时间；<br>nbf(Not Before)：是一个时间戳，代表这个JWT生效的开始时间，意味着在这个时间之前验证JWT是会失败的；<br>iat(Issued at)：是一个时间戳，代表这个JWT的签发时间；<br>jti(JWT ID)：是JWT的唯一标识。</p><p>2.Public claims(这部分不常用，网上也没有特别详细的介绍)</p><p>3.Private claims，这个指的就是自定义的claim。比如前面那个结构举例中的admin和name都属于自定的claim。这些claim跟JWT标准规定的claim区别在于：JWT规定的claim，JWT的接收方在拿到JWT之后，都知道怎么对这些标准的claim进行验证；而private claims不会验证，除非明确告诉接收方要对这些claim进行验证以及规则才行。</p><p>按照JWT标准的说明：保留的claims都是可选的，在生成payload不强制用上面的那些claim，你可以完全按照自己的想法来定义payload的结构，不过这样搞根本没必要：第一是，如果把JWT用于认证， 那么JWT标准内规定的几个claim就足够用了，甚至只需要其中一两个就可以了，假如想往JWT里多存一些用户业务信息，比如角色和用户名等，这倒是用自定义的claim来添加；第二是，JWT标准里面针对它自己规定的claim都提供了有详细的验证规则描述，每个实现库都会参照这个描述来提供JWT的验证实现，所以如果是自定义的claim名称，那么你用到的实现库就不会主动去验证这些claim。</p><p>最后也是把这个json结构做base64url编码之后，就能生成payload部分的串：<br><img src="/images/jwt7.png" alt="alt"></p><p>最后看signature部分的生成过程。签名是把header和payload对应的json结构进行base64url编码之后得到的两个串用英文句点号拼接起来，然后根据header里面alg指定的签名算法生成出来的。算法不同，签名结果不同，但是不同的算法最终要解决的问题是一样的。以alg: HS256为例来说明前面的签名如何来得到。按照前面alg可用值的说明，HS256其实包含的是两种算法：HMAC算法和SHA256算法，前者用于生成摘要，后者用于对摘要进行数字签名。</p><p>以上就是一个JWT包含的全部内容以及它的签发过程。</p><h2 id="JWT的验证过程"><a href="#JWT的验证过程" class="headerlink" title="JWT的验证过程"></a>JWT的验证过程</h2><p>这个部分介绍JWT的验证规则，主要包括签名验证和payload里面各个标准claim的验证逻辑介绍。只有验证成功的JWT，才能当做有效的凭证来使用。</p><p>先说签名验证。当接收方接收到一个JWT的时候，首先要对这个JWT的完整性进行验证，这个就是签名认证。它验证的方法其实很简单，只要把header做base64url解码，就能知道JWT用的什么算法做的签名，然后用这个算法，再次用同样的逻辑对header和payload做一次签名，并比较这个签名是否与JWT本身包含的第三个部分的串是否完全相同，只要不同，就可以认为这个JWT是一个被篡改过的串，自然就属于验证失败了。接收方生成签名的时候必须使用跟JWT发送方相同的密钥，意味着要做好密钥的安全传递或共享。</p><p>再来看payload的claim验证，拿前面标准的claim来一一说明：</p><p>iss(Issuser)：如果签发的时候这个claim的值是“a.com”，验证的时候如果这个claim的值不是“a.com”就属于验证失败；<br>sub(Subject)：如果签发的时候这个claim的值是“liuyunzhuge”，验证的时候如果这个claim的值不是“liuyunzhuge”就属于验证失败；<br>(Audience)：如果签发的时候这个claim的值是“[‘b.com’,’c.com’]”，验证的时候这个claim的值至少要包含b.com，c.com的其中一个才能验证通过；<br>exp(Expiration time)：如果验证的时候超过了这个claim指定的时间，就属于验证失败；<br>nbf(Not Before)：如果验证的时候小于这个claim指定的时间，就属于验证失败；<br>iat(Issued at)：它可以用来做一些maxAge之类的验证，假如验证时间与这个claim指定的时间相差的时间大于通过maxAge指定的一个值，就属于验证失败；<br>jti(JWT ID)：如果签发的时候这个claim的值是“1”，验证的时候如果这个claim的值不是“1”就属于验证失败；<br>需要注意的是，在验证一个JWT的时候，签名认证是每个实现库都会自动做的，但是payload的认证是由使用者来决定的。因为JWT里面可能不会包含任何一个标准的claim，所以它不会自动去验证这些claim。</p><p>以登录认证来说，在签发JWT的时候，完全可以只用sub跟exp两个claim，用sub存储用户的id，用exp存储它本次登录之后的过期时间，然后在验证的时候仅验证exp这个claim，以实现会话的有效期管理。</p><h2 id="JWT-amp-SSO"><a href="#JWT-amp-SSO" class="headerlink" title="JWT&amp;SSO"></a>JWT&amp;SSO</h2><p>场景一：用户发起对业务系统的第一次访问，假设他第一次访问的是系统A的some/page这个页面，它最终成功访问到这个页面的过程是：<br><img src="/images/sso1.png" alt="alt"></p><p>在这个过程里面，我认为理解的关键点在于：</p><ul><li><p>它用到了两个cookie(jwt和sid)和三次重定向来完成会话的创建和会话的传递；</p></li><li><p>jwt的cookie是写在systemA.com这个域下的，所以每次重定向到systemA.com的时候，jwt这个cookie只要有就会带过去；</p></li><li><p>sid的cookie是写在cas.com这个域下的，所以每次重定向到cas.com的时候，sid这个cookie只要有就会带过去；</p></li><li><p>在验证jwt的时候，如何知道当前用户已经创建了sso的会话？<br>因为jwt的payload里面存储了之前创建的sso会话的sessionid，所以当cas拿到jwt，就相当于拿到了sessionid，然后用这个sessionid去判断有没有的对应的session对象即可。</p></li></ul><p>场景二：用户登录之后，继续访问系统A的其它页面，如some/page2，它的处理过程是：<br><img src="/images/sso2.png" alt="alt"></p><p>从这一步可以看出，即使登录之后，也要每次跟CAS校验jwt的有效性以及会话的有效性，其实jwt的有效性也可以放在业务系统里面处理的，但是会话的有效性就必须到CAS那边才能完成了。当CAS拿到jwt里面的sessionid之后，就能到session缓存服务器里面去验证该sessionid对应的session对象是否存在，不存在，就说明会话已经销毁了（退出）。</p><p>场景三：用户登录了系统A之后，再去访问其他系统如系统B的资源，比如系统B的some/page，它最终能访问到系统B的some/page的流程是：<br><img src="/images/sso3.png" alt="alt"></p><p>这个过程的关键在于第一次重定向的时候，它会把sid这个cookie带回给CAS服务器，所以CAS服务器能够判断出会话是否已经建立，如果已经建立就跳过登录页的逻辑。</p><p>场景四：用户继续访问系统B的其它资源，如系统B的some/page2：<br><img src="/images/sso4.png" alt="alt"></p><p>这个场景的逻辑跟场景二完全一致。</p><p>场景五：退出登录，假如它从系统B发起退出，最终的流程是：<br><img src="/images/sso5.png" alt="alt"></p><p>最重要的是要清除sid的cookie，jwt的cookie可能业务系统都有创建，所以不可能在退出的时候还挨个去清除那些系统的cookie，只要sid一清除，那么即使那些jwt的cookie在下次访问的时候还会被传递到业务系统的服务端，由于jwt里面的sid已经无效，所以最后还是会被重定向到CAS登录页进行处理。</p><p>方案总结<br>以上方案两个关键的前提：</p><p>整个会话管理其实还是基于服务端的session来做的，只不过这个session只存在于CAS服务里面；<br>CAS之所以信任业务系统的jwt，是因为这个jwt是CAS签发的，理论上只要认证通过，就可以认为这个jwt是合法的。<br>jwt本身是不可伪造，不可篡改的，但是不代表非法用户冒充正常用法发起请求，所以常规的几个安全策略在实际项目中都应该使用：</p><ul><li>使用https</li><li>使用http-only的cookie，针对sid和jwt</li><li>管理好密钥</li><li>防范CSRF攻击。<br>尤其是CSRF攻击形式，很多都是钻代码的漏洞发生的，所以一旦出现CSRF漏洞，并且被人利用，那么别人就能用获得的jwt，冒充正常用户访问所有业务系统，这个安全问题的后果还是很严重的。考虑到这一点，为了在即使有漏洞的情况将损害减至最小，可以在jwt里面加入一个系统标识，添加一个验证，只有传过来的jwt内的系统标识与发起jwt验证请求的服务一致的情况下，才允许验证通过。这样的话，一个非法用户拿到某个系统的jwt，就不能用来访问其它业务系统了。</li></ul><p>在业务系统跟CAS发起attach/validate请求的时候，也可以在CAS端做些处理，因为这个请求，在一次SSO过程中，一个系统只应该发一次，所以只要之前已经给这个系统签发过jwt了，那么后续 同一系统的attach/validate请求都可以忽略掉。</p><p>总的来说，这个方案的好处有：</p><ul><li><p>完全分布式，跨平台，CAS以及业务系统均可采用不同的语言来开发；</p></li><li><p>业务系统如系统A和系统B，可实现服务端无状态</p></li><li><p>假如是自己来实现，那么可以轻易的在CAS里面集成用户注册服务以及第三方登录服务，如微信登录等。<br>它的缺陷是：</p></li><li><p>第一次登录某个系统，需要三次重定向；</p></li><li><p>登录后的后续请求，每次都需要跟CAS进行会话验证，所以CAS的性能负载会比较大</p></li><li><p>登陆后的后续请求，每次都跟CAS交互，也会增加请求响应时间，影响用户体验。</p></li></ul><h1 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h1><p><strong>JWT数据结构</strong>参考自<a href="https://blog.csdn.net/weixin_42139757/article/details/80689234" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42139757/article/details/80689234</a><br><strong>JWT&amp;SSO</strong>参考自<a href="https://blog.csdn.net/weixin_41282397/article/details/85049850" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41282397/article/details/85049850</a></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>自己还差得多，文章若有不足还希望看到的问题多多指教！</p>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度优先搜索与广度优先搜索</title>
      <link href="/Java/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
      <url>/Java/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>（1）图的表示方法：邻接矩阵（二维数组）、邻接表（链表数组【链表的链表】）。</p><p>（2）图的搜索方法：深度优先搜索（DFS）和广度优先搜索（BFS）。</p><a id="more"></a><h1 id="图的深度优先搜索"><a href="#图的深度优先搜索" class="headerlink" title="图的深度优先搜索"></a>图的深度优先搜索</h1><p>（1）用栈记录下一步的走向。访问一个顶点的过程中要做三件事：</p><pre><code>       ①访问顶点       ②顶点入栈，以便记住它       ③标记顶点，以便不会再访问它（2）访问规则：        a.如果可能，访问一个邻接的未访问顶点，标记它，并入栈。        b.当不能执行a时（没有邻接的未访问顶点），如果栈不为空，就从栈中弹出一个顶点。        c.如果不能执行规则a和b，就完成了整个搜索过程。（3）实现：基于以上规则，循环执行，直到栈为空。每次循环各种，它做四件事：       ①用peek()方法检查栈顶的顶点。       ②试图找到这个顶点还未访问的邻接点。       ③如果没有找到，出栈。       ④如果找到这样的顶点，访问并入栈。</code></pre><p><img src="/images/dfs.jpg" alt="alt"></p><p>比如，采用dfs遍历上图，从A点出发，遍历结果（入栈顺序）为：ABCDE。</p><h1 id="图的广度优先搜索"><a href="#图的广度优先搜索" class="headerlink" title="图的广度优先搜索"></a>图的广度优先搜索</h1><p> （1）用队列记录下一步的走向。深度优先搜素表现的好像是尽快远离起点似的，相反，广度优先搜索中，算法好像要尽可能靠近起始点。</p><pre><code>（2）访问规则：        a.访问下一个未访问的邻接点（如果存在），这个顶点必须是当前顶点的邻接点，标记它，并入队列。        b.如果因为已经没有未访问顶点而不能执行规则a，那么从队列头取一个顶点（如果存在），并使其成为当前顶点。        c.如果因为队列为空而不能执行规则b，则完成了整个搜索过程。（3）实现：基于以上规则，对下图做bfs遍历，其队列的变化如下表所示：</code></pre><p><img src="/images/bfs.jpg" alt="alt"></p><p><img src="/images/bfs1.jpg" alt="alt"><br>   从而，遍历的结果（入队顺序）为ABCDEFGHI。如果采用bfs遍历3中的图，结果为：ABDCE。</p><pre><code>（4）特性：广度优先搜索首先找到与起始点相距一条边的所有顶点，然后是与起始点相距两条边的顶点，以此类推。如果要寻找起始顶点到指定顶点的最短距离，那么这个属性非常有用。首先执行BFS，当找到指定顶点时，就可以说这条路径是到这个顶点的最短路径。如果有更短的路径，BFS算法就应该已经找到它了。</code></pre><h1 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h1><p>DFS、BFS的代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Graph &#123;</span><br><span class="line">private final int MAX_VERTS &#x3D; 20;</span><br><span class="line">private Vertex vertexList[];&#x2F;&#x2F; 顶点数组</span><br><span class="line">private int adjMat[][];&#x2F;&#x2F; 邻接矩阵</span><br><span class="line">private int nVerts;&#x2F;&#x2F; 当前顶点总数</span><br><span class="line">private StackX theStack;</span><br><span class="line">private Queue theQueue;</span><br><span class="line"> </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Graph theGraph &#x3D; new Graph();</span><br><span class="line">theGraph.addVertex(&#39;A&#39;);</span><br><span class="line">theGraph.addVertex(&#39;B&#39;);</span><br><span class="line">theGraph.addVertex(&#39;C&#39;);</span><br><span class="line">theGraph.addVertex(&#39;D&#39;);</span><br><span class="line">theGraph.addVertex(&#39;E&#39;);</span><br><span class="line"> </span><br><span class="line">theGraph.addEdge(0, 1);</span><br><span class="line">theGraph.addEdge(1, 2);</span><br><span class="line">theGraph.addEdge(0, 3);</span><br><span class="line">theGraph.addEdge(3, 4);</span><br><span class="line"> </span><br><span class="line">System.out.print(&quot;visits:&quot;);</span><br><span class="line">&#x2F;&#x2F; theGraph.dfs();</span><br><span class="line">theGraph.bfs();</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public Graph() &#123;&#x2F;&#x2F; 构造图</span><br><span class="line">vertexList &#x3D; new Vertex[MAX_VERTS];</span><br><span class="line"> </span><br><span class="line">adjMat &#x3D; new int[MAX_VERTS][MAX_VERTS];</span><br><span class="line">nVerts &#x3D; 0;</span><br><span class="line">for (int i &#x3D; 0; i &lt; MAX_VERTS; i++) &#123;</span><br><span class="line">for (int j &#x3D; 0; j &lt; MAX_VERTS; j++) &#123;</span><br><span class="line">adjMat[i][j] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">theStack &#x3D; new StackX();</span><br><span class="line">theQueue &#x3D; new Queue();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void addVertex(char lab) &#123;&#x2F;&#x2F; 添加顶点</span><br><span class="line">vertexList[nVerts++] &#x3D; new Vertex(lab);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void addEdge(int start, int end) &#123;&#x2F;&#x2F; 添加边</span><br><span class="line">adjMat[start][end] &#x3D; 1;</span><br><span class="line">adjMat[end][start] &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void displayVertex(int v) &#123;&#x2F;&#x2F; 打印数组中v位置下的顶点名</span><br><span class="line">System.out.print(vertexList[v].lable);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public int getAdjUnvisitedVertex(int v) &#123;&#x2F;&#x2F; 获取和v邻接的未访问的顶点</span><br><span class="line">for (int i &#x3D; 0; i &lt; nVerts; i++) &#123;</span><br><span class="line">if (adjMat[v][i] &#x3D;&#x3D; 1 &amp;&amp; vertexList[i].wasVisited &#x3D;&#x3D; false) &#123;</span><br><span class="line">return i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void dfs() &#123;&#x2F;&#x2F; 深度优先搜索</span><br><span class="line">vertexList[0].wasVisited &#x3D; true;</span><br><span class="line">displayVertex(0);</span><br><span class="line">theStack.push(0);</span><br><span class="line"> </span><br><span class="line">while (!theStack.isEmpty()) &#123;</span><br><span class="line">int v &#x3D; getAdjUnvisitedVertex(theStack.peek());</span><br><span class="line">if (v &#x3D;&#x3D; -1) &#123;</span><br><span class="line">theStack.pop();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">vertexList[v].wasVisited &#x3D; true;</span><br><span class="line">displayVertex(v);</span><br><span class="line">theStack.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">for (int i &#x3D; 0; i &lt; nVerts; i++) &#123;</span><br><span class="line">vertexList[i].wasVisited &#x3D; false;&#x2F;&#x2F; 重置，防止后边再次使用dfs</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void bfs() &#123;&#x2F;&#x2F; 广度优先搜索</span><br><span class="line">vertexList[0].wasVisited &#x3D; true;</span><br><span class="line">displayVertex(0);</span><br><span class="line">theQueue.insert(0);</span><br><span class="line">int v2;</span><br><span class="line"> </span><br><span class="line">while (!theQueue.isEmpty()) &#123;</span><br><span class="line">int v1 &#x3D; theQueue.remove();</span><br><span class="line"> </span><br><span class="line">while ((v2 &#x3D; getAdjUnvisitedVertex(v1)) !&#x3D; -1) &#123;</span><br><span class="line">vertexList[v2].wasVisited &#x3D; true;</span><br><span class="line">displayVertex(v2);</span><br><span class="line">theQueue.insert(v2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">for (int j &#x3D; 0; j &lt; nVerts; j++) &#123;</span><br><span class="line">vertexList[j].wasVisited &#x3D; false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class StackX &#123;&#x2F;&#x2F; 自定义栈</span><br><span class="line">private final int SIZE &#x3D; 20;</span><br><span class="line">private int[] st;</span><br><span class="line">private int top;</span><br><span class="line"> </span><br><span class="line">public StackX() &#123;</span><br><span class="line">st &#x3D; new int[SIZE];</span><br><span class="line">top &#x3D; -1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void push(int j) &#123;</span><br><span class="line">st[++top] &#x3D; j;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public int pop() &#123;</span><br><span class="line">if (top &#x3D;&#x3D; 0) &#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">return st[--top];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public int peek() &#123;</span><br><span class="line">return st[top];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public boolean isEmpty() &#123;</span><br><span class="line">return (top &#x3D;&#x3D; -1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Queue &#123;</span><br><span class="line">private final int SIZE &#x3D; 20;</span><br><span class="line">private int[] queArray;</span><br><span class="line">private int front;</span><br><span class="line">private int rear;</span><br><span class="line"> </span><br><span class="line">public Queue() &#123;</span><br><span class="line">queArray &#x3D; new int[SIZE];</span><br><span class="line">front &#x3D; 0;</span><br><span class="line">rear &#x3D; -1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void insert(int j) &#123;&#x2F;&#x2F; 入队</span><br><span class="line">if (rear &#x3D;&#x3D; SIZE - 1) &#123;</span><br><span class="line">rear &#x3D; -1;</span><br><span class="line">&#125;</span><br><span class="line">queArray[++rear] &#x3D; j;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public int remove() &#123;&#x2F;&#x2F; 出队</span><br><span class="line">if (!isEmpty()) &#123;</span><br><span class="line">return queArray[front++];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public boolean isEmpty() &#123;</span><br><span class="line">return (rear + 1 &#x3D;&#x3D; front);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Vertex &#123;</span><br><span class="line">public char lable;&#x2F;&#x2F; 名字</span><br><span class="line">public boolean wasVisited;</span><br><span class="line"> </span><br><span class="line">public Vertex(char lab) &#123;</span><br><span class="line">lable &#x3D; lab;</span><br><span class="line">wasVisited &#x3D; false;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p>visits:ABDCE</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java集合之HashMap源码分析</title>
      <link href="/Java/java%E9%9B%86%E5%90%88%E4%B9%8BHashMap/"/>
      <url>/Java/java%E9%9B%86%E5%90%88%E4%B9%8BHashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HashMap 作为一种非常非常常用的数据结构，几乎每天都要见面，今天就安排他一下!</p><a id="more"></a><h1 id="HashMap存储的实现"><a href="#HashMap存储的实现" class="headerlink" title="HashMap存储的实现"></a>HashMap存储的实现</h1><p>当我们新new一个HashMap，并将多个key-value放入HashMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String , String&gt; map &#x3D; new HashMap&lt;String , String&gt;();</span><br><span class="line">map.put(&quot;王思聪&quot; , &quot;有钱&quot;);</span><br><span class="line">map.put(&quot;姚明&quot; , &quot;个子高&quot;);   </span><br><span class="line">map.put(&quot;SZ&quot; , &quot;很帅&quot;);</span><br></pre></td></tr></table></figure><p>HashMap 采用一种所谓的“Hash 算法”来决定每个元素的存储位置。</p><p>当程序执行 map.put(“王思聪” , “有钱”); 时，系统将调用”王思聪”的 hashCode() 方法得到其 hashCode 值——每个 Java 对象都有 hashCode() 方法，都可通过该方法获得它的 hashCode 值。得到这个对象的 hashCode 值之后，系统会根据该 hashCode 值来决定该元素的存储位置。</p><p>我们可以看 HashMap 类的 put(K key , V value) 方法的源代码(在 JDK 安装目录下可以找到一个 src.zip 压缩文件，该文件里包含了 Java 基础类库的所有源文件。注释为我手动标注…)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 为 null，调用 putForNullKey 方法进行处理  </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return putForNullKey(value);   </span><br><span class="line"> &#x2F;&#x2F; 根据 key 的 keyCode 计算 Hash 值  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 搜索指定 hash 值在对应 table 中的索引  </span><br><span class="line">     int i &#x3D; indexFor(hash, table.length);  </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next)   </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 找到指定 key 与需要放入的 key 相等（hash 值相同  </span><br><span class="line">     &#x2F;&#x2F; 通过 equals 比较放回 true）  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">     &#123;   </span><br><span class="line">         V oldValue &#x3D; e.value;   </span><br><span class="line">         e.value &#x3D; value;   </span><br><span class="line">         e.recordAccess(this);   </span><br><span class="line">         return oldValue;   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;   </span><br><span class="line"> &#x2F;&#x2F; 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry   </span><br><span class="line"> modCount++;   </span><br><span class="line"> &#x2F;&#x2F; 将 key、value 添加到 i 索引处  </span><br><span class="line"> addEntry(hash, key, value, i);   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面程序中用到了一个重要的内部接口：Map.Entry，每个 Map.Entry 其实就是一个 key-value 对。从上面程序中可以看出：当系统决定存储 HashMap 中的 key-value 对时，仅仅只是根据 key 来计算并决定每个 Entry 的存储位置。我们完全可以把 Map 集合中的 value 当成 key 的附属，当系统决定了 key 的存储位置之后，value 随之保存在那里即可。</p><h1 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h1><p>在上面的源代码中提供了一个根据hashcode()返回值计算hash码的方法，继续查看其源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static int hash(int h)   </span><br><span class="line">&#123;   </span><br><span class="line">    h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);   </span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到hashcode()方法为一个仅与参数自身有关的方法，对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用 hash(int h) 方法所计算得到的 Hash 码值总是相同的。接下来程序会调用 indexFor(int h, int length) 方法来计算该对象应该保存在 table 数组的哪个索引处。indexFor(int h, int length) 方法的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length)   </span><br><span class="line">&#123;   </span><br><span class="line">    return h &amp; (length-1);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法非常巧妙，它总是通过 h &amp;(table.length -1) 来得到该对象的保存位置——而 HashMap 底层数组的长度总是 2 的 n 次方，这一点可参看后面关于 HashMap 构造器的介绍。</p><p>当 length 总是 2 的倍数时，h &amp; (length-1) 将是一个非常巧妙的设计：假设 h=5,length=16, 那么 h &amp; length - 1 将得到 5；如果 h=6,length=16, 那么 h &amp; length - 1 将得到 6 ……如果 h=15,length=16, 那么 h &amp; length - 1 将得到 15；但是当 h=16 时 , length=16 时，那么 h &amp; length - 1 将得到 0 了；当 h=17 时 , length=16 时，那么 h &amp; length - 1 将得到 1 了……这样保证计算得到的索引值总是位于 table 数组的索引之内。</p><p>根据上面 put 方法的源代码可以看出，当程序试图将一个 key-value 对放入 HashMap 中时，程序首先根据该 key 的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但 key 不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部——具体说明继续看 addEntry() 方法的说明。</p><p>当向 HashMap 中添加 key-value 对，由其 key 的 hashCode() 返回值决定该 key-value 对（就是 Entry 对象）的存储位置。当两个 Entry 对象的 key 的 hashCode() 返回值相同时，将由 key 通过 eqauls() 比较值决定是采用覆盖行为（返回 true），还是产生 Entry 链（返回 false）。</p><p>上面程序中还调用了 addEntry(hash, key, value, i); 代码，其中 addEntry 是 HashMap 提供的一个包访问权限的方法，该方法仅用于添加一个 key-value 对。下面是该方法的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void addEntry(int hash, K key, V value, int bucketIndex)   </span><br><span class="line">&#123;   </span><br><span class="line">    &#x2F;&#x2F; 获取指定 bucketIndex 索引处的 Entry   </span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; table[bucketIndex];     &#x2F;&#x2F; </span><br><span class="line">    &#x2F;&#x2F; 将新创建的 Entry 放入 bucketIndex 索引处，并让新的 Entry 指向原来的 Entry   </span><br><span class="line">    table[bucketIndex] &#x3D; new Entry&lt;K,V&gt;(hash, key, value, e);   </span><br><span class="line">    &#x2F;&#x2F; 如果 Map 中的 key-value 对的数量超过了极限  </span><br><span class="line">    if (size++ &gt;&#x3D; threshold)   </span><br><span class="line">        &#x2F;&#x2F; 把 table 对象的长度扩充到 2 倍。  </span><br><span class="line">        resize(2 * table.length);    &#x2F;&#x2F; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法的代码很简单，但其中包含了一个非常优雅的设计：系统总是将新添加的 Entry 对象放入 table 数组的 bucketIndex 索引处——如果 bucketIndex 索引处已经有了一个 Entry 对象，那新添加的 Entry 对象指向原有的 Entry 对象（产生一个 Entry 链），如果 bucketIndex 索引处没有 Entry 对象，也就是上面程序①号代码的 e 变量是 null，也就是新放入的 Entry 对象指向 null，也就是没有产生 Entry 链。</p><p>上面程序中还有这样两个变量：</p><pre><code>* size：该变量保存了该 HashMap 中所包含的 key-value 对的数量。* threshold：该变量包含了 HashMap 能容纳的 key-value 对的极限，它的值等于 HashMap 的容量乘以负载因子（load factor）。</code></pre><p>可以看出，当 size++ &gt;= threshold 时，HashMap 会自动调用 resize 方法扩充 HashMap 的容量。每扩充一次，HashMap 的容量就增大一倍。</p><h1 id="HashMap中的构造器"><a href="#HashMap中的构造器" class="headerlink" title="HashMap中的构造器"></a>HashMap中的构造器</h1><p>之前程序中的table实际上就是一个普通数组，，每个数组都有一个固定的长度，这个数组的长度就是 HashMap 的容量。HashMap 包含如下几个构造器：</p><pre><code>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</code></pre><p>当创建一个 HashMap 时，系统会自动创建一个 table 数组来保存 HashMap 中的 Entry，下面是 HashMap 中一个构造器的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line"> public HashMap(int initialCapacity, float loadFactor)   </span><br><span class="line"> &#123;   </span><br><span class="line">     &#x2F;&#x2F; 初始容量不能为负数  </span><br><span class="line">     if (initialCapacity &lt; 0)   </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">        &quot;Illegal initial capacity: &quot; +   </span><br><span class="line">             initialCapacity);   </span><br><span class="line">     &#x2F;&#x2F; 如果初始容量大于最大容量，让出示容量  </span><br><span class="line">     if (initialCapacity &gt; MAXIMUM_CAPACITY)   </span><br><span class="line">         initialCapacity &#x3D; MAXIMUM_CAPACITY;   </span><br><span class="line">     &#x2F;&#x2F; 负载因子必须大于 0 的数值  </span><br><span class="line">     if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor)) &#x2F;&#x2F;标记一 </span><br><span class="line">         throw new IllegalArgumentException(   </span><br><span class="line">         loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 计算出大于 initialCapacity 的最小的 2 的 n 次方值。  </span><br><span class="line">     int capacity &#x3D; 1;   </span><br><span class="line">     while (capacity &lt; initialCapacity)   </span><br><span class="line">         capacity &lt;&lt;&#x3D; 1;   </span><br><span class="line">     this.loadFactor &#x3D; loadFactor;   </span><br><span class="line">     &#x2F;&#x2F; 设置容量极限等于容量 * 负载因子  </span><br><span class="line">     threshold &#x3D; (int)(capacity * loadFactor);   </span><br><span class="line">     &#x2F;&#x2F; 初始化 table 数组  </span><br><span class="line">     table &#x3D; new Entry[capacity];            &#x2F;&#x2F;  </span><br><span class="line">     init();   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面代码中标记一的代码包含了一个简洁的代码实现：找出大于 initialCapacity 的、最小的 2 的 n 次方值，并将其作为 HashMap 的实际容量（由 capacity 变量保存）。例如给定 initialCapacity 为 10，那么该 HashMap 的实际容量就是 16。<br>程序①号代码处可以看到：table 的实质就是一个数组，一个长度为 capacity 的数组。</p><p>对于 HashMap 及其子类而言，它们采用 Hash 算法来决定集合中元素的存储位置。当系统开始初始化 HashMap 时，系统会创建一个长度为 capacity 的 Entry 数组，这个数组里可以存储元素的位置被称为“桶（bucket）”，每个 bucket 都有其指定索引，系统可以根据其索引快速访问该 bucket 里存储的元素。</p><p>无论何时，HashMap 的每个“桶”只存储一个元素（也就是一个 Entry），由于 Entry 对象可以包含一个引用变量（就是 Entry 构造器的的最后一个参数）用于指向下一个 Entry，因此可能出现的情况是：HashMap 的 bucket 中只有一个 Entry，但这个 Entry 指向另一个 Entry ——这就形成了一个 Entry 链。如图所示(图片来源于网络)：</p><p><img src="/images/haspmap.jpg" alt="alt"></p><p>当 HashMap 的每个 bucket 里存储的 Entry 只是单个 Entry ——也就是没有通过指针产生 Entry 链时，此时的 HashMap 具有最好的性能：当程序通过 key 取出对应 value 时，系统只要先计算出该 key 的 hashCode() 返回值，在根据该 hashCode 返回值找出该 key 在 table 数组中的索引，然后取出该索引处的 Entry，最后返回该 key 对应的 value 即可。看 HashMap 类的 get(K key) 方法代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以指定初始化容量、负载因子创建 HashMap   </span><br><span class="line">public V get(Object key)   </span><br><span class="line">&#123;   </span><br><span class="line"> &#x2F;&#x2F; 如果 key 是 null，调用 getForNullKey 取出对应的 value   </span><br><span class="line"> if (key &#x3D;&#x3D; null)   </span><br><span class="line">     return getForNullKey();   </span><br><span class="line"> &#x2F;&#x2F; 根据该 key 的 hashCode 值计算它的 hash 码  </span><br><span class="line"> int hash &#x3D; hash(key.hashCode());   </span><br><span class="line"> &#x2F;&#x2F; 直接取出 table 数组中指定索引处的值，  </span><br><span class="line"> for (Entry&lt;K,V&gt; e &#x3D; table[indexFor(hash, table.length)];   </span><br><span class="line">     e !&#x3D; null;   </span><br><span class="line">     &#x2F;&#x2F; 搜索该 Entry 链的下一个 Entr   </span><br><span class="line">     e &#x3D; e.next)         &#x2F;&#x2F; ①  </span><br><span class="line"> &#123;   </span><br><span class="line">     Object k;   </span><br><span class="line">     &#x2F;&#x2F; 如果该 Entry 的 key 与被搜索 key 相同  </span><br><span class="line">     if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key   </span><br><span class="line">         || key.equals(k)))   </span><br><span class="line">         return e.value;   </span><br><span class="line"> &#125;   </span><br><span class="line"> return null;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出，如果 HashMap 的每个 bucket 里只有一个 Entry 时，HashMap 可以根据索引、快速地取出该 bucket 里的 Entry；在发生“Hash 冲突”的情况下，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素。</p><p>归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 Hash 算法来决定其存储位置；当需要取出一个 Entry 时，也会根据 Hash 算法找到其存储位置，直接取出该 Entry。由此可见：HashMap 之所以能快速存、取它所包含的 Entry，完全类似于现实生活中母亲从小教我们的：不同的东西要放在不同的位置，需要时才能快速找到它。</p><p>当创建 HashMap 时，有一个默认的负载因子（load factor），其默认值为 0.75，这是时间和空间成本上一种折衷：增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</p><p>掌握了上面知识之后，我们可以在创建 HashMap 时根据实际需要适当地调整 load factor 的值；如果程序比较关心空间开销、内存比较紧张，可以适当地增加负载因子；如果程序比较关心时间开销，内存比较宽裕则可以适当的减少负载因子。通常情况下，程序员无需改变负载因子的值。</p><p>如果开始就知道 HashMap 会保存多个 key-value 对，可以在创建时就使用较大的初始化容量，如果 HashMap 中 Entry 的数量一直不会超过极限容量（capacity * load factor），HashMap 就无需调用 resize() 方法重新分配 table 数组，从而保证较好的性能。当然，开始就将初始容量设置太高可能会浪费空间（系统需要创建一个长度为 capacity 的 Entry 数组），因此创建 HashMap 时初始化容量设置也需要重视起来。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在jdk1.8中对HashMap进行了优化，之后会结合红黑树在一起说，留个待续…</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅实现属性的动态注入</title>
      <link href="/Java/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%AE%9E%E7%8E%B0%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8A%A8%E6%80%81%E6%B3%A8%E5%85%A5/"/>
      <url>/Java/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%AE%9E%E7%8E%B0%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8A%A8%E6%80%81%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是在实际开发中遇到的一个问题。从数据库查询返回的 List&lt; Map&lt; String, Object&gt;&gt; 的集合。并且返回的列名是中文的，项目也没有使用mybatis 直接使用的jdbcTemplate. 并且字段还超级多，这样将数据转换的时候如果一个一个的注入就会让代码臭长臭长的，所以才有了动态注入。<br>我这里我整个思路都贴出来。</p><a id="more"></a><h1 id="实例类Entry"><a href="#实例类Entry" class="headerlink" title="实例类Entry"></a>实例类Entry</h1><p>我们先建一个entry类。用于对象存储。<br>我这里 创建一个BaseDateBean 的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Setter</span><br><span class="line">@Getter</span><br><span class="line">public class BaseDateBean &#123;</span><br><span class="line"></span><br><span class="line">    private String  attribute1;</span><br><span class="line">    private String  attribute2;</span><br><span class="line">    private String  attribute3;</span><br><span class="line">    private String  attribute4;</span><br><span class="line">    private String  attribute5;</span><br><span class="line">    private String  attribute6;</span><br><span class="line">    private String  attribute7;</span><br><span class="line">    private String  attribute8;</span><br><span class="line">    private String  attribute9;</span><br><span class="line">    private String  attribute10;</span><br><span class="line">    private String  attribute11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例就不列很多了，比如有100个，所以如果一个一个的set注入就很low了。</p><h1 id="创建map映射"><a href="#创建map映射" class="headerlink" title="创建map映射"></a>创建map映射</h1><p>在创建好实体类后，还得创建一个静态的map 集合，将数据库的列名和我们实体类的属性名做一个一一对应。这里创建的这个map 集合是我个人愚见。没有想到更好的办法就先这样处理的。<br>我们创建一个BaseDataMap类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public  class BaseDataMap&#123;</span><br><span class="line">    private BaseDataMap()&#123;&#125;</span><br><span class="line">    public static final Map&lt;String,String&gt; cnEnMap&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">    static&#123;</span><br><span class="line">        cnEnMap.put(&quot;属性1&quot;,&quot;attribute1&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性2&quot;,&quot;attribute2&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性3&quot;,&quot;attribute3&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性4&quot;,&quot;attribute4&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性5&quot;,&quot;attribute5&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性6&quot;,&quot;attribute6&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性7&quot;,&quot;attribute7&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性8&quot;,&quot;attribute8&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性9&quot;,&quot;attribute9&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性10&quot;,&quot;attribute10&quot;);</span><br><span class="line">        cnEnMap.put(&quot;属性11&quot;,&quot;attribute11&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到就是一个动态的map。</p><h1 id="映射类"><a href="#映射类" class="headerlink" title="映射类"></a>映射类</h1><p>接下来就是核心代码了。我们创建一个ReflectHelper类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class ReflectHelper &#123;</span><br><span class="line"></span><br><span class="line">    private Class cls;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 传过来的对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Object obj;</span><br><span class="line">    private Hashtable&lt;String, Method&gt; getMethods &#x3D; null;</span><br><span class="line">    private Hashtable&lt;String, Method&gt; setMethods &#x3D; null;</span><br><span class="line">    public ReflectHelper(Object o) &#123;</span><br><span class="line">        obj &#x3D; o;</span><br><span class="line">        initMethods();</span><br><span class="line">    &#125;</span><br><span class="line">    public void initMethods() &#123;</span><br><span class="line">        getMethods &#x3D; new Hashtable&lt;&gt;();</span><br><span class="line">        setMethods &#x3D; new Hashtable&lt;&gt;();</span><br><span class="line">        cls &#x3D; obj.getClass();</span><br><span class="line">        Method[] methods &#x3D; cls.getMethods();</span><br><span class="line">        &#x2F;&#x2F; 定义正则表达式，从方法中过滤出getter &#x2F; setter 函数.</span><br><span class="line">        String gs &#x3D; &quot;get(\\w )&quot;;</span><br><span class="line">        Pattern getM &#x3D; Pattern.compile(gs);</span><br><span class="line">        String ss &#x3D; &quot;set(\\w )&quot;;</span><br><span class="line">        Pattern setM &#x3D; Pattern.compile(ss);</span><br><span class="line">        &#x2F;&#x2F; 把方法中的&quot;set&quot; 或者 &quot;get&quot; 去掉,$1匹配第一个</span><br><span class="line">        String rapl &#x3D; &quot;$1&quot;;</span><br><span class="line">        String param;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; methods.length;   i) &#123;</span><br><span class="line">            Method m &#x3D; methods[i];</span><br><span class="line">            String methodName &#x3D; m.getName();</span><br><span class="line">            if (Pattern.matches(gs, methodName)) &#123;</span><br><span class="line">                param &#x3D; getM.matcher(methodName).replaceAll(rapl).toLowerCase();</span><br><span class="line">                getMethods.put(param, m);</span><br><span class="line">            &#125; else if (Pattern.matches(ss, methodName)) &#123;</span><br><span class="line">                param &#x3D; setM.matcher(methodName).replaceAll(rapl).toLowerCase();</span><br><span class="line">                setMethods.put(param, m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean setMethodValue(String property,Object object) &#123;</span><br><span class="line">        Method m &#x3D; setMethods.get(property.toLowerCase());</span><br><span class="line">        if (m !&#x3D; null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F; 调用目标类的setter函数</span><br><span class="line">                m.invoke(obj, object);</span><br><span class="line">                return true;</span><br><span class="line">            &#125; catch (Exception ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以看到其实也就两个方法setMethodValue 和initMethods 。<br>initMethods 方法是在实例化 ReflectHelper 这个类的时候执行的，主要的工作就是找到我们需要动态注入实例类的get 和set 方法。而setMethodValue 方法就是给这个属性赋值的。</p><h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><p> 现在准备工作做好了，怎么使用呢?<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;BaseDateBean&gt; getBaseDateBean(List&lt;Map&lt;String, Object&gt;&gt; mapList)&#123;</span><br><span class="line">       List&lt;BaseDateBean&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">       if(mapList&#x3D;&#x3D;null||mapList.isEmpty())&#123;</span><br><span class="line">           return list;</span><br><span class="line">       &#125;</span><br><span class="line">       BaseDateBean baseDateBean;</span><br><span class="line">       for(Map&lt;String, Object&gt; map:mapList)&#123;</span><br><span class="line">           baseDateBean&#x3D;new BaseDateBean();</span><br><span class="line">           for(Map.Entry&lt;String, Object&gt; entry : map.entrySet())&#123;</span><br><span class="line">               String mapKey &#x3D; entry.getKey();</span><br><span class="line">               log.info(mapKey);</span><br><span class="line">               ReflectHelper reflectHelper &#x3D; new ReflectHelper(baseDateBean);</span><br><span class="line">               log.info(BaseDataMap.cnEnMap.get(mapKey));</span><br><span class="line">               String value&#x3D;entry.getValue()&#x3D;&#x3D;null?ConstantPool.SEPARATORNULL:entry.getValue().toString();</span><br><span class="line">               log.info(value);</span><br><span class="line">               if(entry.getValue()!&#x3D;null)&#123;</span><br><span class="line">                   reflectHelper.setMethodValue(BaseDataMap.cnEnMap.get(mapKey),String.valueOf(entry.getValue()));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           list.add(baseDateBean);</span><br><span class="line">       &#125;</span><br><span class="line">       return list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br> 遍历list 集合中的map，动态的将属性值注入到实体类中。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 动态注入 </tag>
            
            <tag> 映射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 优雅的实现CORS跨域</title>
      <link href="/springBoot/Spring%20Boot%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0CORS%E8%B7%A8%E5%9F%9F/"/>
      <url>/springBoot/Spring%20Boot%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0CORS%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  一般的情况下，项目都是前后端分离的，所以这里就涉及到一个很严重的问题，当协议，端口，IP三者有其一不同就会产生跨域，所以需要做跨域支持。</p><a id="more"></a><h1 id="测试跨域的文件"><a href="#测试跨域的文件" class="headerlink" title="测试跨域的文件"></a>测试跨域的文件</h1><p>在这之前，我们先写一个测试接口是否跨域的html ,这样下面的测试比较方便。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;link type&#x3D;&quot;test&#x2F;css&quot; href&#x3D;&quot;css&#x2F;style.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; style&#x3D;&quot;width:600px;height:30px;font-size:14px;&quot; id&#x3D;&quot;urlText&quot; value&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; style&#x3D;&quot;margin: 10px&quot;;  id&#x3D;&quot;cors&quot; value&#x3D;&quot;判断是否可访问&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;http:&#x2F;&#x2F;localhost:9090&#x2F;test&#x2F;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.2.1.min.js&quot;&gt;&lt;&#x2F;script&gt;  </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">$(&quot;#cors&quot;).click(</span><br><span class="line">function()&#123;</span><br><span class="line">var url2 &#x3D; $(&quot;#urlText&quot;).val();</span><br><span class="line">$.post(&#123;</span><br><span class="line">contentType:&#39;application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8&#39;,</span><br><span class="line">url:url2,</span><br><span class="line">data: &quot;&#x2F;rAIeKeSBG1LV XoIq82&#x2F;O&quot;,</span><br><span class="line">success:function(data)&#123;</span><br><span class="line">alert(&quot;success&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>接下来我们来学习下在springboot 项目中怎么实现支持跨域。</p><h1 id="CrossOrigin-注解"><a href="#CrossOrigin-注解" class="headerlink" title="@CrossOrigin 注解"></a>@CrossOrigin 注解</h1><p>这种方法是springboot 自带的，使用比较简单，在需要支持的跨域的接口上加上这个注解就可以了。<br>比如在我们项目的demo 接口加上注解.就表示这个接口支持跨域，其中origins = “*”<br>表示所有的地址都可以访问这个接口，也可以写具体的地址，表示只有这个地址访问才能访问到接口。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@CrossOrigin(origin &#x3D;&quot;*&quot;)</span><br><span class="line">public class Demo &#123;</span><br><span class="line">@RequestMapping(&quot;&#x2F;&quot;)</span><br><span class="line">public String Demo() &#123;</span><br><span class="line">return &quot;Hello Word&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们也来测试一下，启动项目后，在浏览器上运行我们的测试的html文件。<br>发现localhost:9090/test/ 是可以访问的。<br>说明跨域是支持的。大伙可以先将注解去掉测试一下，然后加上注解测试一下进行对比。</p><p>这种方式虽然很简单，但是缺点也不小，需要跨域的接口都需要加上这个注解，这对前后端分离的项目是不友好的，所以这种方式基本上用的很少。</p><h1 id="重写WebMvcConfigurer的addCorsMappings-方法。"><a href="#重写WebMvcConfigurer的addCorsMappings-方法。" class="headerlink" title="重写WebMvcConfigurer的addCorsMappings 方法。"></a>重写WebMvcConfigurer的addCorsMappings 方法。</h1><p>这种方法在实际项目中也用的比较多，是一种全局支持跨域的方法。<br>我们创建一个CorsConfig 类。内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class CorsConfig implements WebMvcConfigurer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">        registry.addMapping(&quot;&#x2F;**&quot;)&#x2F;&#x2F;项目中的所有接口都支持跨域</span><br><span class="line">                .allowedOrigins(&quot;*&quot;)&#x2F;&#x2F;所有地址都可以访问，也可以配置具体地址</span><br><span class="line">                .allowCredentials(true)</span><br><span class="line">                .allowedMethods(&quot;*&quot;)&#x2F;&#x2F;&quot;GET&quot;, &quot;HEAD&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;</span><br><span class="line">                .maxAge(3600);&#x2F;&#x2F; 跨域允许时间</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上@Configuration 表示是配置类，在项目启动的时候会加载。实现WebMvcConfigurer 接口并重写addCorsMappings 方法。代码比较简单，也有注释。</p><p>测试的话，大家可以自行测试，我测试都是通过的和上面一样测试就可以，这里就不占篇幅了。</p><h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>除了上面方法外，也可以使用过滤器。我们创建一个CorsFilter 类，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class CorsFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletResponse response &#x3D; (HttpServletResponse)servletResponse;</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, PUT, GET, OPTIONS, DELETE&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept, client_id, uuid, Authorization&quot;);</span><br><span class="line">        response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;);</span><br><span class="line">        response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中设置response.setHeader(“Access-Control-Allow-Origin”, “*”);表示所有的地址都可以访问项目接口。</p><h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p>接下来我们再介绍一个常用的功能，前后端分离，在访问接口的时候，有的 公司往往会增加一下专属的后缀名才能访问。实际上没有什么太大的作用，能稍微增加一下系统的安全性。这里我就简单是实现一下。真个都非常简单。<br>一样的是实现WebMvcConfigurer 接口，重写configurePathMatch你方法和增加一个dispatcherServlet。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void configurePathMatch(PathMatchConfigurer configurer) &#123;</span><br><span class="line">        configurer.setUseRegisteredSuffixPatternMatch(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean servletRegistrationBean(DispatcherServlet dispatcherServlet) &#123;</span><br><span class="line">        ServletRegistrationBean bean &#x3D; new ServletRegistrationBean(dispatcherServlet);</span><br><span class="line">        bean.addUrlMappings(&quot;*.zlf&quot;);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个功能实现，就只用这个多代码，configurePathMatch方法中设置的configurer.setUseRegisteredSuffixPatternMatch(true); 主要是将index 和index.* 都指向我们controller 中配置的@RequestMapping(“/index”)。</p><p>下面的servletRegistrationBean 方法主要是增加自定义拦截器，只有后缀为“.zlf”的接口才放行。</p><p>这样两步就简单的实现了接口增加自定义的后缀名了。</p><p>到此为止，springboot 支持跨域的方式就差不多了，当然还有其他的实现方式没有研究。这些希望对大家有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> springBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/hello-world/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/hello-world/</url>
      
        <content type="html"><![CDATA[<p>谈谈建站之路…</p><a id="more"></a><h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><h3 id="坐井观天"><a href="#坐井观天" class="headerlink" title="坐井观天"></a>坐井观天</h3><p>&ensp;&ensp;转眼毕业已经半年有余，主要的工作状态就好像每天都很忙又感觉不知道自己在忙什么。眨眼一晃半年多就这么过来了，这段时间认识了很多很多人，经历了很多很多事，就像做梦一样。刚好这次赶上疫情(看到的你记得戴口罩，保护好自己)，在家的时间比较多，总结了一下:emm,生活真的好难，好像还是代码简单，那我想尽力把简单的事做好,不然连做自己都做不到，更没什么资格去承担什么责任。</p><h3 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h3><p>&ensp;&ensp;主要写一些自己在工作以及在平时学习上的总结，这段儿会陆续整理之前想总结一直没下手的,今天先简单整理了两个…不定时更新</p><h3 id="总得有个标题吧"><a href="#总得有个标题吧" class="headerlink" title="总得有个标题吧"></a>总得有个标题吧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello word , hello world！</span><br></pre></td></tr></table></figure><p><img src="/images/hello-word.jpg" alt="alt"></p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
